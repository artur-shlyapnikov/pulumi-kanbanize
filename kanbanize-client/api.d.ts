import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from './configuration';
import { RequestContext, ResponseContext } from './http';
import { Observable } from './rxjsStub';
/**
* Anotation data
*/
export declare class Annotation {
    'author_id'?: number;
    'comment_id'?: string;
    'content'?: string;
    'created_at'?: Date;
    'thread_id'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Annotation>, skipDefaultValuesInitialization?: boolean);
}
/**
* Annotation data.
*/
export declare class AnnotationAddOrUpdateRequest {
    /**
    * The comment id of the annotation. This is a random string submitted by the user on create of an annotation.
    */
    'comment_id': string;
    /**
    * The value of the annotation.
    */
    'content': string;
    /**
    * The thread id of the annotation. This is a random string submitted by the user on create of an annotation.
    */
    'thread_id': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<AnnotationAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Annotation data.
*/
export declare class AnnotationRemoveRequest {
    /**
    * The comment id of the annotation.
    */
    'comment_id': string;
    /**
    * The thread id of the annotation.
    */
    'thread_id': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<AnnotationRemoveRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* An hourly or minutely api request limit.
*/
export declare class ApiLimit {
    'limit'?: number;
    'types'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ApiLimit>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded for each request execution torwards the api aggregated by parameters
*/
export declare class ApiRequestHistoryAggregated {
    'aggregation_period'?: string;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ApiRequestHistoryAggregated>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded for each request execution torwards the api
*/
export declare class ApiRequestHistoryEvent {
    'method'?: string;
    'resource'?: string;
    'status_code'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ApiRequestHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* Archived card version data
*/
export declare class ArchiveCardVersion {
    'name'?: string;
    'version_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ArchiveCardVersion>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BlockReasonAvailabilityEnum
 */
export declare const BlockReasonAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BlockReasonAvailabilityEnum = typeof BlockReasonAvailabilityEnum[keyof typeof BlockReasonAvailabilityEnum];
/**
 *
 * @export
 * @type BlockReasonIconTypeEnum
 */
export declare const BlockReasonIconTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BlockReasonIconTypeEnum = typeof BlockReasonIconTypeEnum[keyof typeof BlockReasonIconTypeEnum];
/**
 *
 * @export
 * @type BlockReasonIsEnabledEnum
 */
export declare const BlockReasonIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BlockReasonIsEnabledEnum = typeof BlockReasonIsEnabledEnum[keyof typeof BlockReasonIsEnabledEnum];
/**
 *
 * @export
 * @type BlockReasonWithCardsEnum
 */
export declare const BlockReasonWithCardsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BlockReasonWithCardsEnum = typeof BlockReasonWithCardsEnum[keyof typeof BlockReasonWithCardsEnum];
/**
 *
 * @export
 * @type BlockReasonWithDateEnum
 */
export declare const BlockReasonWithDateEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BlockReasonWithDateEnum = typeof BlockReasonWithDateEnum[keyof typeof BlockReasonWithDateEnum];
/**
 *
 * @export
 * @type BlockReasonWithUsersEnum
 */
export declare const BlockReasonWithUsersEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BlockReasonWithUsersEnum = typeof BlockReasonWithUsersEnum[keyof typeof BlockReasonWithUsersEnum];
/**
* Block reason data
*/
export declare class BlockReason {
    'availability'?: BlockReasonAvailabilityEnum;
    'color'?: string;
    'icon_id'?: number;
    'icon_type'?: BlockReasonIconTypeEnum;
    'is_enabled'?: BlockReasonIsEnabledEnum;
    'label'?: string;
    'reason_id'?: number;
    'with_cards'?: BlockReasonWithCardsEnum;
    'with_date'?: BlockReasonWithDateEnum;
    'with_users'?: BlockReasonWithUsersEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BlockReason>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on block reasons resource
*/
export declare class BlockReasonHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'reason_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BlockReasonHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardIsArchivedEnum
 */
export declare const BoardIsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardIsArchivedEnum = typeof BoardIsArchivedEnum[keyof typeof BoardIsArchivedEnum];
/**
* Board data
*/
export declare class Board {
    'description'?: string;
    'is_archived'?: BoardIsArchivedEnum;
    'name'?: string;
    'workspace_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Board>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCardTypeCardColorSyncEnum
 */
export declare const BoardCardTypeCardColorSyncEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCardTypeCardColorSyncEnum = typeof BoardCardTypeCardColorSyncEnum[keyof typeof BoardCardTypeCardColorSyncEnum];
/**
 *
 * @export
 * @type BoardCardTypeIconTypeEnum
 */
export declare const BoardCardTypeIconTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCardTypeIconTypeEnum = typeof BoardCardTypeIconTypeEnum[keyof typeof BoardCardTypeIconTypeEnum];
/**
* Board card type data
*/
export declare class BoardCardType {
    'card_color_sync'?: BoardCardTypeCardColorSyncEnum;
    'color'?: string;
    'icon_id'?: number;
    'icon_type'?: BoardCardTypeIconTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCardType>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
 * @export
 * @type BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum
 */
export declare const BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum = typeof BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum[keyof typeof BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum];
/**
* Board card type data.
*/
export declare class BoardCardTypeCreateOrUpdateRequest {
    /**
    * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
    */
    'card_color_sync'?: BoardCardTypeCreateOrUpdateRequestCardColorSyncEnum;
    /**
    * The color of the card type. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * An icon for the card type. If set to 0, the card type will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCardTypeCreateOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldAllowedValueIsDefaultEnum
 */
export declare const BoardCustomFieldAllowedValueIsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldAllowedValueIsDefaultEnum = typeof BoardCustomFieldAllowedValueIsDefaultEnum[keyof typeof BoardCustomFieldAllowedValueIsDefaultEnum];
/**
* Board custom field allowed value data
*/
export declare class BoardCustomFieldAllowedValue {
    'is_default'?: BoardCustomFieldAllowedValueIsDefaultEnum;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldAllowedValue>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - card picker
*/
export declare class BoardCustomFieldCardPicker {
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - contributor
*/
export declare class BoardCustomFieldContributor {
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestCardPicker {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestCardPickerIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - card picker.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestCardPickerAllOf {
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestCardPickerAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum]; /** * Board custom field data.  */ export declare class BoardCustomFieldCreateOrUpdateRequestCommon { /** * The color of the custom field. 6 hexadecimal characters are expected.  */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestCommonIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestContributor {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestContributorIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - contributor.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestContributorAllOf {
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestContributorAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestDate {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestDateIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestDateDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestDateInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestDateValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum];
/**
* Board custom field data - date.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestDateAllOf {
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestDateAllOfDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestDateAllOfInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestDateAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestDateAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum];
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum];
/**
 * Controls whether the global default values of the custom field should be used as a board defaults.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestDropdown {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestDropdownIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: BoardCustomFieldCreateOrUpdateRequestDropdownAllowOtherValueEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestDropdownDisplayWidthEnum;
    /**
    * Controls whether the global default values of the custom field should be used as a board defaults.
    */
    'inherit_default_values'?: BoardCustomFieldCreateOrUpdateRequestDropdownInheritDefaultValuesEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum];
/**
 * Controls whether the global default values of the custom field should be used as a board defaults.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum];
/**
* Board custom field data - dropdrown.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestDropdownAllOf {
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: BoardCustomFieldCreateOrUpdateRequestDropdownAllOfAllowOtherValueEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestDropdownAllOfDisplayWidthEnum;
    /**
    * Controls whether the global default values of the custom field should be used as a board defaults.
    */
    'inherit_default_values'?: BoardCustomFieldCreateOrUpdateRequestDropdownAllOfInheritDefaultValuesEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestDropdownAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestFile {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestFileIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - file.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestFileAllOf {
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestFileAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestLink {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestLinkIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestLinkDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestLinkInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum];
/**
* Board custom field data - link.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestLinkAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestLinkAllOfDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestLinkAllOfInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestLinkAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestLinkAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestMultiLine {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestMultiLineIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestMultiLineInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestMultiLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum];
/**
* Board custom field data - multi-line text.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestMultiLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfInheritDefaultValueEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestMultiLineAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestMultiLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestNumber {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestNumberIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestNumberDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestNumberInheritDefaultValueEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'unique_values'?: BoardCustomFieldCreateOrUpdateRequestNumberUniqueValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum];
/**
* Board custom field data - number.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestNumberAllOf {
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestNumberAllOfDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestNumberAllOfInheritDefaultValueEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'unique_values'?: BoardCustomFieldCreateOrUpdateRequestNumberAllOfUniqueValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestNumberAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestNumberAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestSingleLine {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestSingleLineIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestSingleLineDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestSingleLineInheritDefaultValueEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'unique_values'?: BoardCustomFieldCreateOrUpdateRequestSingleLineUniqueValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestSingleLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum];
/**
 * Controls whether the global default value of the custom field should be used as a board default.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum];
/**
* Board custom field data - single-line text.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestSingleLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfDisplayWidthEnum;
    /**
    * Controls whether the global default value of the custom field should be used as a board default.
    */
    'inherit_default_value'?: BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfInheritDefaultValueEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'unique_values'?: BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfUniqueValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: BoardCustomFieldCreateOrUpdateRequestSingleLineAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestSingleLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum = typeof BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum];
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum];
export declare class BoardCustomFieldCreateOrUpdateRequestVote {
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: BoardCustomFieldCreateOrUpdateRequestVoteIsAlwaysPresentEnum;
    /**
    * The position of the field within the list of fields of the cards on the board.
    */
    'position'?: number;
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: BoardCustomFieldCreateOrUpdateRequestVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum
 */
export declare const BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum = typeof BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum[keyof typeof BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum];
/**
* Board custom field data - vote.
*/
export declare class BoardCustomFieldCreateOrUpdateRequestVoteAllOf {
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: BoardCustomFieldCreateOrUpdateRequestVoteAllOfCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldCreateOrUpdateRequestVoteAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataCardPickerIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataCardPickerIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataCardPickerIsAlwaysPresentEnum = typeof BoardCustomFieldDataCardPickerIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataCardPickerIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataCardPicker {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataCardPickerIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataCardPickerWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataCardPickerWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCardPickerWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
export declare class BoardCustomFieldDataCardPickerWithBoardIdAllOf {
    /**
    * Board id.
    */
    'board_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCardPickerWithBoardIdAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataCardPickerWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCardPickerWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
export declare class BoardCustomFieldDataCardPickerWithFieldIdAllOf {
    /**
    * Field id.
    */
    'field_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCardPickerWithFieldIdAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataCommonIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataCommonIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataCommonIsAlwaysPresentEnum = typeof BoardCustomFieldDataCommonIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataCommonIsAlwaysPresentEnum];
/**
* Board custom field data
*/
export declare class BoardCustomFieldDataCommon {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataCommonIsAlwaysPresentEnum;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataContributorIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataContributorIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataContributorIsAlwaysPresentEnum = typeof BoardCustomFieldDataContributorIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataContributorIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataContributor {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataContributorIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataContributorWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataContributorWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataContributorWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataContributorWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataContributorWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDateIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDateIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateIsAlwaysPresentEnum = typeof BoardCustomFieldDataDateIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDateIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDateDisplayWidthEnum = typeof BoardCustomFieldDataDateDisplayWidthEnum[keyof typeof BoardCustomFieldDataDateDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataDateInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateInheritDefaultValueEnum = typeof BoardCustomFieldDataDateInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataDateInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateValueIsRequiredEnum = typeof BoardCustomFieldDataDateValueIsRequiredEnum[keyof typeof BoardCustomFieldDataDateValueIsRequiredEnum];
export declare class BoardCustomFieldDataDate {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDateIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataDateDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataDateInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataDateValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum = typeof BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum = typeof BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum = typeof BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataDateWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDateWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataDateWithBoardIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataDateWithBoardIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataDateWithBoardIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDateWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum = typeof BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum = typeof BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum = typeof BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataDateWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDateWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataDateWithFieldIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataDateWithFieldIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataDateWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDateWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDropdownIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownIsAlwaysPresentEnum = typeof BoardCustomFieldDataDropdownIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDropdownIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownAllowOtherValueEnum
 */
export declare const BoardCustomFieldDataDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownAllowOtherValueEnum = typeof BoardCustomFieldDataDropdownAllowOtherValueEnum[keyof typeof BoardCustomFieldDataDropdownAllowOtherValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDropdownDisplayWidthEnum = typeof BoardCustomFieldDataDropdownDisplayWidthEnum[keyof typeof BoardCustomFieldDataDropdownDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldDataDropdownInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownInheritDefaultValuesEnum = typeof BoardCustomFieldDataDropdownInheritDefaultValuesEnum[keyof typeof BoardCustomFieldDataDropdownInheritDefaultValuesEnum];
export declare class BoardCustomFieldDataDropdown {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDropdownIsAlwaysPresentEnum;
    'position'?: number;
    'allow_other_value'?: BoardCustomFieldDataDropdownAllowOtherValueEnum;
    'display_width'?: BoardCustomFieldDataDropdownDisplayWidthEnum;
    'inherit_default_values'?: BoardCustomFieldDataDropdownInheritDefaultValuesEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum
 */
export declare const BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum = typeof BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum[keyof typeof BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum = typeof BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum = typeof BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum[keyof typeof BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum];
export declare class BoardCustomFieldDataDropdownWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDropdownWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'allow_other_value'?: BoardCustomFieldDataDropdownWithBoardIdAllowOtherValueEnum;
    'display_width'?: BoardCustomFieldDataDropdownWithBoardIdDisplayWidthEnum;
    'inherit_default_values'?: BoardCustomFieldDataDropdownWithBoardIdInheritDefaultValuesEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDropdownWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum
 */
export declare const BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum = typeof BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum[keyof typeof BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum = typeof BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum = typeof BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum[keyof typeof BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum];
export declare class BoardCustomFieldDataDropdownWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'allow_other_value'?: BoardCustomFieldDataDropdownWithFieldIdAllowOtherValueEnum;
    'display_width'?: BoardCustomFieldDataDropdownWithFieldIdDisplayWidthEnum;
    'inherit_default_values'?: BoardCustomFieldDataDropdownWithFieldIdInheritDefaultValuesEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataDropdownWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataFileIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataFileIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataFileIsAlwaysPresentEnum = typeof BoardCustomFieldDataFileIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataFileIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataFile {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataFileIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataFile>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataFileWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataFileWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataFileWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum];
export declare class BoardCustomFieldDataFileWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataFileWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataFileWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataLinkIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkIsAlwaysPresentEnum = typeof BoardCustomFieldDataLinkIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataLinkIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkDisplayWidthEnum
 */
export declare const BoardCustomFieldDataLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataLinkDisplayWidthEnum = typeof BoardCustomFieldDataLinkDisplayWidthEnum[keyof typeof BoardCustomFieldDataLinkDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataLinkInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkInheritDefaultValueEnum = typeof BoardCustomFieldDataLinkInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataLinkInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkValueIsRequiredEnum = typeof BoardCustomFieldDataLinkValueIsRequiredEnum[keyof typeof BoardCustomFieldDataLinkValueIsRequiredEnum];
export declare class BoardCustomFieldDataLink {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataLinkIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataLinkDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataLinkInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum = typeof BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum = typeof BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum = typeof BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataLinkWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataLinkWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataLinkWithBoardIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataLinkWithBoardIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataLinkWithBoardIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataLinkWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum = typeof BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum = typeof BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum = typeof BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataLinkWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataLinkWithFieldIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataLinkWithFieldIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataLinkWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataLinkWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataMultiLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineIsAlwaysPresentEnum = typeof BoardCustomFieldDataMultiLineIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataMultiLineIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataMultiLineInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineInheritDefaultValueEnum = typeof BoardCustomFieldDataMultiLineInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataMultiLineInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataMultiLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineValueIsRequiredEnum = typeof BoardCustomFieldDataMultiLineValueIsRequiredEnum[keyof typeof BoardCustomFieldDataMultiLineValueIsRequiredEnum];
export declare class BoardCustomFieldDataMultiLine {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataMultiLineIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'inherit_default_value'?: BoardCustomFieldDataMultiLineInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataMultiLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum = typeof BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum = typeof BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataMultiLineWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataMultiLineWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'inherit_default_value'?: BoardCustomFieldDataMultiLineWithBoardIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataMultiLineWithBoardIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataMultiLineWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum = typeof BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum = typeof BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataMultiLineWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'inherit_default_value'?: BoardCustomFieldDataMultiLineWithFieldIdInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataMultiLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataNumberIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberIsAlwaysPresentEnum = typeof BoardCustomFieldDataNumberIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataNumberIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberDisplayWidthEnum
 */
export declare const BoardCustomFieldDataNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataNumberDisplayWidthEnum = typeof BoardCustomFieldDataNumberDisplayWidthEnum[keyof typeof BoardCustomFieldDataNumberDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataNumberInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberInheritDefaultValueEnum = typeof BoardCustomFieldDataNumberInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataNumberInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberUniqueValuesEnum
 */
export declare const BoardCustomFieldDataNumberUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberUniqueValuesEnum = typeof BoardCustomFieldDataNumberUniqueValuesEnum[keyof typeof BoardCustomFieldDataNumberUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberValueIsRequiredEnum = typeof BoardCustomFieldDataNumberValueIsRequiredEnum[keyof typeof BoardCustomFieldDataNumberValueIsRequiredEnum];
export declare class BoardCustomFieldDataNumber {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataNumberIsAlwaysPresentEnum;
    'position'?: number;
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataNumberDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataNumberInheritDefaultValueEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataNumberUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum = typeof BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum = typeof BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum
 */
export declare const BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum = typeof BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum[keyof typeof BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum = typeof BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataNumberWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataNumberWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataNumberWithBoardIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataNumberWithBoardIdInheritDefaultValueEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataNumberWithBoardIdUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataNumberWithBoardIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataNumberWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum = typeof BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum = typeof BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum
 */
export declare const BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum = typeof BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum[keyof typeof BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum = typeof BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataNumberWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDataNumberWithFieldIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataNumberWithFieldIdInheritDefaultValueEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataNumberWithFieldIdUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataNumberWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataNumberWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataSingleLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineIsAlwaysPresentEnum = typeof BoardCustomFieldDataSingleLineIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataSingleLineIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineDisplayWidthEnum
 */
export declare const BoardCustomFieldDataSingleLineDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataSingleLineDisplayWidthEnum = typeof BoardCustomFieldDataSingleLineDisplayWidthEnum[keyof typeof BoardCustomFieldDataSingleLineDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataSingleLineInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineInheritDefaultValueEnum = typeof BoardCustomFieldDataSingleLineInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataSingleLineInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineUniqueValuesEnum
 */
export declare const BoardCustomFieldDataSingleLineUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineUniqueValuesEnum = typeof BoardCustomFieldDataSingleLineUniqueValuesEnum[keyof typeof BoardCustomFieldDataSingleLineUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataSingleLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineValueIsRequiredEnum = typeof BoardCustomFieldDataSingleLineValueIsRequiredEnum[keyof typeof BoardCustomFieldDataSingleLineValueIsRequiredEnum];
export declare class BoardCustomFieldDataSingleLine {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataSingleLineIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataSingleLineDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataSingleLineInheritDefaultValueEnum;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataSingleLineUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataSingleLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum = typeof BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum = typeof BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum
 */
export declare const BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum = typeof BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum[keyof typeof BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum = typeof BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataSingleLineWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataSingleLineWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataSingleLineWithBoardIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataSingleLineWithBoardIdInheritDefaultValueEnum;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataSingleLineWithBoardIdUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataSingleLineWithBoardIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataSingleLineWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum
 */
export declare const BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum = typeof BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum[keyof typeof BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum = typeof BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum[keyof typeof BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum
 */
export declare const BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum = typeof BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum[keyof typeof BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum
 */
export declare const BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum = typeof BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum[keyof typeof BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum];
export declare class BoardCustomFieldDataSingleLineWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'default_value'?: string;
    'display_width'?: BoardCustomFieldDataSingleLineWithFieldIdDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDataSingleLineWithFieldIdInheritDefaultValueEnum;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldDataSingleLineWithFieldIdUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataSingleLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataVoteIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteIsAlwaysPresentEnum = typeof BoardCustomFieldDataVoteIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataVoteIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteCommentIsRequiredEnum
 */
export declare const BoardCustomFieldDataVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteCommentIsRequiredEnum = typeof BoardCustomFieldDataVoteCommentIsRequiredEnum[keyof typeof BoardCustomFieldDataVoteCommentIsRequiredEnum];
export declare class BoardCustomFieldDataVote {
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataVoteIsAlwaysPresentEnum;
    'position'?: number;
    'comment_is_required'?: BoardCustomFieldDataVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum
 */
export declare const BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum = typeof BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum[keyof typeof BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum];
export declare class BoardCustomFieldDataVoteWithBoardId {
    /**
    * Board id.
    */
    'board_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataVoteWithBoardIdIsAlwaysPresentEnum;
    'position'?: number;
    'comment_is_required'?: BoardCustomFieldDataVoteWithBoardIdCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataVoteWithBoardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum
 */
export declare const BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum = typeof BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum[keyof typeof BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum
 */
export declare const BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum = typeof BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum[keyof typeof BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum];
export declare class BoardCustomFieldDataVoteWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'color'?: string;
    'is_always_present'?: BoardCustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum;
    'position'?: number;
    'comment_is_required'?: BoardCustomFieldDataVoteWithFieldIdCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDataVoteWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDateDisplayWidthEnum
 */
export declare const BoardCustomFieldDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDateDisplayWidthEnum = typeof BoardCustomFieldDateDisplayWidthEnum[keyof typeof BoardCustomFieldDateDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDateInheritDefaultValueEnum
 */
export declare const BoardCustomFieldDateInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDateInheritDefaultValueEnum = typeof BoardCustomFieldDateInheritDefaultValueEnum[keyof typeof BoardCustomFieldDateInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDateValueIsRequiredEnum
 */
export declare const BoardCustomFieldDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDateValueIsRequiredEnum = typeof BoardCustomFieldDateValueIsRequiredEnum[keyof typeof BoardCustomFieldDateValueIsRequiredEnum];
/**
* Board custom field data - date
*/
export declare class BoardCustomFieldDate {
    'default_value'?: number;
    'display_width'?: BoardCustomFieldDateDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldDateInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldDateValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldDropdownAllowOtherValueEnum
 */
export declare const BoardCustomFieldDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDropdownAllowOtherValueEnum = typeof BoardCustomFieldDropdownAllowOtherValueEnum[keyof typeof BoardCustomFieldDropdownAllowOtherValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDropdownDisplayWidthEnum
 */
export declare const BoardCustomFieldDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldDropdownDisplayWidthEnum = typeof BoardCustomFieldDropdownDisplayWidthEnum[keyof typeof BoardCustomFieldDropdownDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldDropdownInheritDefaultValuesEnum
 */
export declare const BoardCustomFieldDropdownInheritDefaultValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldDropdownInheritDefaultValuesEnum = typeof BoardCustomFieldDropdownInheritDefaultValuesEnum[keyof typeof BoardCustomFieldDropdownInheritDefaultValuesEnum];
/**
* Board custom field data - dropdown
*/
export declare class BoardCustomFieldDropdown {
    'allow_other_value'?: BoardCustomFieldDropdownAllowOtherValueEnum;
    'display_width'?: BoardCustomFieldDropdownDisplayWidthEnum;
    'inherit_default_values'?: BoardCustomFieldDropdownInheritDefaultValuesEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board custom field data - file
*/
export declare class BoardCustomFieldFile {
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldFile>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldLinkDisplayWidthEnum
 */
export declare const BoardCustomFieldLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldLinkDisplayWidthEnum = typeof BoardCustomFieldLinkDisplayWidthEnum[keyof typeof BoardCustomFieldLinkDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldLinkInheritDefaultValueEnum
 */
export declare const BoardCustomFieldLinkInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldLinkInheritDefaultValueEnum = typeof BoardCustomFieldLinkInheritDefaultValueEnum[keyof typeof BoardCustomFieldLinkInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldLinkValueIsRequiredEnum
 */
export declare const BoardCustomFieldLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldLinkValueIsRequiredEnum = typeof BoardCustomFieldLinkValueIsRequiredEnum[keyof typeof BoardCustomFieldLinkValueIsRequiredEnum];
/**
* Board custom field data - link
*/
export declare class BoardCustomFieldLink {
    'default_value'?: string;
    'display_width'?: BoardCustomFieldLinkDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldLinkInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldMultiLineTextInheritDefaultValueEnum
 */
export declare const BoardCustomFieldMultiLineTextInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldMultiLineTextInheritDefaultValueEnum = typeof BoardCustomFieldMultiLineTextInheritDefaultValueEnum[keyof typeof BoardCustomFieldMultiLineTextInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldMultiLineTextValueIsRequiredEnum
 */
export declare const BoardCustomFieldMultiLineTextValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldMultiLineTextValueIsRequiredEnum = typeof BoardCustomFieldMultiLineTextValueIsRequiredEnum[keyof typeof BoardCustomFieldMultiLineTextValueIsRequiredEnum];
/**
* Board custom field data - multi-line text
*/
export declare class BoardCustomFieldMultiLineText {
    'default_value'?: string;
    'inherit_default_value'?: BoardCustomFieldMultiLineTextInheritDefaultValueEnum;
    'value_is_required'?: BoardCustomFieldMultiLineTextValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldMultiLineText>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldNumberDisplayWidthEnum
 */
export declare const BoardCustomFieldNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldNumberDisplayWidthEnum = typeof BoardCustomFieldNumberDisplayWidthEnum[keyof typeof BoardCustomFieldNumberDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldNumberInheritDefaultValueEnum
 */
export declare const BoardCustomFieldNumberInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldNumberInheritDefaultValueEnum = typeof BoardCustomFieldNumberInheritDefaultValueEnum[keyof typeof BoardCustomFieldNumberInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldNumberUniqueValuesEnum
 */
export declare const BoardCustomFieldNumberUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldNumberUniqueValuesEnum = typeof BoardCustomFieldNumberUniqueValuesEnum[keyof typeof BoardCustomFieldNumberUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldNumberValueIsRequiredEnum
 */
export declare const BoardCustomFieldNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldNumberValueIsRequiredEnum = typeof BoardCustomFieldNumberValueIsRequiredEnum[keyof typeof BoardCustomFieldNumberValueIsRequiredEnum];
/**
* Board custom field data - number
*/
export declare class BoardCustomFieldNumber {
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: BoardCustomFieldNumberDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldNumberInheritDefaultValueEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldNumberUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldSingleLineTextDisplayWidthEnum
 */
export declare const BoardCustomFieldSingleLineTextDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardCustomFieldSingleLineTextDisplayWidthEnum = typeof BoardCustomFieldSingleLineTextDisplayWidthEnum[keyof typeof BoardCustomFieldSingleLineTextDisplayWidthEnum];
/**
 *
 * @export
 * @type BoardCustomFieldSingleLineTextInheritDefaultValueEnum
 */
export declare const BoardCustomFieldSingleLineTextInheritDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldSingleLineTextInheritDefaultValueEnum = typeof BoardCustomFieldSingleLineTextInheritDefaultValueEnum[keyof typeof BoardCustomFieldSingleLineTextInheritDefaultValueEnum];
/**
 *
 * @export
 * @type BoardCustomFieldSingleLineTextUniqueValuesEnum
 */
export declare const BoardCustomFieldSingleLineTextUniqueValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldSingleLineTextUniqueValuesEnum = typeof BoardCustomFieldSingleLineTextUniqueValuesEnum[keyof typeof BoardCustomFieldSingleLineTextUniqueValuesEnum];
/**
 *
 * @export
 * @type BoardCustomFieldSingleLineTextValueIsRequiredEnum
 */
export declare const BoardCustomFieldSingleLineTextValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldSingleLineTextValueIsRequiredEnum = typeof BoardCustomFieldSingleLineTextValueIsRequiredEnum[keyof typeof BoardCustomFieldSingleLineTextValueIsRequiredEnum];
/**
* Board custom field data - single-line text
*/
export declare class BoardCustomFieldSingleLineText {
    'default_value'?: string;
    'display_width'?: BoardCustomFieldSingleLineTextDisplayWidthEnum;
    'inherit_default_value'?: BoardCustomFieldSingleLineTextInheritDefaultValueEnum;
    'prefix'?: string;
    'suffix'?: string;
    'unique_values'?: BoardCustomFieldSingleLineTextUniqueValuesEnum;
    'value_is_required'?: BoardCustomFieldSingleLineTextValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldSingleLineText>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type BoardCustomFieldVoteCommentIsRequiredEnum
 */
export declare const BoardCustomFieldVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardCustomFieldVoteCommentIsRequiredEnum = typeof BoardCustomFieldVoteCommentIsRequiredEnum[keyof typeof BoardCustomFieldVoteCommentIsRequiredEnum];
/**
* Board custom field data - vote
*/
export declare class BoardCustomFieldVote {
    'comment_is_required'?: BoardCustomFieldVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardCustomFieldVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether exceeding the WIP limits on the board is allowed. If set to 0, the limits can always be exceeded. If set to 1, the limits can be exceeded only with an explanation. If set to 2, the limits cannot be exceeded.
 * @export
 * @type BoardSettingsAllowExceedingEnum
 */
export declare const BoardSettingsAllowExceedingEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardSettingsAllowExceedingEnum = typeof BoardSettingsAllowExceedingEnum[keyof typeof BoardSettingsAllowExceedingEnum];
/**
 * Controls whether repeating custom card ids are allowed on the board. When the value is 0, the custom ids of the cards have to be unique on the board. When the value is 1 repeating custom card ids are allowed.
 * @export
 * @type BoardSettingsAllowRepeatingCustomCardIdsEnum
 */
export declare const BoardSettingsAllowRepeatingCustomCardIdsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardSettingsAllowRepeatingCustomCardIdsEnum = typeof BoardSettingsAllowRepeatingCustomCardIdsEnum[keyof typeof BoardSettingsAllowRepeatingCustomCardIdsEnum];
/**
 * Controls number of days before automatically moving all cards from Ready to Archive to Permanent Archive.
 * @export
 * @type BoardSettingsAutoarchiveCardsAfterEnum
 */
export declare const BoardSettingsAutoarchiveCardsAfterEnum: {
    readonly NUMBER_7: 7;
    readonly NUMBER_14: 14;
    readonly NUMBER_30: 30;
};
export declare type BoardSettingsAutoarchiveCardsAfterEnum = typeof BoardSettingsAutoarchiveCardsAfterEnum[keyof typeof BoardSettingsAutoarchiveCardsAfterEnum];
/**
 * Controls whether providing a discard reason is required when discarding a card.
 * @export
 * @type BoardSettingsIsDiscardReasonRequiredEnum
 */
export declare const BoardSettingsIsDiscardReasonRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardSettingsIsDiscardReasonRequiredEnum = typeof BoardSettingsIsDiscardReasonRequiredEnum[keyof typeof BoardSettingsIsDiscardReasonRequiredEnum];
/**
 * Controls the measurement unit for work limits on the board. When limit type is 0, the board limits are calculated based on cards count. When limit type is 1, the board limits are calculated based on the size of the cards, cards without set size are counted as 1.
 * @export
 * @type BoardSettingsLimitTypeEnum
 */
export declare const BoardSettingsLimitTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type BoardSettingsLimitTypeEnum = typeof BoardSettingsLimitTypeEnum[keyof typeof BoardSettingsLimitTypeEnum];
/**
 * Controls how the card sizes are entered and displayed. If set to 0, the card size is an input field, which allows any numeric value. If set to 1, the card size is a dropdown list with T-shirt sizes like S, M, L, XL, etc. If set to 2, the card size is a dropdown list with the Fibonacci numbers.
 * @export
 * @type BoardSettingsSizeTypeEnum
 */
export declare const BoardSettingsSizeTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type BoardSettingsSizeTypeEnum = typeof BoardSettingsSizeTypeEnum[keyof typeof BoardSettingsSizeTypeEnum];
/**
* Board settings
*/
export declare class BoardSettings {
    /**
    * Controls whether exceeding the WIP limits on the board is allowed. If set to 0, the limits can always be exceeded. If set to 1, the limits can be exceeded only with an explanation. If set to 2, the limits cannot be exceeded.
    */
    'allow_exceeding'?: BoardSettingsAllowExceedingEnum;
    /**
    * Controls whether repeating custom card ids are allowed on the board. When the value is 0, the custom ids of the cards have to be unique on the board. When the value is 1 repeating custom card ids are allowed.
    */
    'allow_repeating_custom_card_ids'?: BoardSettingsAllowRepeatingCustomCardIdsEnum;
    /**
    * Controls number of days before automatically moving all cards from Ready to Archive to Permanent Archive.
    */
    'autoarchive_cards_after'?: BoardSettingsAutoarchiveCardsAfterEnum;
    /**
    * Controls whether providing a discard reason is required when discarding a card.
    */
    'is_discard_reason_required'?: BoardSettingsIsDiscardReasonRequiredEnum;
    /**
    * Controls the measurement unit for work limits on the board. When limit type is 0, the board limits are calculated based on cards count. When limit type is 1, the board limits are calculated based on the size of the cards, cards without set size are counted as 1.
    */
    'limit_type'?: BoardSettingsLimitTypeEnum;
    /**
    * Controls how the card sizes are entered and displayed. If set to 0, the card size is an input field, which allows any numeric value. If set to 1, the card size is a dropdown list with T-shirt sizes like S, M, L, XL, etc. If set to 2, the card size is a dropdown list with the Fibonacci numbers.
    */
    'size_type'?: BoardSettingsSizeTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardSettings>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board sticker data
*/
export declare class BoardSticker {
    'limit_per_board'?: number;
    'limit_per_card'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BoardSticker>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded for each business rules execution
*/
export declare class BusinessRulesExecutionHistoryEvent {
    'business_rule_id'?: number;
    'business_rule_name'?: string;
    'executed_at'?: Date;
    'executed_on_card_id'?: number;
    'id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<BusinessRulesExecutionHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card data
*/
export declare class Card {
    'annotations'?: Array<Annotation>;
    'attachments'?: Array<CardAttachment>;
    'board_id'?: number;
    'card_id'?: number;
    'child_card_stats'?: CardChildCardStats;
    'co_owner_ids'?: Array<number>;
    'color'?: string;
    'column_id'?: number;
    'created_at'?: Date;
    'custom_id'?: string;
    'deadline'?: Date;
    'description'?: string;
    'finished_subtask_count'?: number;
    'in_current_position_since'?: Date;
    'is_blocked'?: number;
    'lane_id'?: number;
    'last_modified'?: Date;
    'linked_cards'?: Array<CardLinkedCards>;
    'outcomes'?: Array<CardOutcomeWithId>;
    'owner_user_id'?: number;
    'position'?: number;
    'priority'?: number;
    'reporter'?: CardReporter;
    'revision'?: number;
    'section'?: number;
    'size'?: number;
    'stickers'?: Array<CardSticker>;
    'subtasks'?: Array<CardSubtaskWithId>;
    'tag_ids'?: Array<number>;
    'title'?: string;
    'type_id'?: number;
    'unfinished_subtask_count'?: number;
    'watchers_ids'?: Array<number>;
    'workflow_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Card>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card attachment data
*/
export declare class CardAttachment {
    'file_name'?: string;
    'id'?: number;
    'link'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachment>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card attachment data.
*/
export declare class CardAttachmentCreateRequest {
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card attachment data.
*/
export declare class CardAttachmentData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card attachment data.
*/
export declare class CardAttachmentUpdateRequest {
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardAttachmentWithIdUpdateRequest {
    'id': number;
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardAttachmentWithPosition {
    'file_name'?: string;
    'id'?: number;
    'link'?: string;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentWithPosition>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card attachment with included position value.
*/
export declare class CardAttachmentWithPositionAllOf {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardAttachmentWithPositionAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardBlockReasonTypeEnum
 */
export declare const CardBlockReasonTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardBlockReasonTypeEnum = typeof CardBlockReasonTypeEnum[keyof typeof CardBlockReasonTypeEnum];
/**
* Card block reason data
*/
export declare class CardBlockReason {
    'cards'?: Array<InlineResponse20012Data>;
    'comment'?: string;
    'date'?: Date;
    'reason'?: BlockReason;
    'type'?: CardBlockReasonTypeEnum;
    'users'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardBlockReason>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card block reason data.
*/
export declare class CardBlockReasonSetRequest {
    /**
    * A list of card ids.
    */
    'cards'?: Array<number>;
    /**
    * The comment of the block reason.
    */
    'comment'?: string;
    /**
    * Date.
    */
    'date'?: Date;
    /**
    * The reason id of the block reason.
    */
    'reason_id'?: number;
    /**
    * A list of user ids.
    */
    'users'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardBlockReasonSetRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardChildCardStats {
    'child_card_size_sum'?: number;
    'finished_bottom_child_card_size_sum'?: number;
    'has_unfinished_child_cards'?: boolean;
    'last_unfinished_child_card_deadline'?: Date;
    'unfinished_bottom_child_card_size_sum'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardChildCardStats>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card exit criterion data.
*/
export declare class CardColumnChecklistItemAddOrUpdateRequest {
    /**
    * The comment of the exit criterion.
    */
    'comment'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardColumnChecklistItemAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardColumnChecklistItemWithIdAddOrUpdateRequest {
    'item_id': number;
    /**
    * The comment of the exit criterion.
    */
    'comment'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardColumnChecklistItemWithIdAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardComment
 */
export declare type CardComment = CardCommentDataCommon;
export declare const CardComment: {
    (value?: any): CardCommentDataCommon;
    serialize(value: any): any;
    deserialize(value: any): any;
};
/**
* Card comment attachment data
*/
export declare class CardCommentAttachment {
    'id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentAttachment>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCommentAttachmentWithId {
    'id'?: number;
    'file_name'?: string;
    'link'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentAttachmentWithId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card comment author data
*/
export declare class CardCommentAuthor {
    'author'?: CardCommentAuthorAuthor;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentAuthor>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardCommentAuthorAuthorTypeEnum
 */
export declare const CardCommentAuthorAuthorTypeEnum: {
    readonly Internal: "internal";
    readonly External: "external";
};
export declare type CardCommentAuthorAuthorTypeEnum = typeof CardCommentAuthorAuthorTypeEnum[keyof typeof CardCommentAuthorAuthorTypeEnum];
export declare class CardCommentAuthorAuthor {
    'type'?: CardCommentAuthorAuthorTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentAuthorAuthor>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardCommentDataCommonTypeEnum
 */
export declare const CardCommentDataCommonTypeEnum: {
    readonly Plain: "plain";
    readonly SentAsEmail: "sent as email";
    readonly ReceivedAsEmail: "received as email";
};
export declare type CardCommentDataCommonTypeEnum = typeof CardCommentDataCommonTypeEnum[keyof typeof CardCommentDataCommonTypeEnum];
/**
* Card comment data
*/
export declare class CardCommentDataCommon {
    'attachments'?: CardCommentAttachmentWithId;
    'comment_id'?: number;
    'created_at'?: Date;
    'last_modified'?: Date;
    'text'?: string;
    'type'?: CardCommentDataCommonTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentDataCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card comment recipients data
*/
export declare class CardCommentRecipients {
    'recipients'?: CardCommentRecipientsRecipients;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentRecipients>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCommentRecipientsRecipients {
    'bcc'?: Array<CardCommentAuthorAuthor>;
    'cc'?: Array<CardCommentAuthorAuthor>;
    'to'?: Array<CardCommentAuthorAuthor>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentRecipientsRecipients>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card comment sender data
*/
export declare class CardCommentSender {
    'sender'?: CardCommentAuthorAuthor;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentSender>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card comment recipients data
*/
export declare class CardCommentSenderAndRecipients {
    'sender'?: CardCommentAuthorAuthor;
    'recipients'?: CardCommentRecipientsRecipients;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCommentSenderAndRecipients>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the card will be archived.
 * @export
 * @type CardCreateRequestIsArchivedEnum
 */
export declare const CardCreateRequestIsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCreateRequestIsArchivedEnum = typeof CardCreateRequestIsArchivedEnum[keyof typeof CardCreateRequestIsArchivedEnum];
/**
 * When set to 1 the card will be discarded.
 * @export
 * @type CardCreateRequestIsDiscardedEnum
 */
export declare const CardCreateRequestIsDiscardedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCreateRequestIsDiscardedEnum = typeof CardCreateRequestIsDiscardedEnum[keyof typeof CardCreateRequestIsDiscardedEnum];
/**
 * When set to 1 the current user will become a card's watcher.
 * @export
 * @type CardCreateRequestWatchEnum
 */
export declare const CardCreateRequestWatchEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCreateRequestWatchEnum = typeof CardCreateRequestWatchEnum[keyof typeof CardCreateRequestWatchEnum];
/**
* Card data.
*/
export declare class CardCreateRequest {
    /**
    * The actual end time of the new card.
    */
    'actual_end_time'?: Date;
    /**
    * The actual start time of the new card.
    */
    'actual_start_time'?: Date;
    /**
    * A list of annotations which will be added to the new card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * The archived date and time of the new card. Different from discarded date and time;
    */
    'archived_at'?: Date;
    /**
    * A list of attachments which will be added to the new card.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    'block_reason'?: CardBlockReasonSetRequest;
    /**
    * A list of card properties to copy.
    */
    'card_properties_to_copy'?: Array<CopyCardPropertiesRequest>;
    /**
    * A list of co-owner ids which will be added to the new card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * A list of co-owner ids which will be removed from the new card.
    */
    'co_owner_ids_to_remove'?: Array<number>;
    /**
    * The color of the new card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of exit criteria.
    */
    'column_checklist_items_to_check_or_update'?: Array<CardColumnChecklistItemWithIdAddOrUpdateRequest>;
    /**
    * The column id of the new card.
    */
    'column_id'?: number;
    /**
    * The created date and time of the new card.
    */
    'created_at'?: Date;
    /**
    * A list of custom field ids which will be removed from the new card.
    */
    'custom_field_ids_to_remove'?: Array<number>;
    /**
    * A list of custom fields which will be add or update for the new card.
    */
    'custom_fields_to_add_or_update'?: Array<CardCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * A list of custom fields to copy.
    */
    'custom_fields_to_copy'?: Array<CopyCustomFieldsRequest>;
    /**
    * The custom id of the new card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the new card.
    */
    'deadline'?: Date;
    /**
    * The description of the new card.
    */
    'description'?: string;
    /**
    * The discard comment of the new card.
    */
    'discard_comment'?: string;
    /**
    * The discarded reason id of the new card.
    */
    'discard_reason_id'?: number;
    /**
    * The discarded date and time of the new card. Different from archived date and time;
    */
    'discarded_at'?: Date;
    /**
    * When set to 1 the card will be archived.
    */
    'is_archived'?: CardCreateRequestIsArchivedEnum;
    /**
    * When set to 1 the card will be discarded.
    */
    'is_discarded'?: CardCreateRequestIsDiscardedEnum;
    /**
    * The lane id of the new card.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_cards_to_add_or_update'?: Array<LinkAddOrUpdateRequest>;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_cards_to_add'?: Array<LinkToNewCardToAddRequest>;
    /**
    * The user id of assignee of the new card.
    */
    'owner_user_id'?: number;
    /**
    * The planened end date of the new card.
    */
    'planned_end_date'?: Date;
    /**
    * The planened start date of the new card.
    */
    'planned_start_date'?: Date;
    /**
    * The position of the new card.
    */
    'position'?: number;
    /**
    * The priority of the new card.
    */
    'priority'?: number;
    /**
    * A reference that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size of the new card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the new card.
    */
    'stickers_to_add'?: Array<CardStickerAddRequest>;
    /**
    * A list of subtasks which will be added to the new card.
    */
    'subtasks_to_add'?: Array<SubtaskCreateRequest>;
    /**
    * A list of tag ids which will be added to the new card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * A list of tag ids which will be removed from the new card.
    */
    'tag_ids_to_remove'?: Array<number>;
    /**
    * The template id through which you can make a new card.
    */
    'template_id'?: number;
    /**
    * The title of the new card.
    */
    'title'?: string;
    /**
    * The track of the new card.
    */
    'track'?: number;
    /**
    * The type id of the new card.
    */
    'type_id'?: number;
    /**
    * The version id of the new card.
    */
    'version_id'?: number;
    /**
    * When set to 1 the current user will become a card's watcher.
    */
    'watch'?: CardCreateRequestWatchEnum;
    /**
    * A list of watcher ids which will be added to the new card.
    */
    'watcher_ids_to_add'?: Array<number>;
    /**
    * A list of watcher ids which will be removed from the new card.
    */
    'watcher_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Your vote.
 * @export
 * @type CardCustomFieldAddOrUpdateRequestVoteEnum
 */
export declare const CardCustomFieldAddOrUpdateRequestVoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCustomFieldAddOrUpdateRequestVoteEnum = typeof CardCustomFieldAddOrUpdateRequestVoteEnum[keyof typeof CardCustomFieldAddOrUpdateRequestVoteEnum];
/**
* Cards custom field data.
*/
export declare class CardCustomFieldAddOrUpdateRequest {
    /**
    * A comment about your vote.
    */
    'comment'?: string;
    /**
    * The contributor ids which will be added to card custom field.
    */
    'contributor_ids_to_add'?: Array<number>;
    /**
    * The contributor ids which will be removed from card custom field.
    */
    'contributor_ids_to_remove'?: Array<number>;
    /**
    * A list of file ids to remove.
    */
    'file_ids_to_remove'?: Array<number>;
    /**
    * A list of files to add.
    */
    'files_to_add'?: Array<CardCustomFieldFileCreateRequest>;
    /**
    * A list of files to update.
    */
    'files_to_update'?: Array<CardCustomFieldFileWithIdUpdateRequest>;
    /**
    * The other value of custom field.
    */
    'other_value'?: string;
    /**
    * A list of the selected card ids for the custom field to remove.
    */
    'selected_card_ids_to_remove'?: Array<number>;
    /**
    * A list of the selected card ids for the custom field to add or update.
    */
    'selected_cards_to_add_or_update'?: Array<CardCustomFieldSelectedCardAddOrUpdateRequest>;
    /**
    * A list of selected values to remove.
    */
    'selected_value_ids_to_remove'?: Array<number>;
    /**
    * A list of selected values to add or update.
    */
    'selected_values_to_add_or_update'?: Array<CardCustomFieldSelectedValueAddOrUpdateRequest>;
    /**
    * The value of custom field.
    */
    'value'?: string;
    /**
    * Your vote.
    */
    'vote'?: CardCustomFieldAddOrUpdateRequestVoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data.
*/
export declare class CardCustomFieldData {
    'field_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - card picker
*/
export declare class CardCustomFieldDataCardPicker {
    'selected_cards'?: Array<CardCustomFieldDataCardPickerSelectedCards>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataCardPicker>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataCardPickerSelectedCards {
    'position'?: number;
    'selected_card_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataCardPickerSelectedCards>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataCardPickerWithFieldId {
    'field_id'?: number;
    'selected_cards'?: Array<CardCustomFieldDataCardPickerSelectedCards>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataCardPickerWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data
*/
export declare class CardCustomFieldDataCommon {
    'field_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - contributor
*/
export declare class CardCustomFieldDataContributor {
    'contributors'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataContributor>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataContributorWithFieldId {
    'field_id'?: number;
    'contributors'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataContributorWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - date
*/
export declare class CardCustomFieldDataDate {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataDate>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataDateWithFieldId {
    'field_id'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataDateWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - dropdown
*/
export declare class CardCustomFieldDataDropdown {
    'values'?: Array<CardCustomFieldDataDropdownValues>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataDropdown>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataDropdownValues {
    'position'?: number;
    'value_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataDropdownValues>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataDropdownWithFieldId {
    'field_id'?: number;
    'values'?: Array<CardCustomFieldDataDropdownValues>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataDropdownWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - file
*/
export declare class CardCustomFieldDataFile {
    'files'?: Array<CardCustomFieldDataFileFiles>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataFile>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataFileFiles {
    'file_name'?: string;
    'id'?: number;
    'link'?: string;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataFileFiles>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataFileWithFieldId {
    'field_id'?: number;
    'files'?: Array<CardCustomFieldDataFileFiles>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataFileWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - link
*/
export declare class CardCustomFieldDataLink {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataLink>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataLinkWithFieldId {
    'field_id'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataLinkWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - multi-line text
*/
export declare class CardCustomFieldDataMultiLine {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataMultiLine>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataMultiLineWithFieldId {
    'field_id'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataMultiLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - number
*/
export declare class CardCustomFieldDataNumber {
    'display_value'?: string;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataNumber>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataNumberWithFieldId {
    'field_id'?: number;
    'display_value'?: string;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataNumberWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - single-line text
*/
export declare class CardCustomFieldDataSingleLine {
    'display_value'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataSingleLine>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataSingleLineWithFieldId {
    'field_id'?: number;
    'display_value'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataSingleLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field data - vote
*/
export declare class CardCustomFieldDataVote {
    'votes'?: Array<CardCustomFieldDataVoteVotes>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardCustomFieldDataVoteVotesVoteEnum
 */
export declare const CardCustomFieldDataVoteVotesVoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCustomFieldDataVoteVotesVoteEnum = typeof CardCustomFieldDataVoteVotesVoteEnum[keyof typeof CardCustomFieldDataVoteVotesVoteEnum];
export declare class CardCustomFieldDataVoteVotes {
    'comment'?: string;
    'user_id'?: number;
    'vote'?: CardCustomFieldDataVoteVotesVoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataVoteVotes>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldDataVoteWithFieldId {
    'field_id'?: number;
    'votes'?: Array<CardCustomFieldDataVoteVotes>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldDataVoteWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field file data
*/
export declare class CardCustomFieldFile {
    'file_name'?: string;
    'link'?: string;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field file data.
*/
export declare class CardCustomFieldFileCreateRequest {
    /**
    * The name of the file.
    */
    'file_name': string;
    /**
    * The link to the file.
    */
    'link': string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldFileCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field file data.
*/
export declare class CardCustomFieldFileData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldFileData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field file data.
*/
export declare class CardCustomFieldFileUpdateRequest {
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldFileUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardCustomFieldFileWithIdUpdateRequest {
    'id': number;
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldFileWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected card data
*/
export declare class CardCustomFieldSelectedCard {
    'position'?: number;
    'selected_card_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldSelectedCard>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected card data.
*/
export declare class CardCustomFieldSelectedCardAddOrUpdateRequest {
    /**
    * The position of the card within the list of selected cards.
    */
    'position'?: number;
    /**
    * The id of the selected card.
    */
    'selected_card_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldSelectedCardAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected value data
*/
export declare class CardCustomFieldSelectedValue {
    'position'?: number;
    'value_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldSelectedValue>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected value data.
*/
export declare class CardCustomFieldSelectedValueAddOrUpdateRequest {
    /**
    * The position of the value within the list of selected values.
    */
    'position'?: number;
    /**
    * The id of а selected value of the custom field.
    */
    'value_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldSelectedValueAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Your vote.
 * @export
 * @type CardCustomFieldWithIdAddOrUpdateRequestVoteEnum
 */
export declare const CardCustomFieldWithIdAddOrUpdateRequestVoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardCustomFieldWithIdAddOrUpdateRequestVoteEnum = typeof CardCustomFieldWithIdAddOrUpdateRequestVoteEnum[keyof typeof CardCustomFieldWithIdAddOrUpdateRequestVoteEnum];
export declare class CardCustomFieldWithIdAddOrUpdateRequest {
    'field_id': number;
    /**
    * A comment about your vote.
    */
    'comment'?: string;
    /**
    * The contributor ids which will be added to card custom field.
    */
    'contributor_ids_to_add'?: Array<number>;
    /**
    * The contributor ids which will be removed from card custom field.
    */
    'contributor_ids_to_remove'?: Array<number>;
    /**
    * A list of file ids to remove.
    */
    'file_ids_to_remove'?: Array<number>;
    /**
    * A list of files to add.
    */
    'files_to_add'?: Array<CardCustomFieldFileCreateRequest>;
    /**
    * A list of files to update.
    */
    'files_to_update'?: Array<CardCustomFieldFileWithIdUpdateRequest>;
    /**
    * The other value of custom field.
    */
    'other_value'?: string;
    /**
    * A list of the selected card ids for the custom field to remove.
    */
    'selected_card_ids_to_remove'?: Array<number>;
    /**
    * A list of the selected card ids for the custom field to add or update.
    */
    'selected_cards_to_add_or_update'?: Array<CardCustomFieldSelectedCardAddOrUpdateRequest>;
    /**
    * A list of selected values to remove.
    */
    'selected_value_ids_to_remove'?: Array<number>;
    /**
    * A list of selected values to add or update.
    */
    'selected_values_to_add_or_update'?: Array<CardCustomFieldSelectedValueAddOrUpdateRequest>;
    /**
    * The value of custom field.
    */
    'value'?: string;
    /**
    * Your vote.
    */
    'vote'?: CardCustomFieldWithIdAddOrUpdateRequestVoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardCustomFieldWithIdAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card data.
*/
export declare class CardData {
    'card_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card exit criterion data.
*/
export declare class CardExitCriterionData {
    'item_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardExitCriterionData>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardLinkedCardsLinkTypeEnum
 */
export declare const CardLinkedCardsLinkTypeEnum: {
    readonly Child: "child";
    readonly Parent: "parent";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type CardLinkedCardsLinkTypeEnum = typeof CardLinkedCardsLinkTypeEnum[keyof typeof CardLinkedCardsLinkTypeEnum];
export declare class CardLinkedCards {
    'card_id'?: number;
    'link_type'?: CardLinkedCardsLinkTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardLinkedCards>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome data
*/
export declare class CardOutcome {
    'outcome_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcome>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome checkpoint data
*/
export declare class CardOutcomeCheckpoint {
    'id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpoint>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome checkpoint data.
*/
export declare class CardOutcomeCheckpointCreateRequest {
    /**
    * The checkpoint name.
    */
    'name': string;
    /**
    * Time
    */
    'time': Date;
    /**
    * Value
    */
    'value': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpointCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome checkpoint data.
*/
export declare class CardOutcomeCheckpointData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpointData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome checkpoint data.
*/
export declare class CardOutcomeCheckpointUpdateRequest {
    /**
    * The checkpoint name.
    */
    'name'?: string;
    'time'?: Date;
    /**
    * Value
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpointUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardOutcomeCheckpointWithId {
    'id'?: number;
    'name'?: string;
    'time'?: Date;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpointWithId>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardOutcomeCheckpointWithIdUpdateRequest {
    'id': number;
    /**
    * The checkpoint name.
    */
    'name'?: string;
    'time'?: Date;
    /**
    * Value
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCheckpointWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Operator
 * @export
 * @type CardOutcomeCreateRequestOperatorEnum
 */
export declare const CardOutcomeCreateRequestOperatorEnum: {
    readonly Less: "or_less";
    readonly More: "or_more";
};
export declare type CardOutcomeCreateRequestOperatorEnum = typeof CardOutcomeCreateRequestOperatorEnum[keyof typeof CardOutcomeCreateRequestOperatorEnum];
/**
* Card outcome data.
*/
export declare class CardOutcomeCreateRequest {
    /**
    * A list of checkpoints to add.
    */
    'checkpoints_to_add'?: Array<CardOutcomeCheckpointCreateRequest>;
    /**
    * An outcome comment.
    */
    'comment'?: string;
    /**
    * Field id
    */
    'field_id'?: number;
    /**
    * Operator
    */
    'operator': CardOutcomeCreateRequestOperatorEnum;
    /**
    * Starting value
    */
    'starting_value'?: number;
    /**
    * Target value
    */
    'target_value'?: number;
    /**
    * Weight
    */
    'weight'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome data.
*/
export declare class CardOutcomeData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeData>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on card outcome resource
*/
export declare class CardOutcomeHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'outcome_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardOutcomeUpdateRequestOperatorEnum
 */
export declare const CardOutcomeUpdateRequestOperatorEnum: {
    readonly Less: "or_less";
    readonly More: "or_more";
};
export declare type CardOutcomeUpdateRequestOperatorEnum = typeof CardOutcomeUpdateRequestOperatorEnum[keyof typeof CardOutcomeUpdateRequestOperatorEnum];
/**
* Card outcome data.
*/
export declare class CardOutcomeUpdateRequest {
    /**
    * A list of checkpoints to remove.
    */
    'checkpoint_ids_to_remove'?: Array<number>;
    /**
    * A list of checkpoints to add.
    */
    'checkpoints_to_add'?: Array<CardOutcomeCheckpointCreateRequest>;
    /**
    * A list of checkpoints to update.
    */
    'checkpoints_to_update'?: Array<CardOutcomeCheckpointWithIdUpdateRequest>;
    'comment'?: string;
    'operator'?: CardOutcomeUpdateRequestOperatorEnum;
    'starting_value'?: number;
    'target_value'?: number;
    'weight'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome value data
*/
export declare class CardOutcomeValue {
    'id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValue>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome value data
*/
export declare class CardOutcomeValue1 {
    'outcome_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValue1>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome value data.
*/
export declare class CardOutcomeValueCreateRequest {
    /**
    * Time
    */
    'time'?: Date;
    /**
    * Value
    */
    'value': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome value data.
*/
export declare class CardOutcomeValueData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card outcome value data.
*/
export declare class CardOutcomeValueUpdateRequest {
    'time'?: Date;
    /**
    * Value
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardOutcomeValueWithId {
    'id'?: number;
    'time'?: Date;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueWithId>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardOutcomeValueWithIdAndOutcomeId {
    'outcome_id'?: number;
    'id'?: number;
    'time'?: Date;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueWithIdAndOutcomeId>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardOutcomeValueWithIdUpdateRequest {
    'id': number;
    'time'?: Date;
    /**
    * Value
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeValueWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardOutcomeWithIdOperatorEnum
 */
export declare const CardOutcomeWithIdOperatorEnum: {
    readonly Less: "or_less";
    readonly More: "or_more";
};
export declare type CardOutcomeWithIdOperatorEnum = typeof CardOutcomeWithIdOperatorEnum[keyof typeof CardOutcomeWithIdOperatorEnum];
export declare class CardOutcomeWithId {
    'outcome_id'?: number;
    'checkpoints'?: Array<CardOutcomeCheckpointWithId>;
    'comment'?: string;
    'created_at'?: Date;
    'field_id'?: number;
    'operator'?: CardOutcomeWithIdOperatorEnum;
    'starting_value'?: number;
    'target_value'?: number;
    'weight'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcomeWithId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardOutcometWithIdUpdateRequestOperatorEnum
 */
export declare const CardOutcometWithIdUpdateRequestOperatorEnum: {
    readonly Less: "or_less";
    readonly More: "or_more";
};
export declare type CardOutcometWithIdUpdateRequestOperatorEnum = typeof CardOutcometWithIdUpdateRequestOperatorEnum[keyof typeof CardOutcometWithIdUpdateRequestOperatorEnum];
export declare class CardOutcometWithIdUpdateRequest {
    'id': number;
    /**
    * A list of checkpoints to remove.
    */
    'checkpoint_ids_to_remove'?: Array<number>;
    /**
    * A list of checkpoints to add.
    */
    'checkpoints_to_add'?: Array<CardOutcomeCheckpointCreateRequest>;
    /**
    * A list of checkpoints to update.
    */
    'checkpoints_to_update'?: Array<CardOutcomeCheckpointWithIdUpdateRequest>;
    'comment'?: string;
    'operator'?: CardOutcometWithIdUpdateRequestOperatorEnum;
    'starting_value'?: number;
    'target_value'?: number;
    'weight'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardOutcometWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardReporter {
    'type'?: string;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardReporter>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card data
*/
export declare class CardRevision {
    'annotations'?: Array<Annotation>;
    'attachments'?: Array<CardAttachment>;
    'board_id'?: number;
    'card_id'?: number;
    'child_card_stats'?: CardChildCardStats;
    'co_owner_ids'?: Array<number>;
    'color'?: string;
    'column_id'?: number;
    'created_at'?: Date;
    'custom_id'?: string;
    'deadline'?: Date;
    'description'?: string;
    'finished_subtask_count'?: number;
    'in_current_position_since'?: Date;
    'is_blocked'?: number;
    'lane_id'?: number;
    'linked_cards'?: Array<CardLinkedCards>;
    'outcomes'?: Array<CardOutcomeWithId>;
    'owner_user_id'?: number;
    'position'?: number;
    'priority'?: number;
    'replaced_at'?: Date;
    'reporter'?: CardReporter;
    'revision'?: number;
    'section'?: number;
    'size'?: number;
    'stickers'?: Array<CardSticker>;
    'subtasks'?: Array<CardSubtaskWithId>;
    'tag_ids'?: Array<number>;
    'title'?: string;
    'type_id'?: number;
    'unfinished_subtask_count'?: number;
    'user_id'?: number;
    'watchers_ids'?: Array<number>;
    'workflow_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardRevision>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card sticker data
*/
export declare class CardSticker {
    'card_id'?: number;
    'id'?: number;
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardSticker>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the card is already has that sticker.
 * @export
 * @type CardStickerAddRequestIfNotPresentEnum
 */
export declare const CardStickerAddRequestIfNotPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardStickerAddRequestIfNotPresentEnum = typeof CardStickerAddRequestIfNotPresentEnum[keyof typeof CardStickerAddRequestIfNotPresentEnum];
/**
* Card stricker data.
*/
export declare class CardStickerAddRequest {
    /**
    * When set to 1 the card is already has that sticker.
    */
    'if_not_present'?: CardStickerAddRequestIfNotPresentEnum;
    /**
    * The sticker id of the sticker.
    */
    'sticker_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardStickerAddRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card subtask data
*/
export declare class CardSubtask {
    'subtask_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardSubtask>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardSubtaskWithId {
    'subtask_id'?: number;
    'attachments'?: Array<CardAttachmentWithPosition>;
    'description': string;
    'finished_at'?: Date;
    'owner_user_id'?: number;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardSubtaskWithId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card tag data
*/
export declare class CardTag {
    'card_id'?: number;
    'tag_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTag>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardTemplateAvailabilityEnum
 */
export declare const CardTemplateAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CardTemplateAvailabilityEnum = typeof CardTemplateAvailabilityEnum[keyof typeof CardTemplateAvailabilityEnum];
/**
 *
 * @export
 * @type CardTemplateIsEnabledEnum
 */
export declare const CardTemplateIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTemplateIsEnabledEnum = typeof CardTemplateIsEnabledEnum[keyof typeof CardTemplateIsEnabledEnum];
/**
* Card template data
*/
export declare class CardTemplate {
    'availability'?: CardTemplateAvailabilityEnum;
    'description'?: string;
    'is_enabled'?: CardTemplateIsEnabledEnum;
    'name'?: string;
    'primary_template_card_id'?: number;
    'template_cards'?: Array<CardTemplateCard>;
    'template_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplate>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template attachment data.
*/
export declare class CardTemplateAttachmentCreateRequest {
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateAttachmentCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template attachment data.
*/
export declare class CardTemplateAttachmentData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateAttachmentData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template attachment data.
*/
export declare class CardTemplateAttachmentUpdateRequest {
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateAttachmentUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateAttachmentWithIdUpdateRequest {
    'id': number;
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    /**
    * The attachment position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateAttachmentWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card data for a card template.
*/
export declare class CardTemplateCard {
    'annotations'?: Array<Annotation>;
    'attachments'?: Array<CardAttachment>;
    'co_owner_ids'?: Array<number>;
    'color'?: string;
    'custom_id'?: string;
    'deadline'?: number;
    'description'?: string;
    'linked_cards'?: Array<CardTemplateCardLinkedCards>;
    'name'?: string;
    'owner_user_id'?: number;
    'priority'?: number;
    'size'?: number;
    'stickers'?: Array<CardTemplateCardSticker>;
    'subtasks'?: Array<CardTemplateCardSubtask>;
    'tag_ids'?: Array<number>;
    'template_card_id'?: number;
    'type_id'?: number;
    'watcher_ids'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCard>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCardCreateRequest {
    /**
    * The column id of the new card.
    */
    'column_id': number;
    /**
    * The lane id of the new card.
    */
    'lane_id': number;
    /**
    * The position of the new card.
    */
    'position'?: number;
    /**
    * A list of annotations which will be added to the new card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachments which will be added to the new card.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of co-owner ids which will be added to the new card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * The color of the new card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of custom fields which will be add or update for the new card.
    */
    'custom_fields_to_add_or_update'?: Array<CardTemplateCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the new card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the new card.
    */
    'deadline'?: number;
    /**
    * The description of the new card.
    */
    'description'?: string;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_template_cards_to_add'?: Array<CardTemplateLinkToNewTemplateCardToAddRequest>;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The priority id of the new card.
    */
    'priority'?: number;
    /**
    * A reference that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size id of the new card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the new card.
    */
    'stickers_to_add'?: Array<CardTemplateStickerAddRequest>;
    /**
    * A list of subtasks which will be added to the new card.
    */
    'subtasks_to_add'?: Array<CardTemplateSubtaskCreateRequest>;
    /**
    * A list of tag ids which will be removed from the new card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * The title of the new card.
    */
    'title'?: string;
    /**
    * The type id of the new card.
    */
    'type_id'?: number;
    /**
    * A list of watcher ids which will be added to the new card.
    */
    'watcher_ids_to_add'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card data for a card template.
*/
export declare class CardTemplateCardCreateRequestAllOf {
    /**
    * The column id of the new card.
    */
    'column_id': number;
    /**
    * The lane id of the new card.
    */
    'lane_id': number;
    /**
    * The position of the new card.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardCreateRequestAllOf>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCardInExistingTemplateCreateRequest {
    /**
    * The column id of the new card.
    */
    'column_id': number;
    /**
    * The lane id of the new card.
    */
    'lane_id': number;
    /**
    * The position of the new card.
    */
    'position'?: number;
    /**
    * A list of annotations which will be added to the new card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachments which will be added to the new card.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of co-owner ids which will be added to the new card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * The color of the new card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of custom fields which will be add or update for the new card.
    */
    'custom_fields_to_add_or_update'?: Array<CardTemplateCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the new card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the new card.
    */
    'deadline'?: number;
    /**
    * The description of the new card.
    */
    'description'?: string;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_template_cards_to_add'?: Array<CardTemplateLinkToNewTemplateCardToAddRequest>;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The priority id of the new card.
    */
    'priority'?: number;
    /**
    * A reference that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size id of the new card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the new card.
    */
    'stickers_to_add'?: Array<CardTemplateStickerAddRequest>;
    /**
    * A list of subtasks which will be added to the new card.
    */
    'subtasks_to_add'?: Array<CardTemplateSubtaskCreateRequest>;
    /**
    * A list of tag ids which will be removed from the new card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * The title of the new card.
    */
    'title'?: string;
    /**
    * The type id of the new card.
    */
    'type_id'?: number;
    /**
    * A list of watcher ids which will be added to the new card.
    */
    'watcher_ids_to_add'?: Array<number>;
    'links_to_existing_template_cards_to_add_or_update'?: Array<CardTemplateLinkAddOrUpdateRequest>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardInExistingTemplateCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardTemplateCardLinkedCardsLinkTypeEnum
 */
export declare const CardTemplateCardLinkedCardsLinkTypeEnum: {
    readonly Child: "child";
    readonly Parent: "parent";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type CardTemplateCardLinkedCardsLinkTypeEnum = typeof CardTemplateCardLinkedCardsLinkTypeEnum[keyof typeof CardTemplateCardLinkedCardsLinkTypeEnum];
export declare class CardTemplateCardLinkedCards {
    'link_type'?: CardTemplateCardLinkedCardsLinkTypeEnum;
    'position'?: number;
    'template_card_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardLinkedCards>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card sticker data for a card template.
*/
export declare class CardTemplateCardSticker {
    'id'?: number;
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardSticker>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card subtask data for a card template.
*/
export declare class CardTemplateCardSubtask {
    'attachments'?: Array<CardAttachment>;
    'description': string;
    'owner_user_id'?: number;
    'template_subtask_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardSubtask>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCardSubtaskWithPosition {
    'attachments'?: Array<CardAttachment>;
    'description': string;
    'owner_user_id'?: number;
    'template_subtask_id'?: number;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardSubtaskWithPosition>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card subtask data with included position value for a card template.
*/
export declare class CardTemplateCardSubtaskWithPositionAllOf {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardSubtaskWithPositionAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template data.
*/
export declare class CardTemplateCardUpdateRequest {
    /**
    * A list of annotations which will be added to the updated card of card template.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of annotations which will be removed from the updated card of card template.
    */
    'annotations_to_remove'?: Array<AnnotationRemoveRequest>;
    /**
    * A list of annotations which will be updated for the updated card of card template.
    */
    'annotations_to_update'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachment ids which will be removed from the updated card of card template.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the updated card of card template.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated for the updated card of card template.
    */
    'attachments_to_update'?: Array<CardTemplateAttachmentWithIdUpdateRequest>;
    /**
    * A list of co-owner ids which will be added to the updated card of card template.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * A list of co-owner ids which will be removed from the updated card of card template.
    */
    'co_owner_ids_to_remove'?: Array<number>;
    /**
    * The color of the updated card of card template. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * The column id of the updated card of card template.
    */
    'column_id'?: number;
    /**
    * A list of custom field ids which will be removed from the updated card of card template.
    */
    'custom_field_ids_to_remove'?: Array<number>;
    /**
    * A list of custom fields which will be add or update to the updated card of card template.
    */
    'custom_fields_to_add_or_update'?: Array<CardTemplateCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the updated card of card template.
    */
    'custom_id'?: string;
    /**
    * The deadline of the updated card of card template.
    */
    'deadline'?: Date;
    /**
    * The description of the updated card of card template.
    */
    'description'?: string;
    /**
    * The lane id of the updated card of card template.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_template_cards_to_add_or_update'?: Array<CardTemplateLinkAddOrUpdateRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_existing_template_cards_to_remove'?: Array<CardTemplateLinkRemoveRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_new_template_cards_to_add'?: Array<CardTemplateLinkToNewTemplateCardToAddRequest>;
    /**
    * The user id of assignee of the updated card of card template.
    */
    'owner_user_id'?: number;
    /**
    * The position of the updated card of card template.
    */
    'position'?: number;
    /**
    * The priority of the updated card of card template.
    */
    'priority'?: number;
    /**
    * The size of the updated card of card template.
    */
    'size'?: number;
    /**
    * A list of stricker ids which will be removed from the updated card of card template.
    */
    'sticker_ids_to_remove'?: Array<number>;
    /**
    * A list of strickers which will be added to the updated card of card template.
    */
    'stickers_to_add'?: Array<CardTemplateStickerAddRequest>;
    /**
    * A list of subtask ids which will be removed from the updated card of card template.
    */
    'subtask_ids_to_remove'?: Array<number>;
    /**
    * A list of subtasks which will be added to the updated card of card template.
    */
    'subtasks_to_add'?: Array<CardTemplateSubtaskCreateRequest>;
    /**
    * A list of subtasks which will be updated for the updated card of card template.
    */
    'subtasks_to_update'?: Array<CardTemplateSubtaskWithIdUpdateRequest>;
    /**
    * A list of tag ids which will be added to the updated card of card template.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * A list of tag ids which will be removed from the updated card of card template.
    */
    'tag_ids_to_remove'?: Array<number>;
    /**
    * The title of the updated card of card template.
    */
    'title'?: string;
    /**
    * The type id of the updated card of card template.
    */
    'type_id'?: number;
    /**
    * A list of watcher ids which will be added to the updated card of card template.
    */
    'watcher_ids_to_add'?: Array<number>;
    /**
    * A list of watcher ids which will be removed from the updated card of card template.
    */
    'watcher_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCardWithIdUpdateRequest {
    'template_card_id': Array<number>;
    /**
    * A list of annotations which will be added to the updated card of card template.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of annotations which will be removed from the updated card of card template.
    */
    'annotations_to_remove'?: Array<AnnotationRemoveRequest>;
    /**
    * A list of annotations which will be updated for the updated card of card template.
    */
    'annotations_to_update'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachment ids which will be removed from the updated card of card template.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the updated card of card template.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated for the updated card of card template.
    */
    'attachments_to_update'?: Array<CardTemplateAttachmentWithIdUpdateRequest>;
    /**
    * A list of co-owner ids which will be added to the updated card of card template.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * A list of co-owner ids which will be removed from the updated card of card template.
    */
    'co_owner_ids_to_remove'?: Array<number>;
    /**
    * The color of the updated card of card template. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * The column id of the updated card of card template.
    */
    'column_id'?: number;
    /**
    * A list of custom field ids which will be removed from the updated card of card template.
    */
    'custom_field_ids_to_remove'?: Array<number>;
    /**
    * A list of custom fields which will be add or update to the updated card of card template.
    */
    'custom_fields_to_add_or_update'?: Array<CardTemplateCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the updated card of card template.
    */
    'custom_id'?: string;
    /**
    * The deadline of the updated card of card template.
    */
    'deadline'?: Date;
    /**
    * The description of the updated card of card template.
    */
    'description'?: string;
    /**
    * The lane id of the updated card of card template.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_template_cards_to_add_or_update'?: Array<CardTemplateLinkAddOrUpdateRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_existing_template_cards_to_remove'?: Array<CardTemplateLinkRemoveRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_new_template_cards_to_add'?: Array<CardTemplateLinkToNewTemplateCardToAddRequest>;
    /**
    * The user id of assignee of the updated card of card template.
    */
    'owner_user_id'?: number;
    /**
    * The position of the updated card of card template.
    */
    'position'?: number;
    /**
    * The priority of the updated card of card template.
    */
    'priority'?: number;
    /**
    * The size of the updated card of card template.
    */
    'size'?: number;
    /**
    * A list of stricker ids which will be removed from the updated card of card template.
    */
    'sticker_ids_to_remove'?: Array<number>;
    /**
    * A list of strickers which will be added to the updated card of card template.
    */
    'stickers_to_add'?: Array<CardTemplateStickerAddRequest>;
    /**
    * A list of subtask ids which will be removed from the updated card of card template.
    */
    'subtask_ids_to_remove'?: Array<number>;
    /**
    * A list of subtasks which will be added to the updated card of card template.
    */
    'subtasks_to_add'?: Array<CardTemplateSubtaskCreateRequest>;
    /**
    * A list of subtasks which will be updated for the updated card of card template.
    */
    'subtasks_to_update'?: Array<CardTemplateSubtaskWithIdUpdateRequest>;
    /**
    * A list of tag ids which will be added to the updated card of card template.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * A list of tag ids which will be removed from the updated card of card template.
    */
    'tag_ids_to_remove'?: Array<number>;
    /**
    * The title of the updated card of card template.
    */
    'title'?: string;
    /**
    * The type id of the updated card of card template.
    */
    'type_id'?: number;
    /**
    * A list of watcher ids which will be added to the updated card of card template.
    */
    'watcher_ids_to_add'?: Array<number>;
    /**
    * A list of watcher ids which will be removed from the updated card of card template.
    */
    'watcher_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCardWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.
 * @export
 * @type CardTemplateCreateRequestAvailabilityEnum
 */
export declare const CardTemplateCreateRequestAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CardTemplateCreateRequestAvailabilityEnum = typeof CardTemplateCreateRequestAvailabilityEnum[keyof typeof CardTemplateCreateRequestAvailabilityEnum];
/**
 * Controls whether this card template is enabled.
 * @export
 * @type CardTemplateCreateRequestIsEnabledEnum
 */
export declare const CardTemplateCreateRequestIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTemplateCreateRequestIsEnabledEnum = typeof CardTemplateCreateRequestIsEnabledEnum[keyof typeof CardTemplateCreateRequestIsEnabledEnum];
/**
* Card template data.
*/
export declare class CardTemplateCreateRequest {
    /**
    * When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.
    */
    'availability'?: CardTemplateCreateRequestAvailabilityEnum;
    /**
    * The description of the new card template.
    */
    'description'?: string;
    /**
    * Controls whether this card template is enabled.
    */
    'is_enabled'?: CardTemplateCreateRequestIsEnabledEnum;
    /**
    * The name of the new card template.
    */
    'name': string;
    /**
    * A list of cards for the new card template.
    */
    'other_cards': Array<CardTemplateCardCreateRequest>;
    'primary_card': CardTemplatePrimaryCardCreateRequest;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data.
*/
export declare class CardTemplateCustomFieldAddOrUpdateRequest {
    /**
    * The contributor ids which will be added to card template custom field.
    */
    'contributor_ids_to_add'?: Array<number>;
    /**
    * The contributor ids which will be removed from card template custom field.
    */
    'contributor_ids_to_remove'?: Array<number>;
    /**
    * A list of file ids to remove.
    */
    'file_ids_to_remove'?: Array<number>;
    /**
    * A list of files to add.
    */
    'files_to_add'?: Array<CardTemplateCustomFieldFileCreateRequest>;
    /**
    * A list of files to update.
    */
    'files_to_update'?: Array<CardTemplateCustomFieldFileUpdateRequest>;
    /**
    * The other value of custom field.
    */
    'other_value'?: string;
    /**
    * A list of selected values to remove.
    */
    'selected_value_ids_to_remove'?: Array<number>;
    /**
    * A list of selected values to add or update.
    */
    'selected_values_to_add_or_update'?: Array<CardTemplateCustomFieldSelectedValueAddOrUpdateRequest>;
    /**
    * The value of custom field.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - contributor.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestContributor {
    /**
    * A list of the contributors for the custom field.
    */
    'contributors'?: Array<CardTemplateCustomFieldCreateOrUpdateRequestContributorContributors>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestContributor>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldCreateOrUpdateRequestContributorContributors {
    /**
    * The user id of the contributor.
    */
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestContributorContributors>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - date.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestDate {
    /**
    * The value of the custom field.
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestDate>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - dropdrown.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestDropdown {
    /**
    * A list of the values of the custom field. The values will be dispayed in the UI in the order in which they were provided.
    */
    'values'?: Array<CardTemplateCustomFieldCreateOrUpdateRequestDropdownValues>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestDropdown>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldCreateOrUpdateRequestDropdownValues {
    /**
    * The id of an allowed value of the custom field.
    */
    'value_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestDropdownValues>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - file.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestFile {
    /**
    * A list of the files for the custom field.
    */
    'files'?: Array<CardTemplateCustomFieldCreateOrUpdateRequestFileFiles>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestFile>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldCreateOrUpdateRequestFileFiles {
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestFileFiles>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - link.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestLink {
    /**
    * The value of the custom field.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestLink>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - multi-line text.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestMultiLine {
    /**
    * The value of the custom field.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - number.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestNumber {
    /**
    * The value of the custom field.
    */
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - single-line text.
*/
export declare class CardTemplateCustomFieldCreateOrUpdateRequestSingleLine {
    /**
    * The value of the custom field.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldCreateOrUpdateRequestSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data.
*/
export declare class CardTemplateCustomFieldData {
    'field_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldData>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataCardPickerWithFieldId {
    'field_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataCardPickerWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data
*/
export declare class CardTemplateCustomFieldDataCommon {
    'field_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - contributor
*/
export declare class CardTemplateCustomFieldDataContributor {
    'contributors'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataContributor>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataContributorWithFieldId {
    'field_id'?: number;
    'contributors'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataContributorWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - date
*/
export declare class CardTemplateCustomFieldDataDate {
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataDate>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataDateWithFieldId {
    'field_id'?: number;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataDateWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - dropdown
*/
export declare class CardTemplateCustomFieldDataDropdown {
    'values'?: Array<CardCustomFieldDataDropdownValues>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataDropdown>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataDropdownWithFieldId {
    'field_id'?: number;
    'values'?: Array<CardCustomFieldDataDropdownValues>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataDropdownWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - file
*/
export declare class CardTemplateCustomFieldDataFile {
    'files'?: Array<CardTemplateCustomFieldDataFileFiles>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataFile>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataFileFiles {
    'file_name'?: string;
    'id'?: number;
    'link'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataFileFiles>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataFileWithFieldId {
    'field_id'?: number;
    'files'?: Array<CardTemplateCustomFieldDataFileFiles>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataFileWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - link
*/
export declare class CardTemplateCustomFieldDataLink {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataLink>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataLinkWithFieldId {
    'field_id'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataLinkWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - multi-line text
*/
export declare class CardTemplateCustomFieldDataMultiLine {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataMultiLine>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataMultiLineWithFieldId {
    'field_id'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataMultiLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - number
*/
export declare class CardTemplateCustomFieldDataNumber {
    'display_value'?: string;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataNumber>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataNumberWithFieldId {
    'field_id'?: number;
    'display_value'?: string;
    'value'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataNumberWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field data - single-line text
*/
export declare class CardTemplateCustomFieldDataSingleLine {
    'display_value'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataSingleLine>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataSingleLineWithFieldId {
    'field_id'?: number;
    'display_value'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataSingleLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldDataVoteWithFieldId {
    'field_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldDataVoteWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field file data
*/
export declare class CardTemplateCustomFieldFile {
    'file_name'?: string;
    'id'?: number;
    'link'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field file data.
*/
export declare class CardTemplateCustomFieldFileCreateRequest {
    /**
    * The name of the file.
    */
    'file_name': string;
    /**
    * The link to the file.
    */
    'link': string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldFileCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field file data.
*/
export declare class CardTemplateCustomFieldFileData {
    'id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldFileData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field file data.
*/
export declare class CardTemplateCustomFieldFileUpdateRequest {
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldFileUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldFileWithIdUpdateRequest {
    'id': number;
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldFileWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field value data
*/
export declare class CardTemplateCustomFieldSelectedValue {
    'position'?: number;
    'value_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldSelectedValue>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template custom field selected value data.
*/
export declare class CardTemplateCustomFieldSelectedValueAddOrUpdateRequest {
    /**
    * The position of the value within the list of selected values.
    */
    'position'?: number;
    /**
    * The id of а selected value of the custom field.
    */
    'value_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldSelectedValueAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateCustomFieldWithIdAddOrUpdateRequest {
    'field_id': number;
    /**
    * The contributor ids which will be added to card template custom field.
    */
    'contributor_ids_to_add'?: Array<number>;
    /**
    * The contributor ids which will be removed from card template custom field.
    */
    'contributor_ids_to_remove'?: Array<number>;
    /**
    * A list of file ids to remove.
    */
    'file_ids_to_remove'?: Array<number>;
    /**
    * A list of files to add.
    */
    'files_to_add'?: Array<CardTemplateCustomFieldFileCreateRequest>;
    /**
    * A list of files to update.
    */
    'files_to_update'?: Array<CardTemplateCustomFieldFileUpdateRequest>;
    /**
    * The other value of custom field.
    */
    'other_value'?: string;
    /**
    * A list of selected values to remove.
    */
    'selected_value_ids_to_remove'?: Array<number>;
    /**
    * A list of selected values to add or update.
    */
    'selected_values_to_add_or_update'?: Array<CardTemplateCustomFieldSelectedValueAddOrUpdateRequest>;
    /**
    * The value of custom field.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateCustomFieldWithIdAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on card template resource
*/
export declare class CardTemplateHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'time'?: Date;
    'type_id'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type CardTemplateLinkAddOrUpdateRequestLinkTypeEnum
 */
export declare const CardTemplateLinkAddOrUpdateRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type CardTemplateLinkAddOrUpdateRequestLinkTypeEnum = typeof CardTemplateLinkAddOrUpdateRequestLinkTypeEnum[keyof typeof CardTemplateLinkAddOrUpdateRequestLinkTypeEnum];
/**
* Card template link data
*/
export declare class CardTemplateLinkAddOrUpdateRequest {
    /**
    * The link type.
    */
    'link_type': CardTemplateLinkAddOrUpdateRequestLinkTypeEnum;
    /**
    * The template card id of the linked card.
    */
    'linked_template_card_id': number;
    /**
    * The position of the linked template card within the card's list of linked cards.
    */
    'linked_template_card_position'?: number;
    /**
    * The position of the template card within the link card's list of linked cards.
    */
    'template_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateLinkAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template link data
*/
export declare class CardTemplateLinkData {
    'links_to_existing_template_cards_to_add_or_update'?: Array<CardTemplateLinkAddOrUpdateRequest>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateLinkData>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type CardTemplateLinkRemoveRequestLinkTypeEnum
 */
export declare const CardTemplateLinkRemoveRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type CardTemplateLinkRemoveRequestLinkTypeEnum = typeof CardTemplateLinkRemoveRequestLinkTypeEnum[keyof typeof CardTemplateLinkRemoveRequestLinkTypeEnum];
/**
* Card template link data
*/
export declare class CardTemplateLinkRemoveRequest {
    /**
    * The link type.
    */
    'link_type': CardTemplateLinkRemoveRequestLinkTypeEnum;
    /**
    * The card id of the linked template card.
    */
    'linked_template_card_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateLinkRemoveRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum
 */
export declare const CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum = typeof CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum[keyof typeof CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum];
/**
* Card template link data.
*/
export declare class CardTemplateLinkToNewTemplateCardToAddRequest {
    /**
    * The link type.
    */
    'link_type': CardTemplateLinkToNewTemplateCardToAddRequestLinkTypeEnum;
    /**
    * The new card's reference of the linked card.
    */
    'linked_new_template_card_reference': string;
    /**
    * The position of the linked card within the card's list of linked cards.
    */
    'linked_template_card_position'?: number;
    /**
    * The position of the card within the link card's list of linked cards.
    */
    'template_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateLinkToNewTemplateCardToAddRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Primary card data for a card template.
*/
export declare class CardTemplatePrimaryCardCreateRequest {
    /**
    * A list of annotations which will be added to the new card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachments which will be added to the new card.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of co-owner ids which will be added to the new card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * The color of the new card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of custom fields which will be add or update for the new card.
    */
    'custom_fields_to_add_or_update'?: Array<CardTemplateCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the new card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the new card.
    */
    'deadline'?: number;
    /**
    * The description of the new card.
    */
    'description'?: string;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_template_cards_to_add'?: Array<CardTemplateLinkToNewTemplateCardToAddRequest>;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The priority id of the new card.
    */
    'priority'?: number;
    /**
    * A reference that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size id of the new card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the new card.
    */
    'stickers_to_add'?: Array<CardTemplateStickerAddRequest>;
    /**
    * A list of subtasks which will be added to the new card.
    */
    'subtasks_to_add'?: Array<CardTemplateSubtaskCreateRequest>;
    /**
    * A list of tag ids which will be removed from the new card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * The title of the new card.
    */
    'title'?: string;
    /**
    * The type id of the new card.
    */
    'type_id'?: number;
    /**
    * A list of watcher ids which will be added to the new card.
    */
    'watcher_ids_to_add'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplatePrimaryCardCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template stricker data.
*/
export declare class CardTemplateStickerAddRequest {
    /**
    * The sticker id of the sticker.
    */
    'sticker_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateStickerAddRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template subtask data.
*/
export declare class CardTemplateSubtaskCreateRequest {
    /**
    * A list of attachments which will be added to the new subtask.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A subtask description.
    */
    'description': string;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateSubtaskCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template subtask data.
*/
export declare class CardTemplateSubtaskUpdateRequest {
    /**
    * A list of attachments to remove.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments to add.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of attachments to update.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A subtask description.
    */
    'description'?: string;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateSubtaskUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
export declare class CardTemplateSubtaskWithIdUpdateRequest {
    'template_subtask_id': number;
    /**
    * A list of attachments to remove.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments to add.
    */
    'attachments_to_add'?: Array<CardTemplateAttachmentCreateRequest>;
    /**
    * A list of attachments to update.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A subtask description.
    */
    'description'?: string;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateSubtaskWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card template - template_card_id
*/
export declare class CardTemplateTemplateCardId {
    'template_card_id': Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateTemplateCardId>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.
 * @export
 * @type CardTemplateUpdateRequestAvailabilityEnum
 */
export declare const CardTemplateUpdateRequestAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CardTemplateUpdateRequestAvailabilityEnum = typeof CardTemplateUpdateRequestAvailabilityEnum[keyof typeof CardTemplateUpdateRequestAvailabilityEnum];
/**
 * Controls whether this card template is enabled.
 * @export
 * @type CardTemplateUpdateRequestIsEnabledEnum
 */
export declare const CardTemplateUpdateRequestIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTemplateUpdateRequestIsEnabledEnum = typeof CardTemplateUpdateRequestIsEnabledEnum[keyof typeof CardTemplateUpdateRequestIsEnabledEnum];
/**
* Card template data.
*/
export declare class CardTemplateUpdateRequest {
    /**
    * When set to 0 the card template has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card template is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card template is added automatically to all boards and cannot be removed.
    */
    'availability'?: CardTemplateUpdateRequestAvailabilityEnum;
    /**
    * A list of card ids to remove.
    */
    'card_ids_to_remove'?: Array<number>;
    /**
    * A list of cards which will be added to the card template.
    */
    'cards_to_add'?: Array<CardTemplateCardInExistingTemplateCreateRequest>;
    /**
    * A list of cards which will be updated for the updated card template.
    */
    'cards_to_update'?: Array<CardTemplateCardWithIdUpdateRequest>;
    /**
    * The description of the updated card template.
    */
    'description'?: string;
    /**
    * Controls whether this card template is enabled.
    */
    'is_enabled'?: CardTemplateUpdateRequestIsEnabledEnum;
    /**
    * The name of the updated card template.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTemplateUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CardTypeAllPropertiesAreLockedEnum
 */
export declare const CardTypeAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTypeAllPropertiesAreLockedEnum = typeof CardTypeAllPropertiesAreLockedEnum[keyof typeof CardTypeAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CardTypeAvailabilityEnum
 */
export declare const CardTypeAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CardTypeAvailabilityEnum = typeof CardTypeAvailabilityEnum[keyof typeof CardTypeAvailabilityEnum];
/**
 *
 * @export
 * @type CardTypeCardColorSyncEnum
 */
export declare const CardTypeCardColorSyncEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTypeCardColorSyncEnum = typeof CardTypeCardColorSyncEnum[keyof typeof CardTypeCardColorSyncEnum];
/**
 *
 * @export
 * @type CardTypeIconTypeEnum
 */
export declare const CardTypeIconTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTypeIconTypeEnum = typeof CardTypeIconTypeEnum[keyof typeof CardTypeIconTypeEnum];
/**
 *
 * @export
 * @type CardTypeIsEnabledEnum
 */
export declare const CardTypeIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardTypeIsEnabledEnum = typeof CardTypeIsEnabledEnum[keyof typeof CardTypeIsEnabledEnum];
/**
* Card type data
*/
export declare class CardType {
    'all_properties_are_locked'?: CardTypeAllPropertiesAreLockedEnum;
    'availability'?: CardTypeAvailabilityEnum;
    'card_color_sync'?: CardTypeCardColorSyncEnum;
    'color'?: string;
    'description'?: string;
    'icon_id'?: number;
    'icon_type'?: CardTypeIconTypeEnum;
    'is_enabled'?: CardTypeIsEnabledEnum;
    'name'?: string;
    'type_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardType>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on card type resource
*/
export declare class CardTypeHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'time'?: Date;
    'type_id'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardTypeHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the card will be archived.
 * @export
 * @type CardUpdateRequestIsArchivedEnum
 */
export declare const CardUpdateRequestIsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateRequestIsArchivedEnum = typeof CardUpdateRequestIsArchivedEnum[keyof typeof CardUpdateRequestIsArchivedEnum];
/**
 * When set to 1 the card will be discarded.
 * @export
 * @type CardUpdateRequestIsDiscardedEnum
 */
export declare const CardUpdateRequestIsDiscardedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateRequestIsDiscardedEnum = typeof CardUpdateRequestIsDiscardedEnum[keyof typeof CardUpdateRequestIsDiscardedEnum];
/**
 * When set to 1 the current user will become a card's watcher.
 * @export
 * @type CardUpdateRequestWatchEnum
 */
export declare const CardUpdateRequestWatchEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateRequestWatchEnum = typeof CardUpdateRequestWatchEnum[keyof typeof CardUpdateRequestWatchEnum];
/**
* Card data.
*/
export declare class CardUpdateRequest {
    /**
    * The actual end time of the updated card.
    */
    'actual_end_time'?: Date;
    /**
    * The actual start time of the updated card.
    */
    'actual_start_time'?: Date;
    /**
    * A list of annotations which will be added to the updated card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of annotations which will be removed from the updated card.
    */
    'annotations_to_remove'?: Array<AnnotationRemoveRequest>;
    /**
    * A list of annotations which will be updated for the updated card.
    */
    'annotations_to_update'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachment ids which will be removed from the updated card.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the updated card.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated for the updated card.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A list of co-owner ids which will be added to the updated card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * A list of co-owner ids which will be removed from the updated card.
    */
    'co_owner_ids_to_remove'?: Array<number>;
    /**
    * The color of the updated card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of exit criteria ids which will be uncheck for the updated card.
    */
    'column_checklist_item_ids_to_uncheck'?: Array<number>;
    /**
    * A list of exit criteria.
    */
    'column_checklist_items_to_check_or_update'?: Array<CardColumnChecklistItemWithIdAddOrUpdateRequest>;
    /**
    * The column id of the updated card.
    */
    'column_id'?: number;
    /**
    * A list of custom field ids which will be removed from the updated card.
    */
    'custom_field_ids_to_remove'?: Array<number>;
    /**
    * A list of custom fields which will be add or update to the updated card.
    */
    'custom_fields_to_add_or_update'?: Array<CardCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the updated card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the updated card.
    */
    'deadline'?: Date;
    /**
    * The description of the updated card.
    */
    'description'?: string;
    /**
    * The discard comment of th updated card.
    */
    'discard_comment'?: string;
    /**
    * The discarded reason id of the updated card.
    */
    'discard_reason_id'?: number;
    /**
    * When set to 1 the card will be archived.
    */
    'is_archived'?: CardUpdateRequestIsArchivedEnum;
    /**
    * When set to 1 the card will be discarded.
    */
    'is_discarded'?: CardUpdateRequestIsDiscardedEnum;
    /**
    * The lane id of the updated card.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_cards_to_add_or_update'?: Array<LinkAddOrUpdateRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_existing_cards_to_remove'?: Array<LinkRemoveRequest>;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_cards_to_add'?: Array<LinkToNewCardToAddRequest>;
    /**
    * The user id of assignee of the updated card.
    */
    'owner_user_id'?: number;
    /**
    * The planened end date of the updated card.
    */
    'planned_end_date'?: Date;
    /**
    * The planened start date of the updated card.
    */
    'planned_start_date'?: Date;
    /**
    * The position of the updated card.
    */
    'position'?: number;
    /**
    * The priority of the updated card.
    */
    'priority'?: number;
    /**
    * The size of the updated card.
    */
    'size'?: number;
    /**
    * A list of stricker ids which will be removed from the updated card.
    */
    'sticker_ids_to_remove'?: Array<number>;
    /**
    * A list of strickers which will be added to the updated card.
    */
    'stickers_to_add'?: Array<CardStickerAddRequest>;
    /**
    * A list of subtask ids which will be removed from the updated card.
    */
    'subtask_ids_to_remove'?: Array<number>;
    /**
    * A list of subtasks which will be added to the updated card.
    */
    'subtasks_to_add'?: Array<SubtaskCreateRequest>;
    /**
    * A list of subtasks which will be convert into cards.
    */
    'subtasks_to_convert_into_cards'?: Array<SubtaskWithIdConvertIntoCardRequest>;
    /**
    * A list of subtasks which will be updated for the updated card.
    */
    'subtasks_to_update'?: Array<SubtaskWithIdUpdateRequest>;
    /**
    * A list of tag ids which will be added to the updated card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * A list of tag ids which will be removed from the updated card.
    */
    'tag_ids_to_remove'?: Array<number>;
    /**
    * The title of the updated card.
    */
    'title'?: string;
    /**
    * The track of the updated card.
    */
    'track'?: number;
    /**
    * The type id of the updated card.
    */
    'type_id'?: number;
    /**
    * The version id of the updated card.
    */
    'version_id'?: number;
    /**
    * When set to 1 the current user will become a card's watcher.
    */
    'watch'?: CardUpdateRequestWatchEnum;
    /**
    * A list of watcher ids which will be added to the updated card.
    */
    'watcher_ids_to_add'?: Array<number>;
    /**
    * A list of watcher ids which will be removed from the updated card.
    */
    'watcher_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the card will be archived.
 * @export
 * @type CardUpdateWithCardIdRequestIsArchivedEnum
 */
export declare const CardUpdateWithCardIdRequestIsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateWithCardIdRequestIsArchivedEnum = typeof CardUpdateWithCardIdRequestIsArchivedEnum[keyof typeof CardUpdateWithCardIdRequestIsArchivedEnum];
/**
 * When set to 1 the card will be discarded.
 * @export
 * @type CardUpdateWithCardIdRequestIsDiscardedEnum
 */
export declare const CardUpdateWithCardIdRequestIsDiscardedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateWithCardIdRequestIsDiscardedEnum = typeof CardUpdateWithCardIdRequestIsDiscardedEnum[keyof typeof CardUpdateWithCardIdRequestIsDiscardedEnum];
/**
 * When set to 1 the current user will become a card's watcher.
 * @export
 * @type CardUpdateWithCardIdRequestWatchEnum
 */
export declare const CardUpdateWithCardIdRequestWatchEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CardUpdateWithCardIdRequestWatchEnum = typeof CardUpdateWithCardIdRequestWatchEnum[keyof typeof CardUpdateWithCardIdRequestWatchEnum];
export declare class CardUpdateWithCardIdRequest {
    'card_id': number;
    /**
    * The actual end time of the updated card.
    */
    'actual_end_time'?: Date;
    /**
    * The actual start time of the updated card.
    */
    'actual_start_time'?: Date;
    /**
    * A list of annotations which will be added to the updated card.
    */
    'annotations_to_add'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of annotations which will be removed from the updated card.
    */
    'annotations_to_remove'?: Array<AnnotationRemoveRequest>;
    /**
    * A list of annotations which will be updated for the updated card.
    */
    'annotations_to_update'?: Array<AnnotationAddOrUpdateRequest>;
    /**
    * A list of attachment ids which will be removed from the updated card.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the updated card.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated for the updated card.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A list of co-owner ids which will be added to the updated card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * A list of co-owner ids which will be removed from the updated card.
    */
    'co_owner_ids_to_remove'?: Array<number>;
    /**
    * The color of the updated card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of exit criteria ids which will be uncheck for the updated card.
    */
    'column_checklist_item_ids_to_uncheck'?: Array<number>;
    /**
    * A list of exit criteria.
    */
    'column_checklist_items_to_check_or_update'?: Array<CardColumnChecklistItemWithIdAddOrUpdateRequest>;
    /**
    * The column id of the updated card.
    */
    'column_id'?: number;
    /**
    * A list of custom field ids which will be removed from the updated card.
    */
    'custom_field_ids_to_remove'?: Array<number>;
    /**
    * A list of custom fields which will be add or update to the updated card.
    */
    'custom_fields_to_add_or_update'?: Array<CardCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the updated card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the updated card.
    */
    'deadline'?: Date;
    /**
    * The description of the updated card.
    */
    'description'?: string;
    /**
    * The discard comment of th updated card.
    */
    'discard_comment'?: string;
    /**
    * The discarded reason id of the updated card.
    */
    'discard_reason_id'?: number;
    /**
    * When set to 1 the card will be archived.
    */
    'is_archived'?: CardUpdateWithCardIdRequestIsArchivedEnum;
    /**
    * When set to 1 the card will be discarded.
    */
    'is_discarded'?: CardUpdateWithCardIdRequestIsDiscardedEnum;
    /**
    * The lane id of the updated card.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_cards_to_add_or_update'?: Array<LinkAddOrUpdateRequest>;
    /**
    * A list of links to existing cards which will be remove.
    */
    'links_to_existing_cards_to_remove'?: Array<LinkRemoveRequest>;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_cards_to_add'?: Array<LinkToNewCardToAddRequest>;
    /**
    * The user id of assignee of the updated card.
    */
    'owner_user_id'?: number;
    /**
    * The planened end date of the updated card.
    */
    'planned_end_date'?: Date;
    /**
    * The planened start date of the updated card.
    */
    'planned_start_date'?: Date;
    /**
    * The position of the updated card.
    */
    'position'?: number;
    /**
    * The priority of the updated card.
    */
    'priority'?: number;
    /**
    * The size of the updated card.
    */
    'size'?: number;
    /**
    * A list of stricker ids which will be removed from the updated card.
    */
    'sticker_ids_to_remove'?: Array<number>;
    /**
    * A list of strickers which will be added to the updated card.
    */
    'stickers_to_add'?: Array<CardStickerAddRequest>;
    /**
    * A list of subtask ids which will be removed from the updated card.
    */
    'subtask_ids_to_remove'?: Array<number>;
    /**
    * A list of subtasks which will be added to the updated card.
    */
    'subtasks_to_add'?: Array<SubtaskCreateRequest>;
    /**
    * A list of subtasks which will be convert into cards.
    */
    'subtasks_to_convert_into_cards'?: Array<SubtaskWithIdConvertIntoCardRequest>;
    /**
    * A list of subtasks which will be updated for the updated card.
    */
    'subtasks_to_update'?: Array<SubtaskWithIdUpdateRequest>;
    /**
    * A list of tag ids which will be added to the updated card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * A list of tag ids which will be removed from the updated card.
    */
    'tag_ids_to_remove'?: Array<number>;
    /**
    * The title of the updated card.
    */
    'title'?: string;
    /**
    * The track of the updated card.
    */
    'track'?: number;
    /**
    * The type id of the updated card.
    */
    'type_id'?: number;
    /**
    * The version id of the updated card.
    */
    'version_id'?: number;
    /**
    * When set to 1 the current user will become a card's watcher.
    */
    'watch'?: CardUpdateWithCardIdRequestWatchEnum;
    /**
    * A list of watcher ids which will be added to the updated card.
    */
    'watcher_ids_to_add'?: Array<number>;
    /**
    * A list of watcher ids which will be removed from the updated card.
    */
    'watcher_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CardUpdateWithCardIdRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Cell limit data
*/
export declare class CellLimit {
    'board_id'?: number;
    'column_id'?: number;
    'lane_id'?: number;
    'limit'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CellLimit>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type ColumnFlowTypeEnum
 */
export declare const ColumnFlowTypeEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type ColumnFlowTypeEnum = typeof ColumnFlowTypeEnum[keyof typeof ColumnFlowTypeEnum];
/**
 *
 * @export
 * @type ColumnWorkflowEnum
 */
export declare const ColumnWorkflowEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type ColumnWorkflowEnum = typeof ColumnWorkflowEnum[keyof typeof ColumnWorkflowEnum];
/**
* Column data
*/
export declare class Column {
    'cards_per_row'?: number;
    'color'?: string;
    'description'?: string;
    'flow_type'?: ColumnFlowTypeEnum;
    'limit'?: number;
    'name'?: string;
    'parent_column_id'?: number;
    'position'?: number;
    'section'?: number;
    'workflow'?: ColumnWorkflowEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Column>, skipDefaultValuesInitialization?: boolean);
}
/**
* Comment attachment data.
*/
export declare class CommentAttachmentCreateRequest {
    /**
    * The attachment file name.
    */
    'file_name': string;
    /**
    * The attachment file link.
    */
    'link': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CommentAttachmentCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Comment data.
*/
export declare class CommentCreateRequest {
    /**
    * A list of attachments which will be added to the new comment.
    */
    'attachments_to_add'?: Array<CommentAttachmentCreateRequest>;
    /**
    * A comment text.
    */
    'text'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CommentCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Subtask data.
*/
export declare class CommentUpdateRequest {
    /**
    * A list of attachments to remove.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments to add.
    */
    'attachments_to_add'?: Array<CommentAttachmentCreateRequest>;
    /**
    * A comment text.
    */
    'text'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CommentUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CompanyAddonStatusEnum
 */
export declare const CompanyAddonStatusEnum: {
    readonly Active: "active";
    readonly Available: "available";
    readonly Unavailable: "unavailable";
};
export declare type CompanyAddonStatusEnum = typeof CompanyAddonStatusEnum[keyof typeof CompanyAddonStatusEnum];
/**
* Addon trial
*/
export declare class CompanyAddon {
    'end_date'?: Date;
    'feature_id'?: number;
    'name'?: string;
    'settings'?: Array<CompanyFeatureSetting>;
    'status'?: CompanyAddonStatusEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyAddon>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CompanyAddonTrialStatusEnum
 */
export declare const CompanyAddonTrialStatusEnum: {
    readonly Ended: "ended";
    readonly Active: "active";
    readonly Available: "available";
    readonly Unavailable: "unavailable";
};
export declare type CompanyAddonTrialStatusEnum = typeof CompanyAddonTrialStatusEnum[keyof typeof CompanyAddonTrialStatusEnum];
/**
* Addon trial status
*/
export declare class CompanyAddonTrial {
    'end_date'?: Date;
    'name'?: string;
    'settings'?: Array<CompanyFeatureSetting>;
    'start_date'?: Date;
    'status'?: CompanyAddonTrialStatusEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyAddonTrial>, skipDefaultValuesInitialization?: boolean);
}
/**
* Company feature
*/
export declare class CompanyFeature {
    'feature_id'?: number;
    'name'?: string;
    'settings'?: Array<CompanyFeatureSetting>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyFeature>, skipDefaultValuesInitialization?: boolean);
}
/**
* Company feature setting
*/
export declare class CompanyFeatureSetting {
    'name'?: string;
    'setting_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyFeatureSetting>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CompanyPlanStatusEnum
 */
export declare const CompanyPlanStatusEnum: {
    readonly Active: "active";
    readonly Available: "available";
    readonly Unavailable: "unavailable";
};
export declare type CompanyPlanStatusEnum = typeof CompanyPlanStatusEnum[keyof typeof CompanyPlanStatusEnum];
/**
* Company plan
*/
export declare class CompanyPlan {
    'features'?: Array<CompanyFeature>;
    'name'?: string;
    'plan_id'?: number;
    'status'?: CompanyPlanStatusEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyPlan>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CompanyPlanTrialStatusEnum
 */
export declare const CompanyPlanTrialStatusEnum: {
    readonly Ended: "ended";
    readonly Active: "active";
    readonly Available: "available";
    readonly Unavailable: "unavailable";
};
export declare type CompanyPlanTrialStatusEnum = typeof CompanyPlanTrialStatusEnum[keyof typeof CompanyPlanTrialStatusEnum];
/**
* Company trial plan
*/
export declare class CompanyPlanTrial {
    'end_date'?: Date;
    'features'?: Array<CompanyFeature>;
    'name'?: string;
    'start_date'?: Date;
    'status'?: CompanyPlanTrialStatusEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CompanyPlanTrial>, skipDefaultValuesInitialization?: boolean);
}
/**
 * A list of card properties.
 * @export
 * @type CopyCardPropertiesRequestPropertiesEnum
 */
export declare const CopyCardPropertiesRequestPropertiesEnum: {
    readonly Position: "position";
    readonly Title: "title";
    readonly Description: "description";
    readonly CustomId: "custom_id";
    readonly Owner: "owner";
    readonly Type: "type";
    readonly Size: "size";
    readonly Priority: "priority";
    readonly Color: "color";
    readonly Deadline: "deadline";
    readonly BlockReason: "block_reason";
    readonly Stickers: "stickers";
    readonly Tags: "tags";
    readonly Contributors: "contributors";
    readonly CustomFields: "custom_fields";
    readonly Attachments: "attachments";
    readonly Subtasks: "subtasks";
    readonly UnfinishedSubtasks: "unfinished_subtasks";
    readonly Annotations: "annotations";
    readonly Comments: "comments";
    readonly Parents: "parents";
};
export declare type CopyCardPropertiesRequestPropertiesEnum = typeof CopyCardPropertiesRequestPropertiesEnum[keyof typeof CopyCardPropertiesRequestPropertiesEnum];
/**
* Card properties to copy.
*/
export declare class CopyCardPropertiesRequest {
    /**
    * A card id.
    */
    'card_id': number;
    /**
    * A list of card properties.
    */
    'properties': Array<CopyCardPropertiesRequestPropertiesEnum>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CopyCardPropertiesRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom fields to copy.
*/
export declare class CopyCustomFieldsRequest {
    /**
    * A card id.
    */
    'card_id': number;
    /**
    * A list of custom field ids.
    */
    'field_ids': Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CopyCustomFieldsRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldAllowedValueIsDefaultEnum
 */
export declare const CustomFieldAllowedValueIsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldAllowedValueIsDefaultEnum = typeof CustomFieldAllowedValueIsDefaultEnum[keyof typeof CustomFieldAllowedValueIsDefaultEnum];
/**
 *
 * @export
 * @type CustomFieldAllowedValueIsEnabledEnum
 */
export declare const CustomFieldAllowedValueIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldAllowedValueIsEnabledEnum = typeof CustomFieldAllowedValueIsEnabledEnum[keyof typeof CustomFieldAllowedValueIsEnabledEnum];
/**
* Card custom field data
*/
export declare class CustomFieldAllowedValue {
    'is_default'?: CustomFieldAllowedValueIsDefaultEnum;
    'is_enabled'?: CustomFieldAllowedValueIsEnabledEnum;
    'position'?: number;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldAllowedValue>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldCardPickerTypeEnum
 */
export declare const CustomFieldCardPickerTypeEnum: {
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCardPickerTypeEnum = typeof CustomFieldCardPickerTypeEnum[keyof typeof CustomFieldCardPickerTypeEnum];
/**
* Custom field data - card picker
*/
export declare class CustomFieldCardPicker {
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    'type'?: CustomFieldCardPickerTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldContributorTypeEnum
 */
export declare const CustomFieldContributorTypeEnum: {
    readonly Contributor: "contributor";
};
export declare type CustomFieldContributorTypeEnum = typeof CustomFieldContributorTypeEnum[keyof typeof CustomFieldContributorTypeEnum];
/**
* Custom field data - contributor
*/
export declare class CustomFieldContributor {
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    'type'?: CustomFieldContributorTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestCardPickerAvailabilityEnum
 */
export declare const CustomFieldCreateRequestCardPickerAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestCardPickerAvailabilityEnum = typeof CustomFieldCreateRequestCardPickerAvailabilityEnum[keyof typeof CustomFieldCreateRequestCardPickerAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum = typeof CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestCardPickerIsEnabledEnum
 */
export declare const CustomFieldCreateRequestCardPickerIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCardPickerIsEnabledEnum = typeof CustomFieldCreateRequestCardPickerIsEnabledEnum[keyof typeof CustomFieldCreateRequestCardPickerIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestCardPickerIsImmutableEnum
 */
export declare const CustomFieldCreateRequestCardPickerIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCardPickerIsImmutableEnum = typeof CustomFieldCreateRequestCardPickerIsImmutableEnum[keyof typeof CustomFieldCreateRequestCardPickerIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestCardPickerTypeEnum
 */
export declare const CustomFieldCreateRequestCardPickerTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestCardPickerTypeEnum = typeof CustomFieldCreateRequestCardPickerTypeEnum[keyof typeof CustomFieldCreateRequestCardPickerTypeEnum];
export declare class CustomFieldCreateRequestCardPicker {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestCardPickerAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestCardPickerAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestCardPickerIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestCardPickerIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestCardPickerIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestCardPickerTypeEnum;
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - card picker.
*/
export declare class CustomFieldCreateRequestCardPickerAllOf {
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestCardPickerAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestCommonAvailabilityEnum
 */
export declare const CustomFieldCreateRequestCommonAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestCommonAvailabilityEnum = typeof CustomFieldCreateRequestCommonAvailabilityEnum[keyof typeof CustomFieldCreateRequestCommonAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestCommonIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestCommonIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCommonIsAlwaysPresentEnum = typeof CustomFieldCreateRequestCommonIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestCommonIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestCommonIsEnabledEnum
 */
export declare const CustomFieldCreateRequestCommonIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCommonIsEnabledEnum = typeof CustomFieldCreateRequestCommonIsEnabledEnum[keyof typeof CustomFieldCreateRequestCommonIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestCommonIsImmutableEnum
 */
export declare const CustomFieldCreateRequestCommonIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestCommonIsImmutableEnum = typeof CustomFieldCreateRequestCommonIsImmutableEnum[keyof typeof CustomFieldCreateRequestCommonIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestCommonTypeEnum
 */
export declare const CustomFieldCreateRequestCommonTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestCommonTypeEnum = typeof CustomFieldCreateRequestCommonTypeEnum[keyof typeof CustomFieldCreateRequestCommonTypeEnum];
/**
* Custom field data.
*/
export declare class CustomFieldCreateRequestCommon {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestCommonAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestCommonAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestCommonIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestCommonIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestCommonIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestCommonTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestContributorAvailabilityEnum
 */
export declare const CustomFieldCreateRequestContributorAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestContributorAvailabilityEnum = typeof CustomFieldCreateRequestContributorAvailabilityEnum[keyof typeof CustomFieldCreateRequestContributorAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestContributorIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestContributorIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestContributorIsAlwaysPresentEnum = typeof CustomFieldCreateRequestContributorIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestContributorIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestContributorIsEnabledEnum
 */
export declare const CustomFieldCreateRequestContributorIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestContributorIsEnabledEnum = typeof CustomFieldCreateRequestContributorIsEnabledEnum[keyof typeof CustomFieldCreateRequestContributorIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestContributorIsImmutableEnum
 */
export declare const CustomFieldCreateRequestContributorIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestContributorIsImmutableEnum = typeof CustomFieldCreateRequestContributorIsImmutableEnum[keyof typeof CustomFieldCreateRequestContributorIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestContributorTypeEnum
 */
export declare const CustomFieldCreateRequestContributorTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestContributorTypeEnum = typeof CustomFieldCreateRequestContributorTypeEnum[keyof typeof CustomFieldCreateRequestContributorTypeEnum];
export declare class CustomFieldCreateRequestContributor {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestContributorAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestContributorAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestContributorIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestContributorIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestContributorIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestContributorTypeEnum;
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - contributor.
*/
export declare class CustomFieldCreateRequestContributorAllOf {
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestContributorAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestDateAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestDateAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestDateAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestDateAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestDateAvailabilityEnum
 */
export declare const CustomFieldCreateRequestDateAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDateAvailabilityEnum = typeof CustomFieldCreateRequestDateAvailabilityEnum[keyof typeof CustomFieldCreateRequestDateAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestDateIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestDateIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateIsAlwaysPresentEnum = typeof CustomFieldCreateRequestDateIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestDateIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestDateIsEnabledEnum
 */
export declare const CustomFieldCreateRequestDateIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateIsEnabledEnum = typeof CustomFieldCreateRequestDateIsEnabledEnum[keyof typeof CustomFieldCreateRequestDateIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestDateIsImmutableEnum
 */
export declare const CustomFieldCreateRequestDateIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateIsImmutableEnum = typeof CustomFieldCreateRequestDateIsImmutableEnum[keyof typeof CustomFieldCreateRequestDateIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestDateTypeEnum
 */
export declare const CustomFieldCreateRequestDateTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestDateTypeEnum = typeof CustomFieldCreateRequestDateTypeEnum[keyof typeof CustomFieldCreateRequestDateTypeEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestDateDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDateDisplayWidthEnum = typeof CustomFieldCreateRequestDateDisplayWidthEnum[keyof typeof CustomFieldCreateRequestDateDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestDateValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateValueIsRequiredEnum = typeof CustomFieldCreateRequestDateValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestDateValueIsRequiredEnum];
/**
 * Controls whether the value is only a date or a date and a time.
 * @export
 * @type CustomFieldCreateRequestDateValueWithTimeEnum
 */
export declare const CustomFieldCreateRequestDateValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateValueWithTimeEnum = typeof CustomFieldCreateRequestDateValueWithTimeEnum[keyof typeof CustomFieldCreateRequestDateValueWithTimeEnum];
export declare class CustomFieldCreateRequestDate {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestDateAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestDateAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestDateIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestDateIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestDateIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestDateTypeEnum;
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestDateDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestDateValueIsRequiredEnum;
    /**
    * Controls whether the value is only a date or a date and a time.
    */
    'value_with_time'?: CustomFieldCreateRequestDateValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestDateAllOfDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestDateAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDateAllOfDisplayWidthEnum = typeof CustomFieldCreateRequestDateAllOfDisplayWidthEnum[keyof typeof CustomFieldCreateRequestDateAllOfDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestDateAllOfValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestDateAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateAllOfValueIsRequiredEnum = typeof CustomFieldCreateRequestDateAllOfValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestDateAllOfValueIsRequiredEnum];
/**
 * Controls whether the value is only a date or a date and a time.
 * @export
 * @type CustomFieldCreateRequestDateAllOfValueWithTimeEnum
 */
export declare const CustomFieldCreateRequestDateAllOfValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDateAllOfValueWithTimeEnum = typeof CustomFieldCreateRequestDateAllOfValueWithTimeEnum[keyof typeof CustomFieldCreateRequestDateAllOfValueWithTimeEnum];
/**
* Custom field data - date.
*/
export declare class CustomFieldCreateRequestDateAllOf {
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestDateAllOfDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestDateAllOfValueIsRequiredEnum;
    /**
    * Controls whether the value is only a date or a date and a time.
    */
    'value_with_time'?: CustomFieldCreateRequestDateAllOfValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestDateAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestDropdownAvailabilityEnum
 */
export declare const CustomFieldCreateRequestDropdownAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDropdownAvailabilityEnum = typeof CustomFieldCreateRequestDropdownAvailabilityEnum[keyof typeof CustomFieldCreateRequestDropdownAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestDropdownIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestDropdownIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownIsAlwaysPresentEnum = typeof CustomFieldCreateRequestDropdownIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestDropdownIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestDropdownIsEnabledEnum
 */
export declare const CustomFieldCreateRequestDropdownIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownIsEnabledEnum = typeof CustomFieldCreateRequestDropdownIsEnabledEnum[keyof typeof CustomFieldCreateRequestDropdownIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestDropdownIsImmutableEnum
 */
export declare const CustomFieldCreateRequestDropdownIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownIsImmutableEnum = typeof CustomFieldCreateRequestDropdownIsImmutableEnum[keyof typeof CustomFieldCreateRequestDropdownIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestDropdownTypeEnum
 */
export declare const CustomFieldCreateRequestDropdownTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestDropdownTypeEnum = typeof CustomFieldCreateRequestDropdownTypeEnum[keyof typeof CustomFieldCreateRequestDropdownTypeEnum];
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type CustomFieldCreateRequestDropdownAllowOtherValueEnum
 */
export declare const CustomFieldCreateRequestDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllowOtherValueEnum = typeof CustomFieldCreateRequestDropdownAllowOtherValueEnum[keyof typeof CustomFieldCreateRequestDropdownAllowOtherValueEnum];
/**
 * When set to 1 the allowed values of the dropdown cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum
 */
export declare const CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum = typeof CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum[keyof typeof CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestDropdownDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDropdownDisplayWidthEnum = typeof CustomFieldCreateRequestDropdownDisplayWidthEnum[keyof typeof CustomFieldCreateRequestDropdownDisplayWidthEnum];
export declare class CustomFieldCreateRequestDropdown {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestDropdownAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestDropdownAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestDropdownIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestDropdownIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestDropdownIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestDropdownTypeEnum;
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: CustomFieldCreateRequestDropdownAllowOtherValueEnum;
    /**
    * A list of the allowed values of the custom field with a flag controlling whether the value is selected by default. The values will be dispayed in the UI in the order in which they were provided.
    */
    'allowed_values'?: Array<CustomFieldCreateRequestDropdownAllOfAllowedValues>;
    /**
    * When set to 1 the allowed values of the dropdown cannot be changed per board.
    */
    'allowed_values_are_locked'?: CustomFieldCreateRequestDropdownAllowedValuesAreLockedEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestDropdownDisplayWidthEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum
 */
export declare const CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum = typeof CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum[keyof typeof CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum];
/**
 * When set to 1 the allowed values of the dropdown cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum
 */
export declare const CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum = typeof CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum[keyof typeof CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum = typeof CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum[keyof typeof CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum];
/**
* Custom field data - dropdrown.
*/
export declare class CustomFieldCreateRequestDropdownAllOf {
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: CustomFieldCreateRequestDropdownAllOfAllowOtherValueEnum;
    /**
    * A list of the allowed values of the custom field with a flag controlling whether the value is selected by default. The values will be dispayed in the UI in the order in which they were provided.
    */
    'allowed_values'?: Array<CustomFieldCreateRequestDropdownAllOfAllowedValues>;
    /**
    * When set to 1 the allowed values of the dropdown cannot be changed per board.
    */
    'allowed_values_are_locked'?: CustomFieldCreateRequestDropdownAllOfAllowedValuesAreLockedEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestDropdownAllOfDisplayWidthEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestDropdownAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the value is selected by default.
 * @export
 * @type CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum
 */
export declare const CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum = typeof CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum[keyof typeof CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum];
export declare class CustomFieldCreateRequestDropdownAllOfAllowedValues {
    /**
    * Controls whether the value is selected by default.
    */
    'is_default'?: CustomFieldCreateRequestDropdownAllOfAllowedValuesIsDefaultEnum;
    /**
    * The value.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestDropdownAllOfAllowedValues>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestFileAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestFileAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestFileAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestFileAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestFileAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestFileAvailabilityEnum
 */
export declare const CustomFieldCreateRequestFileAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestFileAvailabilityEnum = typeof CustomFieldCreateRequestFileAvailabilityEnum[keyof typeof CustomFieldCreateRequestFileAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestFileIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestFileIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestFileIsAlwaysPresentEnum = typeof CustomFieldCreateRequestFileIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestFileIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestFileIsEnabledEnum
 */
export declare const CustomFieldCreateRequestFileIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestFileIsEnabledEnum = typeof CustomFieldCreateRequestFileIsEnabledEnum[keyof typeof CustomFieldCreateRequestFileIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestFileIsImmutableEnum
 */
export declare const CustomFieldCreateRequestFileIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestFileIsImmutableEnum = typeof CustomFieldCreateRequestFileIsImmutableEnum[keyof typeof CustomFieldCreateRequestFileIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestFileTypeEnum
 */
export declare const CustomFieldCreateRequestFileTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestFileTypeEnum = typeof CustomFieldCreateRequestFileTypeEnum[keyof typeof CustomFieldCreateRequestFileTypeEnum];
export declare class CustomFieldCreateRequestFile {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestFileAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestFileAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestFileIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestFileIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestFileIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestFileTypeEnum;
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - file.
*/
export declare class CustomFieldCreateRequestFileAllOf {
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestFileAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestLinkAvailabilityEnum
 */
export declare const CustomFieldCreateRequestLinkAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestLinkAvailabilityEnum = typeof CustomFieldCreateRequestLinkAvailabilityEnum[keyof typeof CustomFieldCreateRequestLinkAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestLinkIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestLinkIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkIsAlwaysPresentEnum = typeof CustomFieldCreateRequestLinkIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestLinkIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestLinkIsEnabledEnum
 */
export declare const CustomFieldCreateRequestLinkIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkIsEnabledEnum = typeof CustomFieldCreateRequestLinkIsEnabledEnum[keyof typeof CustomFieldCreateRequestLinkIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestLinkIsImmutableEnum
 */
export declare const CustomFieldCreateRequestLinkIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkIsImmutableEnum = typeof CustomFieldCreateRequestLinkIsImmutableEnum[keyof typeof CustomFieldCreateRequestLinkIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestLinkTypeEnum
 */
export declare const CustomFieldCreateRequestLinkTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestLinkTypeEnum = typeof CustomFieldCreateRequestLinkTypeEnum[keyof typeof CustomFieldCreateRequestLinkTypeEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestLinkDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestLinkDisplayWidthEnum = typeof CustomFieldCreateRequestLinkDisplayWidthEnum[keyof typeof CustomFieldCreateRequestLinkDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestLinkValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkValueIsRequiredEnum = typeof CustomFieldCreateRequestLinkValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestLinkValueIsRequiredEnum];
export declare class CustomFieldCreateRequestLink {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestLinkAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestLinkAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestLinkIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestLinkIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestLinkIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestLinkTypeEnum;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestLinkDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestLinkAllOfDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestLinkAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestLinkAllOfDisplayWidthEnum = typeof CustomFieldCreateRequestLinkAllOfDisplayWidthEnum[keyof typeof CustomFieldCreateRequestLinkAllOfDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum = typeof CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum];
/**
* Custom field data - link.
*/
export declare class CustomFieldCreateRequestLinkAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestLinkAllOfDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestLinkAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestLinkAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestMultiLineAvailabilityEnum
 */
export declare const CustomFieldCreateRequestMultiLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestMultiLineAvailabilityEnum = typeof CustomFieldCreateRequestMultiLineAvailabilityEnum[keyof typeof CustomFieldCreateRequestMultiLineAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum = typeof CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestMultiLineIsEnabledEnum
 */
export declare const CustomFieldCreateRequestMultiLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineIsEnabledEnum = typeof CustomFieldCreateRequestMultiLineIsEnabledEnum[keyof typeof CustomFieldCreateRequestMultiLineIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestMultiLineIsImmutableEnum
 */
export declare const CustomFieldCreateRequestMultiLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineIsImmutableEnum = typeof CustomFieldCreateRequestMultiLineIsImmutableEnum[keyof typeof CustomFieldCreateRequestMultiLineIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestMultiLineTypeEnum
 */
export declare const CustomFieldCreateRequestMultiLineTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestMultiLineTypeEnum = typeof CustomFieldCreateRequestMultiLineTypeEnum[keyof typeof CustomFieldCreateRequestMultiLineTypeEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestMultiLineValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestMultiLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineValueIsRequiredEnum = typeof CustomFieldCreateRequestMultiLineValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestMultiLineValueIsRequiredEnum];
/**
 * Controls whether the value of the custom field will be interpreted as html.
 * @export
 * @type CustomFieldCreateRequestMultiLineValueIsRichTextEnum
 */
export declare const CustomFieldCreateRequestMultiLineValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineValueIsRichTextEnum = typeof CustomFieldCreateRequestMultiLineValueIsRichTextEnum[keyof typeof CustomFieldCreateRequestMultiLineValueIsRichTextEnum];
export declare class CustomFieldCreateRequestMultiLine {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestMultiLineAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestMultiLineAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestMultiLineIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestMultiLineIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestMultiLineIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestMultiLineTypeEnum;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestMultiLineValueIsRequiredEnum;
    /**
    * Controls whether the value of the custom field will be interpreted as html.
    */
    'value_is_rich_text'?: CustomFieldCreateRequestMultiLineValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum = typeof CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum];
/**
 * Controls whether the value of the custom field will be interpreted as html.
 * @export
 * @type CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum
 */
export declare const CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum = typeof CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum[keyof typeof CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum];
/**
* Custom field data - multi-line text.
*/
export declare class CustomFieldCreateRequestMultiLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestMultiLineAllOfValueIsRequiredEnum;
    /**
    * Controls whether the value of the custom field will be interpreted as html.
    */
    'value_is_rich_text'?: CustomFieldCreateRequestMultiLineAllOfValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestMultiLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestNumberAvailabilityEnum
 */
export declare const CustomFieldCreateRequestNumberAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestNumberAvailabilityEnum = typeof CustomFieldCreateRequestNumberAvailabilityEnum[keyof typeof CustomFieldCreateRequestNumberAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestNumberIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestNumberIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberIsAlwaysPresentEnum = typeof CustomFieldCreateRequestNumberIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestNumberIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestNumberIsEnabledEnum
 */
export declare const CustomFieldCreateRequestNumberIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberIsEnabledEnum = typeof CustomFieldCreateRequestNumberIsEnabledEnum[keyof typeof CustomFieldCreateRequestNumberIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestNumberIsImmutableEnum
 */
export declare const CustomFieldCreateRequestNumberIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberIsImmutableEnum = typeof CustomFieldCreateRequestNumberIsImmutableEnum[keyof typeof CustomFieldCreateRequestNumberIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestNumberTypeEnum
 */
export declare const CustomFieldCreateRequestNumberTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestNumberTypeEnum = typeof CustomFieldCreateRequestNumberTypeEnum[keyof typeof CustomFieldCreateRequestNumberTypeEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestNumberDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestNumberDisplayWidthEnum = typeof CustomFieldCreateRequestNumberDisplayWidthEnum[keyof typeof CustomFieldCreateRequestNumberDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldCreateRequestNumberUniquenessOfValuesEnum
 */
export declare const CustomFieldCreateRequestNumberUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestNumberUniquenessOfValuesEnum = typeof CustomFieldCreateRequestNumberUniquenessOfValuesEnum[keyof typeof CustomFieldCreateRequestNumberUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestNumberValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberValueIsRequiredEnum = typeof CustomFieldCreateRequestNumberValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestNumberValueIsRequiredEnum];
export declare class CustomFieldCreateRequestNumber {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestNumberAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestNumberAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestNumberIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestNumberIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestNumberIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestNumberTypeEnum;
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestNumberDisplayWidthEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldCreateRequestNumberUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestNumberAllOfDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestNumberAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestNumberAllOfDisplayWidthEnum = typeof CustomFieldCreateRequestNumberAllOfDisplayWidthEnum[keyof typeof CustomFieldCreateRequestNumberAllOfDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum
 */
export declare const CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum = typeof CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum[keyof typeof CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum = typeof CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum];
/**
* Custom field data - number.
*/
export declare class CustomFieldCreateRequestNumberAllOf {
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestNumberAllOfDisplayWidthEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldCreateRequestNumberAllOfUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestNumberAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestNumberAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestSingleLineAvailabilityEnum
 */
export declare const CustomFieldCreateRequestSingleLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestSingleLineAvailabilityEnum = typeof CustomFieldCreateRequestSingleLineAvailabilityEnum[keyof typeof CustomFieldCreateRequestSingleLineAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum = typeof CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestSingleLineIsEnabledEnum
 */
export declare const CustomFieldCreateRequestSingleLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineIsEnabledEnum = typeof CustomFieldCreateRequestSingleLineIsEnabledEnum[keyof typeof CustomFieldCreateRequestSingleLineIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestSingleLineIsImmutableEnum
 */
export declare const CustomFieldCreateRequestSingleLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineIsImmutableEnum = typeof CustomFieldCreateRequestSingleLineIsImmutableEnum[keyof typeof CustomFieldCreateRequestSingleLineIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestSingleLineTypeEnum
 */
export declare const CustomFieldCreateRequestSingleLineTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestSingleLineTypeEnum = typeof CustomFieldCreateRequestSingleLineTypeEnum[keyof typeof CustomFieldCreateRequestSingleLineTypeEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestSingleLineDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestSingleLineDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestSingleLineDisplayWidthEnum = typeof CustomFieldCreateRequestSingleLineDisplayWidthEnum[keyof typeof CustomFieldCreateRequestSingleLineDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum
 */
export declare const CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum = typeof CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum[keyof typeof CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestSingleLineValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestSingleLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineValueIsRequiredEnum = typeof CustomFieldCreateRequestSingleLineValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestSingleLineValueIsRequiredEnum];
export declare class CustomFieldCreateRequestSingleLine {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestSingleLineAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestSingleLineAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestSingleLineIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestSingleLineIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestSingleLineIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestSingleLineTypeEnum;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestSingleLineDisplayWidthEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldCreateRequestSingleLineUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestSingleLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum
 */
export declare const CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum = typeof CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum[keyof typeof CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum
 */
export declare const CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum = typeof CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum[keyof typeof CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum
 */
export declare const CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum = typeof CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum[keyof typeof CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum];
/**
* Custom field data - single-line text.
*/
export declare class CustomFieldCreateRequestSingleLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldCreateRequestSingleLineAllOfDisplayWidthEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldCreateRequestSingleLineAllOfUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldCreateRequestSingleLineAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestSingleLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the custom field properties are locked and cannot be changed per board.
 * @export
 * @type CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum
 */
export declare const CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum = typeof CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum[keyof typeof CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldCreateRequestVoteAvailabilityEnum
 */
export declare const CustomFieldCreateRequestVoteAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldCreateRequestVoteAvailabilityEnum = typeof CustomFieldCreateRequestVoteAvailabilityEnum[keyof typeof CustomFieldCreateRequestVoteAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldCreateRequestVoteIsAlwaysPresentEnum
 */
export declare const CustomFieldCreateRequestVoteIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteIsAlwaysPresentEnum = typeof CustomFieldCreateRequestVoteIsAlwaysPresentEnum[keyof typeof CustomFieldCreateRequestVoteIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldCreateRequestVoteIsEnabledEnum
 */
export declare const CustomFieldCreateRequestVoteIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteIsEnabledEnum = typeof CustomFieldCreateRequestVoteIsEnabledEnum[keyof typeof CustomFieldCreateRequestVoteIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldCreateRequestVoteIsImmutableEnum
 */
export declare const CustomFieldCreateRequestVoteIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteIsImmutableEnum = typeof CustomFieldCreateRequestVoteIsImmutableEnum[keyof typeof CustomFieldCreateRequestVoteIsImmutableEnum];
/**
 * The type of the custom field.
 * @export
 * @type CustomFieldCreateRequestVoteTypeEnum
 */
export declare const CustomFieldCreateRequestVoteTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldCreateRequestVoteTypeEnum = typeof CustomFieldCreateRequestVoteTypeEnum[keyof typeof CustomFieldCreateRequestVoteTypeEnum];
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type CustomFieldCreateRequestVoteCommentIsRequiredEnum
 */
export declare const CustomFieldCreateRequestVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteCommentIsRequiredEnum = typeof CustomFieldCreateRequestVoteCommentIsRequiredEnum[keyof typeof CustomFieldCreateRequestVoteCommentIsRequiredEnum];
export declare class CustomFieldCreateRequestVote {
    /**
    * Controls whether the custom field properties are locked and cannot be changed per board.
    */
    'all_properties_are_locked'?: CustomFieldCreateRequestVoteAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldCreateRequestVoteAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldCreateRequestVoteIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldCreateRequestVoteIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldCreateRequestVoteIsImmutableEnum;
    /**
    * The name of the new custom field.
    */
    'name': string;
    /**
    * The type of the custom field.
    */
    'type': CustomFieldCreateRequestVoteTypeEnum;
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: CustomFieldCreateRequestVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum
 */
export declare const CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum = typeof CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum[keyof typeof CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum];
/**
* Custom field data - vote.
*/
export declare class CustomFieldCreateRequestVoteAllOf {
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: CustomFieldCreateRequestVoteAllOfCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldCreateRequestVoteAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataCardPickerAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataCardPickerAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerAllPropertiesAreLockedEnum = typeof CustomFieldDataCardPickerAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataCardPickerAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerAvailabilityEnum
 */
export declare const CustomFieldDataCardPickerAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataCardPickerAvailabilityEnum = typeof CustomFieldDataCardPickerAvailabilityEnum[keyof typeof CustomFieldDataCardPickerAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerIsAlwaysPresentEnum
 */
export declare const CustomFieldDataCardPickerIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerIsAlwaysPresentEnum = typeof CustomFieldDataCardPickerIsAlwaysPresentEnum[keyof typeof CustomFieldDataCardPickerIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerIsEnabledEnum
 */
export declare const CustomFieldDataCardPickerIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerIsEnabledEnum = typeof CustomFieldDataCardPickerIsEnabledEnum[keyof typeof CustomFieldDataCardPickerIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerIsImmutableEnum
 */
export declare const CustomFieldDataCardPickerIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerIsImmutableEnum = typeof CustomFieldDataCardPickerIsImmutableEnum[keyof typeof CustomFieldDataCardPickerIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerTypeEnum
 */
export declare const CustomFieldDataCardPickerTypeEnum: {
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldDataCardPickerTypeEnum = typeof CustomFieldDataCardPickerTypeEnum[keyof typeof CustomFieldDataCardPickerTypeEnum];
export declare class CustomFieldDataCardPicker {
    'all_properties_are_locked'?: CustomFieldDataCardPickerAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataCardPickerAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataCardPickerIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataCardPickerIsEnabledEnum;
    'is_immutable'?: CustomFieldDataCardPickerIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataCardPickerTypeEnum;
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataCardPickerWithFieldIdAvailabilityEnum = typeof CustomFieldDataCardPickerWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerWithFieldIdIsEnabledEnum = typeof CustomFieldDataCardPickerWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCardPickerWithFieldIdIsImmutableEnum = typeof CustomFieldDataCardPickerWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataCardPickerWithFieldIdTypeEnum
 */
export declare const CustomFieldDataCardPickerWithFieldIdTypeEnum: {
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldDataCardPickerWithFieldIdTypeEnum = typeof CustomFieldDataCardPickerWithFieldIdTypeEnum[keyof typeof CustomFieldDataCardPickerWithFieldIdTypeEnum];
export declare class CustomFieldDataCardPickerWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataCardPickerWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataCardPickerWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataCardPickerWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataCardPickerWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataCardPickerWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataCardPickerWithFieldIdTypeEnum;
    'max_number_of_selected_cards'?: number;
    'min_number_of_selected_cards'?: number;
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataCardPickerWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataCommonAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataCommonAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCommonAllPropertiesAreLockedEnum = typeof CustomFieldDataCommonAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataCommonAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataCommonAvailabilityEnum
 */
export declare const CustomFieldDataCommonAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataCommonAvailabilityEnum = typeof CustomFieldDataCommonAvailabilityEnum[keyof typeof CustomFieldDataCommonAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataCommonIsAlwaysPresentEnum
 */
export declare const CustomFieldDataCommonIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCommonIsAlwaysPresentEnum = typeof CustomFieldDataCommonIsAlwaysPresentEnum[keyof typeof CustomFieldDataCommonIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataCommonIsEnabledEnum
 */
export declare const CustomFieldDataCommonIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCommonIsEnabledEnum = typeof CustomFieldDataCommonIsEnabledEnum[keyof typeof CustomFieldDataCommonIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataCommonIsImmutableEnum
 */
export declare const CustomFieldDataCommonIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataCommonIsImmutableEnum = typeof CustomFieldDataCommonIsImmutableEnum[keyof typeof CustomFieldDataCommonIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataCommonTypeEnum
 */
export declare const CustomFieldDataCommonTypeEnum: {
    readonly SingleLineText: "single_line_text";
    readonly MultiLineText: "multi_line_text";
    readonly Number: "number";
    readonly Date: "date";
    readonly Link: "link";
    readonly Dropdown: "dropdown";
    readonly Contributor: "contributor";
    readonly File: "file";
    readonly Vote: "vote";
    readonly CardPicker: "card_picker";
};
export declare type CustomFieldDataCommonTypeEnum = typeof CustomFieldDataCommonTypeEnum[keyof typeof CustomFieldDataCommonTypeEnum];
/**
* Custom field data
*/
export declare class CustomFieldDataCommon {
    'all_properties_are_locked'?: CustomFieldDataCommonAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataCommonAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataCommonIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataCommonIsEnabledEnum;
    'is_immutable'?: CustomFieldDataCommonIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataCommonTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataContributorAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataContributorAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorAllPropertiesAreLockedEnum = typeof CustomFieldDataContributorAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataContributorAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorAvailabilityEnum
 */
export declare const CustomFieldDataContributorAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataContributorAvailabilityEnum = typeof CustomFieldDataContributorAvailabilityEnum[keyof typeof CustomFieldDataContributorAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorIsAlwaysPresentEnum
 */
export declare const CustomFieldDataContributorIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorIsAlwaysPresentEnum = typeof CustomFieldDataContributorIsAlwaysPresentEnum[keyof typeof CustomFieldDataContributorIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorIsEnabledEnum
 */
export declare const CustomFieldDataContributorIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorIsEnabledEnum = typeof CustomFieldDataContributorIsEnabledEnum[keyof typeof CustomFieldDataContributorIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorIsImmutableEnum
 */
export declare const CustomFieldDataContributorIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorIsImmutableEnum = typeof CustomFieldDataContributorIsImmutableEnum[keyof typeof CustomFieldDataContributorIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorTypeEnum
 */
export declare const CustomFieldDataContributorTypeEnum: {
    readonly Contributor: "contributor";
};
export declare type CustomFieldDataContributorTypeEnum = typeof CustomFieldDataContributorTypeEnum[keyof typeof CustomFieldDataContributorTypeEnum];
export declare class CustomFieldDataContributor {
    'all_properties_are_locked'?: CustomFieldDataContributorAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataContributorAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataContributorIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataContributorIsEnabledEnum;
    'is_immutable'?: CustomFieldDataContributorIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataContributorTypeEnum;
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataContributorWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataContributorWithFieldIdAvailabilityEnum = typeof CustomFieldDataContributorWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataContributorWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataContributorWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorWithFieldIdIsEnabledEnum = typeof CustomFieldDataContributorWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataContributorWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataContributorWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataContributorWithFieldIdIsImmutableEnum = typeof CustomFieldDataContributorWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataContributorWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataContributorWithFieldIdTypeEnum
 */
export declare const CustomFieldDataContributorWithFieldIdTypeEnum: {
    readonly Contributor: "contributor";
};
export declare type CustomFieldDataContributorWithFieldIdTypeEnum = typeof CustomFieldDataContributorWithFieldIdTypeEnum[keyof typeof CustomFieldDataContributorWithFieldIdTypeEnum];
export declare class CustomFieldDataContributorWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataContributorWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataContributorWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataContributorWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataContributorWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataContributorWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataContributorWithFieldIdTypeEnum;
    'max_number_of_contributors'?: number;
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataContributorWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataDateAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataDateAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateAllPropertiesAreLockedEnum = typeof CustomFieldDataDateAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataDateAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateAvailabilityEnum
 */
export declare const CustomFieldDataDateAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDateAvailabilityEnum = typeof CustomFieldDataDateAvailabilityEnum[keyof typeof CustomFieldDataDateAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateIsAlwaysPresentEnum
 */
export declare const CustomFieldDataDateIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateIsAlwaysPresentEnum = typeof CustomFieldDataDateIsAlwaysPresentEnum[keyof typeof CustomFieldDataDateIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateIsEnabledEnum
 */
export declare const CustomFieldDataDateIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateIsEnabledEnum = typeof CustomFieldDataDateIsEnabledEnum[keyof typeof CustomFieldDataDateIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateIsImmutableEnum
 */
export declare const CustomFieldDataDateIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateIsImmutableEnum = typeof CustomFieldDataDateIsImmutableEnum[keyof typeof CustomFieldDataDateIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateTypeEnum
 */
export declare const CustomFieldDataDateTypeEnum: {
    readonly Date: "date";
};
export declare type CustomFieldDataDateTypeEnum = typeof CustomFieldDataDateTypeEnum[keyof typeof CustomFieldDataDateTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateDisplayWidthEnum
 */
export declare const CustomFieldDataDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDateDisplayWidthEnum = typeof CustomFieldDataDateDisplayWidthEnum[keyof typeof CustomFieldDataDateDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateValueIsRequiredEnum
 */
export declare const CustomFieldDataDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateValueIsRequiredEnum = typeof CustomFieldDataDateValueIsRequiredEnum[keyof typeof CustomFieldDataDateValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateValueWithTimeEnum
 */
export declare const CustomFieldDataDateValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateValueWithTimeEnum = typeof CustomFieldDataDateValueWithTimeEnum[keyof typeof CustomFieldDataDateValueWithTimeEnum];
export declare class CustomFieldDataDate {
    'all_properties_are_locked'?: CustomFieldDataDateAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataDateAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataDateIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataDateIsEnabledEnum;
    'is_immutable'?: CustomFieldDataDateIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataDateTypeEnum;
    'default_value'?: number;
    'display_width'?: CustomFieldDataDateDisplayWidthEnum;
    'value_is_required'?: CustomFieldDataDateValueIsRequiredEnum;
    'value_with_time'?: CustomFieldDataDateValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataDateWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDateWithFieldIdAvailabilityEnum = typeof CustomFieldDataDateWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataDateWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataDateWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdIsEnabledEnum = typeof CustomFieldDataDateWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataDateWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataDateWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdIsImmutableEnum = typeof CustomFieldDataDateWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataDateWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdTypeEnum
 */
export declare const CustomFieldDataDateWithFieldIdTypeEnum: {
    readonly Date: "date";
};
export declare type CustomFieldDataDateWithFieldIdTypeEnum = typeof CustomFieldDataDateWithFieldIdTypeEnum[keyof typeof CustomFieldDataDateWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdDisplayWidthEnum
 */
export declare const CustomFieldDataDateWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDateWithFieldIdDisplayWidthEnum = typeof CustomFieldDataDateWithFieldIdDisplayWidthEnum[keyof typeof CustomFieldDataDateWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdValueIsRequiredEnum
 */
export declare const CustomFieldDataDateWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdValueIsRequiredEnum = typeof CustomFieldDataDateWithFieldIdValueIsRequiredEnum[keyof typeof CustomFieldDataDateWithFieldIdValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldDataDateWithFieldIdValueWithTimeEnum
 */
export declare const CustomFieldDataDateWithFieldIdValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDateWithFieldIdValueWithTimeEnum = typeof CustomFieldDataDateWithFieldIdValueWithTimeEnum[keyof typeof CustomFieldDataDateWithFieldIdValueWithTimeEnum];
export declare class CustomFieldDataDateWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataDateWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataDateWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataDateWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataDateWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataDateWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataDateWithFieldIdTypeEnum;
    'default_value'?: number;
    'display_width'?: CustomFieldDataDateWithFieldIdDisplayWidthEnum;
    'value_is_required'?: CustomFieldDataDateWithFieldIdValueIsRequiredEnum;
    'value_with_time'?: CustomFieldDataDateWithFieldIdValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataDateWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataDropdownAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataDropdownAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownAllPropertiesAreLockedEnum = typeof CustomFieldDataDropdownAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataDropdownAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownAvailabilityEnum
 */
export declare const CustomFieldDataDropdownAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDropdownAvailabilityEnum = typeof CustomFieldDataDropdownAvailabilityEnum[keyof typeof CustomFieldDataDropdownAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownIsAlwaysPresentEnum
 */
export declare const CustomFieldDataDropdownIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownIsAlwaysPresentEnum = typeof CustomFieldDataDropdownIsAlwaysPresentEnum[keyof typeof CustomFieldDataDropdownIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownIsEnabledEnum
 */
export declare const CustomFieldDataDropdownIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownIsEnabledEnum = typeof CustomFieldDataDropdownIsEnabledEnum[keyof typeof CustomFieldDataDropdownIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownIsImmutableEnum
 */
export declare const CustomFieldDataDropdownIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownIsImmutableEnum = typeof CustomFieldDataDropdownIsImmutableEnum[keyof typeof CustomFieldDataDropdownIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownTypeEnum
 */
export declare const CustomFieldDataDropdownTypeEnum: {
    readonly Dropdown: "dropdown";
};
export declare type CustomFieldDataDropdownTypeEnum = typeof CustomFieldDataDropdownTypeEnum[keyof typeof CustomFieldDataDropdownTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownAllowOtherValueEnum
 */
export declare const CustomFieldDataDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownAllowOtherValueEnum = typeof CustomFieldDataDropdownAllowOtherValueEnum[keyof typeof CustomFieldDataDropdownAllowOtherValueEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownAllowedValuesAreLockedEnum
 */
export declare const CustomFieldDataDropdownAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownAllowedValuesAreLockedEnum = typeof CustomFieldDataDropdownAllowedValuesAreLockedEnum[keyof typeof CustomFieldDataDropdownAllowedValuesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownDisplayWidthEnum
 */
export declare const CustomFieldDataDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDropdownDisplayWidthEnum = typeof CustomFieldDataDropdownDisplayWidthEnum[keyof typeof CustomFieldDataDropdownDisplayWidthEnum];
export declare class CustomFieldDataDropdown {
    'all_properties_are_locked'?: CustomFieldDataDropdownAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataDropdownAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataDropdownIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataDropdownIsEnabledEnum;
    'is_immutable'?: CustomFieldDataDropdownIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataDropdownTypeEnum;
    'allow_other_value'?: CustomFieldDataDropdownAllowOtherValueEnum;
    'allowed_values'?: Array<CustomFieldDropdownAllowedValues>;
    'allowed_values_are_locked'?: CustomFieldDataDropdownAllowedValuesAreLockedEnum;
    'display_width'?: CustomFieldDataDropdownDisplayWidthEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDropdownWithFieldIdAvailabilityEnum = typeof CustomFieldDataDropdownWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataDropdownWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdIsEnabledEnum = typeof CustomFieldDataDropdownWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataDropdownWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdIsImmutableEnum = typeof CustomFieldDataDropdownWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataDropdownWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdTypeEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdTypeEnum: {
    readonly Dropdown: "dropdown";
};
export declare type CustomFieldDataDropdownWithFieldIdTypeEnum = typeof CustomFieldDataDropdownWithFieldIdTypeEnum[keyof typeof CustomFieldDataDropdownWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum = typeof CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum[keyof typeof CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum = typeof CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum[keyof typeof CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataDropdownWithFieldIdDisplayWidthEnum
 */
export declare const CustomFieldDataDropdownWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataDropdownWithFieldIdDisplayWidthEnum = typeof CustomFieldDataDropdownWithFieldIdDisplayWidthEnum[keyof typeof CustomFieldDataDropdownWithFieldIdDisplayWidthEnum];
export declare class CustomFieldDataDropdownWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataDropdownWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataDropdownWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataDropdownWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataDropdownWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataDropdownWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataDropdownWithFieldIdTypeEnum;
    'allow_other_value'?: CustomFieldDataDropdownWithFieldIdAllowOtherValueEnum;
    'allowed_values'?: Array<CustomFieldDropdownAllowedValues>;
    'allowed_values_are_locked'?: CustomFieldDataDropdownWithFieldIdAllowedValuesAreLockedEnum;
    'display_width'?: CustomFieldDataDropdownWithFieldIdDisplayWidthEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataDropdownWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataFileAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataFileAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileAllPropertiesAreLockedEnum = typeof CustomFieldDataFileAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataFileAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileAvailabilityEnum
 */
export declare const CustomFieldDataFileAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataFileAvailabilityEnum = typeof CustomFieldDataFileAvailabilityEnum[keyof typeof CustomFieldDataFileAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileIsAlwaysPresentEnum
 */
export declare const CustomFieldDataFileIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileIsAlwaysPresentEnum = typeof CustomFieldDataFileIsAlwaysPresentEnum[keyof typeof CustomFieldDataFileIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileIsEnabledEnum
 */
export declare const CustomFieldDataFileIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileIsEnabledEnum = typeof CustomFieldDataFileIsEnabledEnum[keyof typeof CustomFieldDataFileIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileIsImmutableEnum
 */
export declare const CustomFieldDataFileIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileIsImmutableEnum = typeof CustomFieldDataFileIsImmutableEnum[keyof typeof CustomFieldDataFileIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileTypeEnum
 */
export declare const CustomFieldDataFileTypeEnum: {
    readonly File: "file";
};
export declare type CustomFieldDataFileTypeEnum = typeof CustomFieldDataFileTypeEnum[keyof typeof CustomFieldDataFileTypeEnum];
export declare class CustomFieldDataFile {
    'all_properties_are_locked'?: CustomFieldDataFileAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataFileAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataFileIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataFileIsEnabledEnum;
    'is_immutable'?: CustomFieldDataFileIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataFileTypeEnum;
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataFile>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataFileWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataFileWithFieldIdAvailabilityEnum = typeof CustomFieldDataFileWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataFileWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataFileWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileWithFieldIdIsEnabledEnum = typeof CustomFieldDataFileWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataFileWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataFileWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataFileWithFieldIdIsImmutableEnum = typeof CustomFieldDataFileWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataFileWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataFileWithFieldIdTypeEnum
 */
export declare const CustomFieldDataFileWithFieldIdTypeEnum: {
    readonly File: "file";
};
export declare type CustomFieldDataFileWithFieldIdTypeEnum = typeof CustomFieldDataFileWithFieldIdTypeEnum[keyof typeof CustomFieldDataFileWithFieldIdTypeEnum];
export declare class CustomFieldDataFileWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataFileWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataFileWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataFileWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataFileWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataFileWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataFileWithFieldIdTypeEnum;
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataFileWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataLinkAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataLinkAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkAllPropertiesAreLockedEnum = typeof CustomFieldDataLinkAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataLinkAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkAvailabilityEnum
 */
export declare const CustomFieldDataLinkAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataLinkAvailabilityEnum = typeof CustomFieldDataLinkAvailabilityEnum[keyof typeof CustomFieldDataLinkAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkIsAlwaysPresentEnum
 */
export declare const CustomFieldDataLinkIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkIsAlwaysPresentEnum = typeof CustomFieldDataLinkIsAlwaysPresentEnum[keyof typeof CustomFieldDataLinkIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkIsEnabledEnum
 */
export declare const CustomFieldDataLinkIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkIsEnabledEnum = typeof CustomFieldDataLinkIsEnabledEnum[keyof typeof CustomFieldDataLinkIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkIsImmutableEnum
 */
export declare const CustomFieldDataLinkIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkIsImmutableEnum = typeof CustomFieldDataLinkIsImmutableEnum[keyof typeof CustomFieldDataLinkIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkTypeEnum
 */
export declare const CustomFieldDataLinkTypeEnum: {
    readonly Link: "link";
};
export declare type CustomFieldDataLinkTypeEnum = typeof CustomFieldDataLinkTypeEnum[keyof typeof CustomFieldDataLinkTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkDisplayWidthEnum
 */
export declare const CustomFieldDataLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataLinkDisplayWidthEnum = typeof CustomFieldDataLinkDisplayWidthEnum[keyof typeof CustomFieldDataLinkDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkValueIsRequiredEnum
 */
export declare const CustomFieldDataLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkValueIsRequiredEnum = typeof CustomFieldDataLinkValueIsRequiredEnum[keyof typeof CustomFieldDataLinkValueIsRequiredEnum];
export declare class CustomFieldDataLink {
    'all_properties_are_locked'?: CustomFieldDataLinkAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataLinkAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataLinkIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataLinkIsEnabledEnum;
    'is_immutable'?: CustomFieldDataLinkIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataLinkTypeEnum;
    'default_value'?: string;
    'display_width'?: CustomFieldDataLinkDisplayWidthEnum;
    'value_is_required'?: CustomFieldDataLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataLinkWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataLinkWithFieldIdAvailabilityEnum = typeof CustomFieldDataLinkWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataLinkWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataLinkWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkWithFieldIdIsEnabledEnum = typeof CustomFieldDataLinkWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataLinkWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataLinkWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkWithFieldIdIsImmutableEnum = typeof CustomFieldDataLinkWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataLinkWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdTypeEnum
 */
export declare const CustomFieldDataLinkWithFieldIdTypeEnum: {
    readonly Link: "link";
};
export declare type CustomFieldDataLinkWithFieldIdTypeEnum = typeof CustomFieldDataLinkWithFieldIdTypeEnum[keyof typeof CustomFieldDataLinkWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdDisplayWidthEnum
 */
export declare const CustomFieldDataLinkWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataLinkWithFieldIdDisplayWidthEnum = typeof CustomFieldDataLinkWithFieldIdDisplayWidthEnum[keyof typeof CustomFieldDataLinkWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataLinkWithFieldIdValueIsRequiredEnum
 */
export declare const CustomFieldDataLinkWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataLinkWithFieldIdValueIsRequiredEnum = typeof CustomFieldDataLinkWithFieldIdValueIsRequiredEnum[keyof typeof CustomFieldDataLinkWithFieldIdValueIsRequiredEnum];
export declare class CustomFieldDataLinkWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataLinkWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataLinkWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataLinkWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataLinkWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataLinkWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataLinkWithFieldIdTypeEnum;
    'default_value'?: string;
    'display_width'?: CustomFieldDataLinkWithFieldIdDisplayWidthEnum;
    'value_is_required'?: CustomFieldDataLinkWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataLinkWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataMultiLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataMultiLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineAllPropertiesAreLockedEnum = typeof CustomFieldDataMultiLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataMultiLineAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineAvailabilityEnum
 */
export declare const CustomFieldDataMultiLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataMultiLineAvailabilityEnum = typeof CustomFieldDataMultiLineAvailabilityEnum[keyof typeof CustomFieldDataMultiLineAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineIsAlwaysPresentEnum
 */
export declare const CustomFieldDataMultiLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineIsAlwaysPresentEnum = typeof CustomFieldDataMultiLineIsAlwaysPresentEnum[keyof typeof CustomFieldDataMultiLineIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineIsEnabledEnum
 */
export declare const CustomFieldDataMultiLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineIsEnabledEnum = typeof CustomFieldDataMultiLineIsEnabledEnum[keyof typeof CustomFieldDataMultiLineIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineIsImmutableEnum
 */
export declare const CustomFieldDataMultiLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineIsImmutableEnum = typeof CustomFieldDataMultiLineIsImmutableEnum[keyof typeof CustomFieldDataMultiLineIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineTypeEnum
 */
export declare const CustomFieldDataMultiLineTypeEnum: {
    readonly MultiLineText: "multi_line_text";
};
export declare type CustomFieldDataMultiLineTypeEnum = typeof CustomFieldDataMultiLineTypeEnum[keyof typeof CustomFieldDataMultiLineTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineValueIsRequiredEnum
 */
export declare const CustomFieldDataMultiLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineValueIsRequiredEnum = typeof CustomFieldDataMultiLineValueIsRequiredEnum[keyof typeof CustomFieldDataMultiLineValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineValueIsRichTextEnum
 */
export declare const CustomFieldDataMultiLineValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineValueIsRichTextEnum = typeof CustomFieldDataMultiLineValueIsRichTextEnum[keyof typeof CustomFieldDataMultiLineValueIsRichTextEnum];
export declare class CustomFieldDataMultiLine {
    'all_properties_are_locked'?: CustomFieldDataMultiLineAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataMultiLineAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataMultiLineIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataMultiLineIsEnabledEnum;
    'is_immutable'?: CustomFieldDataMultiLineIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataMultiLineTypeEnum;
    'default_value'?: string;
    'value_is_required'?: CustomFieldDataMultiLineValueIsRequiredEnum;
    'value_is_rich_text'?: CustomFieldDataMultiLineValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataMultiLineWithFieldIdAvailabilityEnum = typeof CustomFieldDataMultiLineWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdIsEnabledEnum = typeof CustomFieldDataMultiLineWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdIsImmutableEnum = typeof CustomFieldDataMultiLineWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdTypeEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdTypeEnum: {
    readonly MultiLineText: "multi_line_text";
};
export declare type CustomFieldDataMultiLineWithFieldIdTypeEnum = typeof CustomFieldDataMultiLineWithFieldIdTypeEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum = typeof CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum
 */
export declare const CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum = typeof CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum[keyof typeof CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum];
export declare class CustomFieldDataMultiLineWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataMultiLineWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataMultiLineWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataMultiLineWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataMultiLineWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataMultiLineWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataMultiLineWithFieldIdTypeEnum;
    'default_value'?: string;
    'value_is_required'?: CustomFieldDataMultiLineWithFieldIdValueIsRequiredEnum;
    'value_is_rich_text'?: CustomFieldDataMultiLineWithFieldIdValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataMultiLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataNumberAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataNumberAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberAllPropertiesAreLockedEnum = typeof CustomFieldDataNumberAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataNumberAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberAvailabilityEnum
 */
export declare const CustomFieldDataNumberAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberAvailabilityEnum = typeof CustomFieldDataNumberAvailabilityEnum[keyof typeof CustomFieldDataNumberAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberIsAlwaysPresentEnum
 */
export declare const CustomFieldDataNumberIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberIsAlwaysPresentEnum = typeof CustomFieldDataNumberIsAlwaysPresentEnum[keyof typeof CustomFieldDataNumberIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberIsEnabledEnum
 */
export declare const CustomFieldDataNumberIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberIsEnabledEnum = typeof CustomFieldDataNumberIsEnabledEnum[keyof typeof CustomFieldDataNumberIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberIsImmutableEnum
 */
export declare const CustomFieldDataNumberIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberIsImmutableEnum = typeof CustomFieldDataNumberIsImmutableEnum[keyof typeof CustomFieldDataNumberIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberTypeEnum
 */
export declare const CustomFieldDataNumberTypeEnum: {
    readonly Number: "number";
};
export declare type CustomFieldDataNumberTypeEnum = typeof CustomFieldDataNumberTypeEnum[keyof typeof CustomFieldDataNumberTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberDisplayWidthEnum
 */
export declare const CustomFieldDataNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberDisplayWidthEnum = typeof CustomFieldDataNumberDisplayWidthEnum[keyof typeof CustomFieldDataNumberDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberUniquenessOfValuesEnum
 */
export declare const CustomFieldDataNumberUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberUniquenessOfValuesEnum = typeof CustomFieldDataNumberUniquenessOfValuesEnum[keyof typeof CustomFieldDataNumberUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberValueIsRequiredEnum
 */
export declare const CustomFieldDataNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberValueIsRequiredEnum = typeof CustomFieldDataNumberValueIsRequiredEnum[keyof typeof CustomFieldDataNumberValueIsRequiredEnum];
export declare class CustomFieldDataNumber {
    'all_properties_are_locked'?: CustomFieldDataNumberAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataNumberAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataNumberIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataNumberIsEnabledEnum;
    'is_immutable'?: CustomFieldDataNumberIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataNumberTypeEnum;
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: CustomFieldDataNumberDisplayWidthEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'uniqueness_of_values'?: CustomFieldDataNumberUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldDataNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataNumberWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberWithFieldIdAvailabilityEnum = typeof CustomFieldDataNumberWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataNumberWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataNumberWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberWithFieldIdIsEnabledEnum = typeof CustomFieldDataNumberWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataNumberWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataNumberWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberWithFieldIdIsImmutableEnum = typeof CustomFieldDataNumberWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataNumberWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdTypeEnum
 */
export declare const CustomFieldDataNumberWithFieldIdTypeEnum: {
    readonly Number: "number";
};
export declare type CustomFieldDataNumberWithFieldIdTypeEnum = typeof CustomFieldDataNumberWithFieldIdTypeEnum[keyof typeof CustomFieldDataNumberWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdDisplayWidthEnum
 */
export declare const CustomFieldDataNumberWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberWithFieldIdDisplayWidthEnum = typeof CustomFieldDataNumberWithFieldIdDisplayWidthEnum[keyof typeof CustomFieldDataNumberWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum
 */
export declare const CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum = typeof CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum[keyof typeof CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldDataNumberWithFieldIdValueIsRequiredEnum
 */
export declare const CustomFieldDataNumberWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataNumberWithFieldIdValueIsRequiredEnum = typeof CustomFieldDataNumberWithFieldIdValueIsRequiredEnum[keyof typeof CustomFieldDataNumberWithFieldIdValueIsRequiredEnum];
export declare class CustomFieldDataNumberWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataNumberWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataNumberWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataNumberWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataNumberWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataNumberWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataNumberWithFieldIdTypeEnum;
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: CustomFieldDataNumberWithFieldIdDisplayWidthEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'uniqueness_of_values'?: CustomFieldDataNumberWithFieldIdUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldDataNumberWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataNumberWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataSingleLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataSingleLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineAllPropertiesAreLockedEnum = typeof CustomFieldDataSingleLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataSingleLineAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineAvailabilityEnum
 */
export declare const CustomFieldDataSingleLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineAvailabilityEnum = typeof CustomFieldDataSingleLineAvailabilityEnum[keyof typeof CustomFieldDataSingleLineAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineIsAlwaysPresentEnum
 */
export declare const CustomFieldDataSingleLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineIsAlwaysPresentEnum = typeof CustomFieldDataSingleLineIsAlwaysPresentEnum[keyof typeof CustomFieldDataSingleLineIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineIsEnabledEnum
 */
export declare const CustomFieldDataSingleLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineIsEnabledEnum = typeof CustomFieldDataSingleLineIsEnabledEnum[keyof typeof CustomFieldDataSingleLineIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineIsImmutableEnum
 */
export declare const CustomFieldDataSingleLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineIsImmutableEnum = typeof CustomFieldDataSingleLineIsImmutableEnum[keyof typeof CustomFieldDataSingleLineIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineTypeEnum
 */
export declare const CustomFieldDataSingleLineTypeEnum: {
    readonly SingleLineText: "single_line_text";
};
export declare type CustomFieldDataSingleLineTypeEnum = typeof CustomFieldDataSingleLineTypeEnum[keyof typeof CustomFieldDataSingleLineTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineDisplayWidthEnum
 */
export declare const CustomFieldDataSingleLineDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineDisplayWidthEnum = typeof CustomFieldDataSingleLineDisplayWidthEnum[keyof typeof CustomFieldDataSingleLineDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineUniquenessOfValuesEnum
 */
export declare const CustomFieldDataSingleLineUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineUniquenessOfValuesEnum = typeof CustomFieldDataSingleLineUniquenessOfValuesEnum[keyof typeof CustomFieldDataSingleLineUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineValueIsRequiredEnum
 */
export declare const CustomFieldDataSingleLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineValueIsRequiredEnum = typeof CustomFieldDataSingleLineValueIsRequiredEnum[keyof typeof CustomFieldDataSingleLineValueIsRequiredEnum];
export declare class CustomFieldDataSingleLine {
    'all_properties_are_locked'?: CustomFieldDataSingleLineAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataSingleLineAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataSingleLineIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataSingleLineIsEnabledEnum;
    'is_immutable'?: CustomFieldDataSingleLineIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataSingleLineTypeEnum;
    'default_value'?: string;
    'display_width'?: CustomFieldDataSingleLineDisplayWidthEnum;
    'prefix'?: string;
    'suffix'?: string;
    'uniqueness_of_values'?: CustomFieldDataSingleLineUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldDataSingleLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineWithFieldIdAvailabilityEnum = typeof CustomFieldDataSingleLineWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineWithFieldIdIsEnabledEnum = typeof CustomFieldDataSingleLineWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineWithFieldIdIsImmutableEnum = typeof CustomFieldDataSingleLineWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdTypeEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdTypeEnum: {
    readonly SingleLineText: "single_line_text";
};
export declare type CustomFieldDataSingleLineWithFieldIdTypeEnum = typeof CustomFieldDataSingleLineWithFieldIdTypeEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum = typeof CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum = typeof CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum
 */
export declare const CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum = typeof CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum[keyof typeof CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum];
export declare class CustomFieldDataSingleLineWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataSingleLineWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataSingleLineWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataSingleLineWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataSingleLineWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataSingleLineWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataSingleLineWithFieldIdTypeEnum;
    'default_value'?: string;
    'display_width'?: CustomFieldDataSingleLineWithFieldIdDisplayWidthEnum;
    'prefix'?: string;
    'suffix'?: string;
    'uniqueness_of_values'?: CustomFieldDataSingleLineWithFieldIdUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldDataSingleLineWithFieldIdValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataSingleLineWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataVoteAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataVoteAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteAllPropertiesAreLockedEnum = typeof CustomFieldDataVoteAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataVoteAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteAvailabilityEnum
 */
export declare const CustomFieldDataVoteAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataVoteAvailabilityEnum = typeof CustomFieldDataVoteAvailabilityEnum[keyof typeof CustomFieldDataVoteAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteIsAlwaysPresentEnum
 */
export declare const CustomFieldDataVoteIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteIsAlwaysPresentEnum = typeof CustomFieldDataVoteIsAlwaysPresentEnum[keyof typeof CustomFieldDataVoteIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteIsEnabledEnum
 */
export declare const CustomFieldDataVoteIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteIsEnabledEnum = typeof CustomFieldDataVoteIsEnabledEnum[keyof typeof CustomFieldDataVoteIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteIsImmutableEnum
 */
export declare const CustomFieldDataVoteIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteIsImmutableEnum = typeof CustomFieldDataVoteIsImmutableEnum[keyof typeof CustomFieldDataVoteIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteTypeEnum
 */
export declare const CustomFieldDataVoteTypeEnum: {
    readonly Vote: "vote";
};
export declare type CustomFieldDataVoteTypeEnum = typeof CustomFieldDataVoteTypeEnum[keyof typeof CustomFieldDataVoteTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteCommentIsRequiredEnum
 */
export declare const CustomFieldDataVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteCommentIsRequiredEnum = typeof CustomFieldDataVoteCommentIsRequiredEnum[keyof typeof CustomFieldDataVoteCommentIsRequiredEnum];
export declare class CustomFieldDataVote {
    'all_properties_are_locked'?: CustomFieldDataVoteAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataVoteAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataVoteIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataVoteIsEnabledEnum;
    'is_immutable'?: CustomFieldDataVoteIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataVoteTypeEnum;
    'comment_is_required'?: CustomFieldDataVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum
 */
export declare const CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum = typeof CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum[keyof typeof CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdAvailabilityEnum
 */
export declare const CustomFieldDataVoteWithFieldIdAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDataVoteWithFieldIdAvailabilityEnum = typeof CustomFieldDataVoteWithFieldIdAvailabilityEnum[keyof typeof CustomFieldDataVoteWithFieldIdAvailabilityEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum
 */
export declare const CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum = typeof CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum[keyof typeof CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdIsEnabledEnum
 */
export declare const CustomFieldDataVoteWithFieldIdIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteWithFieldIdIsEnabledEnum = typeof CustomFieldDataVoteWithFieldIdIsEnabledEnum[keyof typeof CustomFieldDataVoteWithFieldIdIsEnabledEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdIsImmutableEnum
 */
export declare const CustomFieldDataVoteWithFieldIdIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteWithFieldIdIsImmutableEnum = typeof CustomFieldDataVoteWithFieldIdIsImmutableEnum[keyof typeof CustomFieldDataVoteWithFieldIdIsImmutableEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdTypeEnum
 */
export declare const CustomFieldDataVoteWithFieldIdTypeEnum: {
    readonly Vote: "vote";
};
export declare type CustomFieldDataVoteWithFieldIdTypeEnum = typeof CustomFieldDataVoteWithFieldIdTypeEnum[keyof typeof CustomFieldDataVoteWithFieldIdTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum
 */
export declare const CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum = typeof CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum[keyof typeof CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum];
export declare class CustomFieldDataVoteWithFieldId {
    /**
    * Field id.
    */
    'field_id'?: number;
    'all_properties_are_locked'?: CustomFieldDataVoteWithFieldIdAllPropertiesAreLockedEnum;
    'availability'?: CustomFieldDataVoteWithFieldIdAvailabilityEnum;
    'color'?: string;
    'is_always_present'?: CustomFieldDataVoteWithFieldIdIsAlwaysPresentEnum;
    'is_enabled'?: CustomFieldDataVoteWithFieldIdIsEnabledEnum;
    'is_immutable'?: CustomFieldDataVoteWithFieldIdIsImmutableEnum;
    'name'?: string;
    'type'?: CustomFieldDataVoteWithFieldIdTypeEnum;
    'comment_is_required'?: CustomFieldDataVoteWithFieldIdCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDataVoteWithFieldId>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDateDisplayWidthEnum
 */
export declare const CustomFieldDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDateDisplayWidthEnum = typeof CustomFieldDateDisplayWidthEnum[keyof typeof CustomFieldDateDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDateTypeEnum
 */
export declare const CustomFieldDateTypeEnum: {
    readonly Date: "date";
};
export declare type CustomFieldDateTypeEnum = typeof CustomFieldDateTypeEnum[keyof typeof CustomFieldDateTypeEnum];
/**
 *
 * @export
 * @type CustomFieldDateValueIsRequiredEnum
 */
export declare const CustomFieldDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDateValueIsRequiredEnum = typeof CustomFieldDateValueIsRequiredEnum[keyof typeof CustomFieldDateValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldDateValueWithTimeEnum
 */
export declare const CustomFieldDateValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDateValueWithTimeEnum = typeof CustomFieldDateValueWithTimeEnum[keyof typeof CustomFieldDateValueWithTimeEnum];
/**
* Custom field data - date
*/
export declare class CustomFieldDate {
    'default_value'?: number;
    'display_width'?: CustomFieldDateDisplayWidthEnum;
    'type'?: CustomFieldDateTypeEnum;
    'value_is_required'?: CustomFieldDateValueIsRequiredEnum;
    'value_with_time'?: CustomFieldDateValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDropdownAllowOtherValueEnum
 */
export declare const CustomFieldDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDropdownAllowOtherValueEnum = typeof CustomFieldDropdownAllowOtherValueEnum[keyof typeof CustomFieldDropdownAllowOtherValueEnum];
/**
 *
 * @export
 * @type CustomFieldDropdownAllowedValuesAreLockedEnum
 */
export declare const CustomFieldDropdownAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDropdownAllowedValuesAreLockedEnum = typeof CustomFieldDropdownAllowedValuesAreLockedEnum[keyof typeof CustomFieldDropdownAllowedValuesAreLockedEnum];
/**
 *
 * @export
 * @type CustomFieldDropdownDisplayWidthEnum
 */
export declare const CustomFieldDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldDropdownDisplayWidthEnum = typeof CustomFieldDropdownDisplayWidthEnum[keyof typeof CustomFieldDropdownDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldDropdownTypeEnum
 */
export declare const CustomFieldDropdownTypeEnum: {
    readonly Dropdown: "dropdown";
};
export declare type CustomFieldDropdownTypeEnum = typeof CustomFieldDropdownTypeEnum[keyof typeof CustomFieldDropdownTypeEnum];
/**
* Custom field data - dropdown
*/
export declare class CustomFieldDropdown {
    'allow_other_value'?: CustomFieldDropdownAllowOtherValueEnum;
    'allowed_values'?: Array<CustomFieldDropdownAllowedValues>;
    'allowed_values_are_locked'?: CustomFieldDropdownAllowedValuesAreLockedEnum;
    'display_width'?: CustomFieldDropdownDisplayWidthEnum;
    'max_number_of_values'?: number;
    'min_number_of_values'?: number;
    'type'?: CustomFieldDropdownTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldDropdownAllowedValuesIsDefaultEnum
 */
export declare const CustomFieldDropdownAllowedValuesIsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldDropdownAllowedValuesIsDefaultEnum = typeof CustomFieldDropdownAllowedValuesIsDefaultEnum[keyof typeof CustomFieldDropdownAllowedValuesIsDefaultEnum];
export declare class CustomFieldDropdownAllowedValues {
    'is_default'?: CustomFieldDropdownAllowedValuesIsDefaultEnum;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldDropdownAllowedValues>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldFileTypeEnum
 */
export declare const CustomFieldFileTypeEnum: {
    readonly File: "file";
};
export declare type CustomFieldFileTypeEnum = typeof CustomFieldFileTypeEnum[keyof typeof CustomFieldFileTypeEnum];
/**
* Custom field data - file
*/
export declare class CustomFieldFile {
    'max_number_of_files'?: number;
    'min_number_of_files'?: number;
    'type'?: CustomFieldFileTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an user management action is executed on Custom Fields
*/
export declare class CustomFieldHistoryEvent {
    'event_type'?: string;
    'field_id'?: number;
    'history_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldLinkDisplayWidthEnum
 */
export declare const CustomFieldLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldLinkDisplayWidthEnum = typeof CustomFieldLinkDisplayWidthEnum[keyof typeof CustomFieldLinkDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldLinkTypeEnum
 */
export declare const CustomFieldLinkTypeEnum: {
    readonly Link: "link";
};
export declare type CustomFieldLinkTypeEnum = typeof CustomFieldLinkTypeEnum[keyof typeof CustomFieldLinkTypeEnum];
/**
 *
 * @export
 * @type CustomFieldLinkValueIsRequiredEnum
 */
export declare const CustomFieldLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldLinkValueIsRequiredEnum = typeof CustomFieldLinkValueIsRequiredEnum[keyof typeof CustomFieldLinkValueIsRequiredEnum];
/**
* Custom field data - link
*/
export declare class CustomFieldLink {
    'default_value'?: string;
    'display_width'?: CustomFieldLinkDisplayWidthEnum;
    'type'?: CustomFieldLinkTypeEnum;
    'value_is_required'?: CustomFieldLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldMultiLineTextTypeEnum
 */
export declare const CustomFieldMultiLineTextTypeEnum: {
    readonly MultiLineText: "multi_line_text";
};
export declare type CustomFieldMultiLineTextTypeEnum = typeof CustomFieldMultiLineTextTypeEnum[keyof typeof CustomFieldMultiLineTextTypeEnum];
/**
 *
 * @export
 * @type CustomFieldMultiLineTextValueIsRequiredEnum
 */
export declare const CustomFieldMultiLineTextValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldMultiLineTextValueIsRequiredEnum = typeof CustomFieldMultiLineTextValueIsRequiredEnum[keyof typeof CustomFieldMultiLineTextValueIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldMultiLineTextValueIsRichTextEnum
 */
export declare const CustomFieldMultiLineTextValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldMultiLineTextValueIsRichTextEnum = typeof CustomFieldMultiLineTextValueIsRichTextEnum[keyof typeof CustomFieldMultiLineTextValueIsRichTextEnum];
/**
* Custom field data - multi-line text
*/
export declare class CustomFieldMultiLineText {
    'default_value'?: string;
    'type'?: CustomFieldMultiLineTextTypeEnum;
    'value_is_required'?: CustomFieldMultiLineTextValueIsRequiredEnum;
    'value_is_rich_text'?: CustomFieldMultiLineTextValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldMultiLineText>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldNumberDisplayWidthEnum
 */
export declare const CustomFieldNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldNumberDisplayWidthEnum = typeof CustomFieldNumberDisplayWidthEnum[keyof typeof CustomFieldNumberDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldNumberTypeEnum
 */
export declare const CustomFieldNumberTypeEnum: {
    readonly Number: "number";
};
export declare type CustomFieldNumberTypeEnum = typeof CustomFieldNumberTypeEnum[keyof typeof CustomFieldNumberTypeEnum];
/**
 *
 * @export
 * @type CustomFieldNumberUniquenessOfValuesEnum
 */
export declare const CustomFieldNumberUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldNumberUniquenessOfValuesEnum = typeof CustomFieldNumberUniquenessOfValuesEnum[keyof typeof CustomFieldNumberUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldNumberValueIsRequiredEnum
 */
export declare const CustomFieldNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldNumberValueIsRequiredEnum = typeof CustomFieldNumberValueIsRequiredEnum[keyof typeof CustomFieldNumberValueIsRequiredEnum];
/**
* Custom field data - number
*/
export declare class CustomFieldNumber {
    'decimal_places'?: number;
    'default_value'?: number;
    'display_width'?: CustomFieldNumberDisplayWidthEnum;
    'max_value'?: number;
    'min_value'?: number;
    'prefix'?: string;
    'suffix'?: string;
    'type'?: CustomFieldNumberTypeEnum;
    'uniqueness_of_values'?: CustomFieldNumberUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldSingleLineTextDisplayWidthEnum
 */
export declare const CustomFieldSingleLineTextDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldSingleLineTextDisplayWidthEnum = typeof CustomFieldSingleLineTextDisplayWidthEnum[keyof typeof CustomFieldSingleLineTextDisplayWidthEnum];
/**
 *
 * @export
 * @type CustomFieldSingleLineTextTypeEnum
 */
export declare const CustomFieldSingleLineTextTypeEnum: {
    readonly SingleLineText: "single_line_text";
};
export declare type CustomFieldSingleLineTextTypeEnum = typeof CustomFieldSingleLineTextTypeEnum[keyof typeof CustomFieldSingleLineTextTypeEnum];
/**
 *
 * @export
 * @type CustomFieldSingleLineTextUniquenessOfValuesEnum
 */
export declare const CustomFieldSingleLineTextUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldSingleLineTextUniquenessOfValuesEnum = typeof CustomFieldSingleLineTextUniquenessOfValuesEnum[keyof typeof CustomFieldSingleLineTextUniquenessOfValuesEnum];
/**
 *
 * @export
 * @type CustomFieldSingleLineTextValueIsRequiredEnum
 */
export declare const CustomFieldSingleLineTextValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldSingleLineTextValueIsRequiredEnum = typeof CustomFieldSingleLineTextValueIsRequiredEnum[keyof typeof CustomFieldSingleLineTextValueIsRequiredEnum];
/**
* Custom field data - single-line text
*/
export declare class CustomFieldSingleLineText {
    'default_value'?: string;
    'display_width'?: CustomFieldSingleLineTextDisplayWidthEnum;
    'prefix'?: string;
    'suffix'?: string;
    'type'?: CustomFieldSingleLineTextTypeEnum;
    'uniqueness_of_values'?: CustomFieldSingleLineTextUniquenessOfValuesEnum;
    'value_is_required'?: CustomFieldSingleLineTextValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldSingleLineText>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestCardPickerAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestCardPickerAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestCardPickerAvailabilityEnum = typeof CustomFieldUpdateRequestCardPickerAvailabilityEnum[keyof typeof CustomFieldUpdateRequestCardPickerAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestCardPickerIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestCardPickerIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCardPickerIsEnabledEnum = typeof CustomFieldUpdateRequestCardPickerIsEnabledEnum[keyof typeof CustomFieldUpdateRequestCardPickerIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestCardPickerIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestCardPickerIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCardPickerIsImmutableEnum = typeof CustomFieldUpdateRequestCardPickerIsImmutableEnum[keyof typeof CustomFieldUpdateRequestCardPickerIsImmutableEnum];
export declare class CustomFieldUpdateRequestCardPicker {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestCardPickerAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestCardPickerAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestCardPickerIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestCardPickerIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestCardPickerIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestCardPicker>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - card picker.
*/
export declare class CustomFieldUpdateRequestCardPickerAllOf {
    /**
    * The inclusive maximum number of cards that have to be selected for this custom field per card.
    */
    'max_number_of_selected_cards'?: number;
    /**
    * The inclusive minimum number of cards that have to be selected for this custom field per card.
    */
    'min_number_of_selected_cards'?: number;
    /**
    * The search filter that controls which cards will be presented in the card picker.
    */
    'search'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestCardPickerAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestCommonAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestCommonAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestCommonAvailabilityEnum = typeof CustomFieldUpdateRequestCommonAvailabilityEnum[keyof typeof CustomFieldUpdateRequestCommonAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestCommonIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestCommonIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCommonIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestCommonIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestCommonIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestCommonIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestCommonIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCommonIsEnabledEnum = typeof CustomFieldUpdateRequestCommonIsEnabledEnum[keyof typeof CustomFieldUpdateRequestCommonIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestCommonIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestCommonIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestCommonIsImmutableEnum = typeof CustomFieldUpdateRequestCommonIsImmutableEnum[keyof typeof CustomFieldUpdateRequestCommonIsImmutableEnum];
/**
* Custom field data.
*/
export declare class CustomFieldUpdateRequestCommon {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestCommonAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestCommonAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestCommonIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestCommonIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestCommonIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestCommon>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestContributorAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestContributorAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestContributorAvailabilityEnum = typeof CustomFieldUpdateRequestContributorAvailabilityEnum[keyof typeof CustomFieldUpdateRequestContributorAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestContributorIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestContributorIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestContributorIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestContributorIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestContributorIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestContributorIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestContributorIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestContributorIsEnabledEnum = typeof CustomFieldUpdateRequestContributorIsEnabledEnum[keyof typeof CustomFieldUpdateRequestContributorIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestContributorIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestContributorIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestContributorIsImmutableEnum = typeof CustomFieldUpdateRequestContributorIsImmutableEnum[keyof typeof CustomFieldUpdateRequestContributorIsImmutableEnum];
export declare class CustomFieldUpdateRequestContributor {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestContributorAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestContributorAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestContributorIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestContributorIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestContributorIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestContributor>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - contributor.
*/
export declare class CustomFieldUpdateRequestContributorAllOf {
    /**
    * The inclusive maximum number of contributors that have to be selected for this custom field per card.
    */
    'max_number_of_contributors'?: number;
    /**
    * The inclusive minimum number of contributors that have to be selected for this custom field per card.
    */
    'min_number_of_contributors'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestContributorAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestDateAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestDateAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDateAvailabilityEnum = typeof CustomFieldUpdateRequestDateAvailabilityEnum[keyof typeof CustomFieldUpdateRequestDateAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestDateIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestDateIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestDateIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestDateIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestDateIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestDateIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateIsEnabledEnum = typeof CustomFieldUpdateRequestDateIsEnabledEnum[keyof typeof CustomFieldUpdateRequestDateIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestDateIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestDateIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateIsImmutableEnum = typeof CustomFieldUpdateRequestDateIsImmutableEnum[keyof typeof CustomFieldUpdateRequestDateIsImmutableEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestDateDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestDateDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDateDisplayWidthEnum = typeof CustomFieldUpdateRequestDateDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestDateDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestDateValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestDateValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateValueIsRequiredEnum = typeof CustomFieldUpdateRequestDateValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestDateValueIsRequiredEnum];
/**
 * Controls whether the value is only a date or a date and a time.
 * @export
 * @type CustomFieldUpdateRequestDateValueWithTimeEnum
 */
export declare const CustomFieldUpdateRequestDateValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateValueWithTimeEnum = typeof CustomFieldUpdateRequestDateValueWithTimeEnum[keyof typeof CustomFieldUpdateRequestDateValueWithTimeEnum];
export declare class CustomFieldUpdateRequestDate {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestDateAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestDateAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestDateIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestDateIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestDateIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestDateDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestDateValueIsRequiredEnum;
    /**
    * Controls whether the value is only a date or a date and a time.
    */
    'value_with_time'?: CustomFieldUpdateRequestDateValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestDate>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestDateAllOfDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestDateAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDateAllOfDisplayWidthEnum = typeof CustomFieldUpdateRequestDateAllOfDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestDateAllOfDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum = typeof CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum];
/**
 * Controls whether the value is only a date or a date and a time.
 * @export
 * @type CustomFieldUpdateRequestDateAllOfValueWithTimeEnum
 */
export declare const CustomFieldUpdateRequestDateAllOfValueWithTimeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDateAllOfValueWithTimeEnum = typeof CustomFieldUpdateRequestDateAllOfValueWithTimeEnum[keyof typeof CustomFieldUpdateRequestDateAllOfValueWithTimeEnum];
/**
* Custom field data - date.
*/
export declare class CustomFieldUpdateRequestDateAllOf {
    /**
    * The default value of the custom field. The value is interpreted as number of days to add to the current date when the custom field is applied to a card.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestDateAllOfDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestDateAllOfValueIsRequiredEnum;
    /**
    * Controls whether the value is only a date or a date and a time.
    */
    'value_with_time'?: CustomFieldUpdateRequestDateAllOfValueWithTimeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestDateAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestDropdownAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestDropdownAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDropdownAvailabilityEnum = typeof CustomFieldUpdateRequestDropdownAvailabilityEnum[keyof typeof CustomFieldUpdateRequestDropdownAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestDropdownIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestDropdownIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownIsEnabledEnum = typeof CustomFieldUpdateRequestDropdownIsEnabledEnum[keyof typeof CustomFieldUpdateRequestDropdownIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestDropdownIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestDropdownIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownIsImmutableEnum = typeof CustomFieldUpdateRequestDropdownIsImmutableEnum[keyof typeof CustomFieldUpdateRequestDropdownIsImmutableEnum];
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllowOtherValueEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownAllowOtherValueEnum = typeof CustomFieldUpdateRequestDropdownAllowOtherValueEnum[keyof typeof CustomFieldUpdateRequestDropdownAllowOtherValueEnum];
/**
 * When set to 1 the allowed values of the dropdown cannot be changed per board.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum = typeof CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum[keyof typeof CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestDropdownDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestDropdownDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDropdownDisplayWidthEnum = typeof CustomFieldUpdateRequestDropdownDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestDropdownDisplayWidthEnum];
export declare class CustomFieldUpdateRequestDropdown {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestDropdownAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestDropdownAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestDropdownIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestDropdownIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestDropdownIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: CustomFieldUpdateRequestDropdownAllowOtherValueEnum;
    /**
    * When set to 1 the allowed values of the dropdown cannot be changed per board.
    */
    'allowed_values_are_locked'?: CustomFieldUpdateRequestDropdownAllowedValuesAreLockedEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestDropdownDisplayWidthEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestDropdown>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum = typeof CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum[keyof typeof CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum];
/**
 * When set to 1 the allowed values of the dropdown cannot be changed per board.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum = typeof CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum[keyof typeof CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum = typeof CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum];
/**
* Custom field data - dropdrown.
*/
export declare class CustomFieldUpdateRequestDropdownAllOf {
    /**
    * When set to 1 the dropdown will have an additional option which will let the users enter a short text as the value of the field.
    */
    'allow_other_value'?: CustomFieldUpdateRequestDropdownAllOfAllowOtherValueEnum;
    /**
    * When set to 1 the allowed values of the dropdown cannot be changed per board.
    */
    'allowed_values_are_locked'?: CustomFieldUpdateRequestDropdownAllOfAllowedValuesAreLockedEnum;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestDropdownAllOfDisplayWidthEnum;
    /**
    * The inclusive maximum number of values that have to be selected for this custom field per card.
    */
    'max_number_of_values'?: number;
    /**
    * The inclusive minimum number of values that have to be selected for this custom field per card.
    */
    'min_number_of_values'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestDropdownAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestFileAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestFileAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestFileAvailabilityEnum = typeof CustomFieldUpdateRequestFileAvailabilityEnum[keyof typeof CustomFieldUpdateRequestFileAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestFileIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestFileIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestFileIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestFileIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestFileIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestFileIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestFileIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestFileIsEnabledEnum = typeof CustomFieldUpdateRequestFileIsEnabledEnum[keyof typeof CustomFieldUpdateRequestFileIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestFileIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestFileIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestFileIsImmutableEnum = typeof CustomFieldUpdateRequestFileIsImmutableEnum[keyof typeof CustomFieldUpdateRequestFileIsImmutableEnum];
export declare class CustomFieldUpdateRequestFile {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestFileAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestFileAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestFileIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestFileIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestFileIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestFile>, skipDefaultValuesInitialization?: boolean);
}
/**
* Custom field data - file.
*/
export declare class CustomFieldUpdateRequestFileAllOf {
    /**
    * The inclusive maximum number of files that have to be attached in this custom field per card.
    */
    'max_number_of_files'?: number;
    /**
    * The inclusive minimum number of files that have to be attached in this custom field per card.
    */
    'min_number_of_files'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestFileAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestLinkAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestLinkAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestLinkAvailabilityEnum = typeof CustomFieldUpdateRequestLinkAvailabilityEnum[keyof typeof CustomFieldUpdateRequestLinkAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestLinkIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestLinkIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestLinkIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestLinkIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestLinkIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestLinkIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkIsEnabledEnum = typeof CustomFieldUpdateRequestLinkIsEnabledEnum[keyof typeof CustomFieldUpdateRequestLinkIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestLinkIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestLinkIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkIsImmutableEnum = typeof CustomFieldUpdateRequestLinkIsImmutableEnum[keyof typeof CustomFieldUpdateRequestLinkIsImmutableEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestLinkDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestLinkDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestLinkDisplayWidthEnum = typeof CustomFieldUpdateRequestLinkDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestLinkDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestLinkValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestLinkValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkValueIsRequiredEnum = typeof CustomFieldUpdateRequestLinkValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestLinkValueIsRequiredEnum];
export declare class CustomFieldUpdateRequestLink {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestLinkAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestLinkAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestLinkIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestLinkIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestLinkIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestLinkDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestLinkValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestLink>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum = typeof CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum = typeof CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum];
/**
* Custom field data - link.
*/
export declare class CustomFieldUpdateRequestLinkAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestLinkAllOfDisplayWidthEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestLinkAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestLinkAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestMultiLineAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestMultiLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestMultiLineAvailabilityEnum = typeof CustomFieldUpdateRequestMultiLineAvailabilityEnum[keyof typeof CustomFieldUpdateRequestMultiLineAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestMultiLineIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestMultiLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineIsEnabledEnum = typeof CustomFieldUpdateRequestMultiLineIsEnabledEnum[keyof typeof CustomFieldUpdateRequestMultiLineIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestMultiLineIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestMultiLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineIsImmutableEnum = typeof CustomFieldUpdateRequestMultiLineIsImmutableEnum[keyof typeof CustomFieldUpdateRequestMultiLineIsImmutableEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestMultiLineValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestMultiLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineValueIsRequiredEnum = typeof CustomFieldUpdateRequestMultiLineValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestMultiLineValueIsRequiredEnum];
/**
 * Controls whether the value of the custom field will be interpreted as html.
 * @export
 * @type CustomFieldUpdateRequestMultiLineValueIsRichTextEnum
 */
export declare const CustomFieldUpdateRequestMultiLineValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineValueIsRichTextEnum = typeof CustomFieldUpdateRequestMultiLineValueIsRichTextEnum[keyof typeof CustomFieldUpdateRequestMultiLineValueIsRichTextEnum];
export declare class CustomFieldUpdateRequestMultiLine {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestMultiLineAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestMultiLineAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestMultiLineIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestMultiLineIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestMultiLineIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestMultiLineValueIsRequiredEnum;
    /**
    * Controls whether the value of the custom field will be interpreted as html.
    */
    'value_is_rich_text'?: CustomFieldUpdateRequestMultiLineValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestMultiLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum = typeof CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum];
/**
 * Controls whether the value of the custom field will be interpreted as html.
 * @export
 * @type CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum
 */
export declare const CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum = typeof CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum[keyof typeof CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum];
/**
* Custom field data - multi-line text.
*/
export declare class CustomFieldUpdateRequestMultiLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestMultiLineAllOfValueIsRequiredEnum;
    /**
    * Controls whether the value of the custom field will be interpreted as html.
    */
    'value_is_rich_text'?: CustomFieldUpdateRequestMultiLineAllOfValueIsRichTextEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestMultiLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestNumberAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestNumberAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestNumberAvailabilityEnum = typeof CustomFieldUpdateRequestNumberAvailabilityEnum[keyof typeof CustomFieldUpdateRequestNumberAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestNumberIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestNumberIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestNumberIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestNumberIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestNumberIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestNumberIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberIsEnabledEnum = typeof CustomFieldUpdateRequestNumberIsEnabledEnum[keyof typeof CustomFieldUpdateRequestNumberIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestNumberIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestNumberIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberIsImmutableEnum = typeof CustomFieldUpdateRequestNumberIsImmutableEnum[keyof typeof CustomFieldUpdateRequestNumberIsImmutableEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestNumberDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestNumberDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestNumberDisplayWidthEnum = typeof CustomFieldUpdateRequestNumberDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestNumberDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldUpdateRequestNumberUniquenessOfValuesEnum
 */
export declare const CustomFieldUpdateRequestNumberUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestNumberUniquenessOfValuesEnum = typeof CustomFieldUpdateRequestNumberUniquenessOfValuesEnum[keyof typeof CustomFieldUpdateRequestNumberUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestNumberValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestNumberValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberValueIsRequiredEnum = typeof CustomFieldUpdateRequestNumberValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestNumberValueIsRequiredEnum];
export declare class CustomFieldUpdateRequestNumber {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestNumberAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestNumberAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestNumberIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestNumberIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestNumberIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestNumberDisplayWidthEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldUpdateRequestNumberUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestNumberValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestNumber>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum = typeof CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum
 */
export declare const CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum = typeof CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum[keyof typeof CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum = typeof CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum];
/**
* Custom field data - number.
*/
export declare class CustomFieldUpdateRequestNumberAllOf {
    /**
    * The number of decimal places to show.
    */
    'decimal_places'?: number;
    /**
    * The default value of the custom field.
    */
    'default_value'?: number;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestNumberAllOfDisplayWidthEnum;
    /**
    * The inclusive maximum of the range of allowed values.
    */
    'max_value'?: number;
    /**
    * The inclusive minimum of the range of allowed values.
    */
    'min_value'?: number;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldUpdateRequestNumberAllOfUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestNumberAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestNumberAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestSingleLineAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestSingleLineAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestSingleLineAvailabilityEnum = typeof CustomFieldUpdateRequestSingleLineAvailabilityEnum[keyof typeof CustomFieldUpdateRequestSingleLineAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestSingleLineIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestSingleLineIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineIsEnabledEnum = typeof CustomFieldUpdateRequestSingleLineIsEnabledEnum[keyof typeof CustomFieldUpdateRequestSingleLineIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestSingleLineIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestSingleLineIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineIsImmutableEnum = typeof CustomFieldUpdateRequestSingleLineIsImmutableEnum[keyof typeof CustomFieldUpdateRequestSingleLineIsImmutableEnum];
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestSingleLineDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestSingleLineDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestSingleLineDisplayWidthEnum = typeof CustomFieldUpdateRequestSingleLineDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestSingleLineDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum
 */
export declare const CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum = typeof CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum[keyof typeof CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestSingleLineValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestSingleLineValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineValueIsRequiredEnum = typeof CustomFieldUpdateRequestSingleLineValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestSingleLineValueIsRequiredEnum];
export declare class CustomFieldUpdateRequestSingleLine {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestSingleLineAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestSingleLineAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestSingleLineIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestSingleLineIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestSingleLineIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestSingleLineDisplayWidthEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldUpdateRequestSingleLineUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestSingleLineValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestSingleLine>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
 * @export
 * @type CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum
 */
export declare const CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum = typeof CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum[keyof typeof CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum];
/**
 * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
 * @export
 * @type CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum
 */
export declare const CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum = typeof CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum[keyof typeof CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum];
/**
 * Controls whether this custom field must always have a value for the cards it is applied to.
 * @export
 * @type CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum = typeof CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum[keyof typeof CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum];
/**
* Custom field data - single-line text.
*/
export declare class CustomFieldUpdateRequestSingleLineAllOf {
    /**
    * The default value of the custom field.
    */
    'default_value'?: string;
    /**
    * When set to 1 the custom field will take all of the available width. When set to 2 the custom field will take half of the available width.
    */
    'display_width'?: CustomFieldUpdateRequestSingleLineAllOfDisplayWidthEnum;
    /**
    * A prefix to display before the custom field value.
    */
    'prefix'?: string;
    /**
    * A suffix to display after the custom field value.
    */
    'suffix'?: string;
    /**
    * When set to 0 the custom field may have any value. When set to 1 the values of the custom field must be unique within each board. When set to 2 the values of the custom field must be unique across all board.
    */
    'uniqueness_of_values'?: CustomFieldUpdateRequestSingleLineAllOfUniquenessOfValuesEnum;
    /**
    * Controls whether this custom field must always have a value for the cards it is applied to.
    */
    'value_is_required'?: CustomFieldUpdateRequestSingleLineAllOfValueIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestSingleLineAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the allowed values can be limited per board.
 * @export
 * @type CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum
 */
export declare const CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum = typeof CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum[keyof typeof CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum];
/**
 * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
 * @export
 * @type CustomFieldUpdateRequestVoteAvailabilityEnum
 */
export declare const CustomFieldUpdateRequestVoteAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type CustomFieldUpdateRequestVoteAvailabilityEnum = typeof CustomFieldUpdateRequestVoteAvailabilityEnum[keyof typeof CustomFieldUpdateRequestVoteAvailabilityEnum];
/**
 * Controls whether this custom field must always be present on all cards.
 * @export
 * @type CustomFieldUpdateRequestVoteIsAlwaysPresentEnum
 */
export declare const CustomFieldUpdateRequestVoteIsAlwaysPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteIsAlwaysPresentEnum = typeof CustomFieldUpdateRequestVoteIsAlwaysPresentEnum[keyof typeof CustomFieldUpdateRequestVoteIsAlwaysPresentEnum];
/**
 * Controls whether this custom field is enabled.
 * @export
 * @type CustomFieldUpdateRequestVoteIsEnabledEnum
 */
export declare const CustomFieldUpdateRequestVoteIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteIsEnabledEnum = typeof CustomFieldUpdateRequestVoteIsEnabledEnum[keyof typeof CustomFieldUpdateRequestVoteIsEnabledEnum];
/**
 * Controls whether the value of this custom field can be changed after it has first been set.
 * @export
 * @type CustomFieldUpdateRequestVoteIsImmutableEnum
 */
export declare const CustomFieldUpdateRequestVoteIsImmutableEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteIsImmutableEnum = typeof CustomFieldUpdateRequestVoteIsImmutableEnum[keyof typeof CustomFieldUpdateRequestVoteIsImmutableEnum];
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type CustomFieldUpdateRequestVoteCommentIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteCommentIsRequiredEnum = typeof CustomFieldUpdateRequestVoteCommentIsRequiredEnum[keyof typeof CustomFieldUpdateRequestVoteCommentIsRequiredEnum];
export declare class CustomFieldUpdateRequestVote {
    /**
    * Controls whether the allowed values can be limited per board.
    */
    'all_properties_are_locked'?: CustomFieldUpdateRequestVoteAllPropertiesAreLockedEnum;
    /**
    * When set to 0 the custom field has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the custom field is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the custom field is added automatically to all boards and cannot be removed.
    */
    'availability'?: CustomFieldUpdateRequestVoteAvailabilityEnum;
    /**
    * The color of the custom field. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this custom field must always be present on all cards.
    */
    'is_always_present'?: CustomFieldUpdateRequestVoteIsAlwaysPresentEnum;
    /**
    * Controls whether this custom field is enabled.
    */
    'is_enabled'?: CustomFieldUpdateRequestVoteIsEnabledEnum;
    /**
    * Controls whether the value of this custom field can be changed after it has first been set.
    */
    'is_immutable'?: CustomFieldUpdateRequestVoteIsImmutableEnum;
    /**
    * The name of the custom field.
    */
    'name'?: string;
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: CustomFieldUpdateRequestVoteCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestVote>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether a user must include a comment in order to vote.
 * @export
 * @type CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum
 */
export declare const CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum = typeof CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum[keyof typeof CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum];
/**
* Custom field data - vote.
*/
export declare class CustomFieldUpdateRequestVoteAllOf {
    /**
    * Controls whether a user must include a comment in order to vote.
    */
    'comment_is_required'?: CustomFieldUpdateRequestVoteAllOfCommentIsRequiredEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldUpdateRequestVoteAllOf>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type CustomFieldVoteCommentIsRequiredEnum
 */
export declare const CustomFieldVoteCommentIsRequiredEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type CustomFieldVoteCommentIsRequiredEnum = typeof CustomFieldVoteCommentIsRequiredEnum[keyof typeof CustomFieldVoteCommentIsRequiredEnum];
/**
 *
 * @export
 * @type CustomFieldVoteTypeEnum
 */
export declare const CustomFieldVoteTypeEnum: {
    readonly Vote: "vote";
};
export declare type CustomFieldVoteTypeEnum = typeof CustomFieldVoteTypeEnum[keyof typeof CustomFieldVoteTypeEnum];
/**
* Custom field data - vote
*/
export declare class CustomFieldVote {
    'comment_is_required'?: CustomFieldVoteCommentIsRequiredEnum;
    'type'?: CustomFieldVoteTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<CustomFieldVote>, skipDefaultValuesInitialization?: boolean);
}
/**
* Dashboard Page data
*/
export declare class DashboardPage {
    'dashboard_page_id'?: number;
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<DashboardPage>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the team will be a manager of the dashboard page. When set to 0 the team will not be a manager of the dashboard page.
 * @export
 * @type DashboardPageTeamAsManagerCanEditEnum
 */
export declare const DashboardPageTeamAsManagerCanEditEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type DashboardPageTeamAsManagerCanEditEnum = typeof DashboardPageTeamAsManagerCanEditEnum[keyof typeof DashboardPageTeamAsManagerCanEditEnum];
/**
* Set a team as a manager of the dashboard page.
*/
export declare class DashboardPageTeamAsManager {
    /**
    * When set to 1 the team will be a manager of the dashboard page. When set to 0 the team will not be a manager of the dashboard page.
    */
    'can_edit': DashboardPageTeamAsManagerCanEditEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<DashboardPageTeamAsManager>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the user will be a manager of the dashboard page. When set to 0 the user will not be a manager of the dashboard page.
 * @export
 * @type DashboardPageUserAsManagerCanEditEnum
 */
export declare const DashboardPageUserAsManagerCanEditEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type DashboardPageUserAsManagerCanEditEnum = typeof DashboardPageUserAsManagerCanEditEnum[keyof typeof DashboardPageUserAsManagerCanEditEnum];
/**
* Set a user as a manager of the dashboard page.
*/
export declare class DashboardPageUserAsManager {
    /**
    * When set to 1 the user will be a manager of the dashboard page. When set to 0 the user will not be a manager of the dashboard page.
    */
    'can_edit': DashboardPageUserAsManagerCanEditEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<DashboardPageUserAsManager>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type DiscardReasonAvailabilityEnum
 */
export declare const DiscardReasonAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type DiscardReasonAvailabilityEnum = typeof DiscardReasonAvailabilityEnum[keyof typeof DiscardReasonAvailabilityEnum];
/**
 *
 * @export
 * @type DiscardReasonIsEnabledEnum
 */
export declare const DiscardReasonIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type DiscardReasonIsEnabledEnum = typeof DiscardReasonIsEnabledEnum[keyof typeof DiscardReasonIsEnabledEnum];
/**
* Discard reason data
*/
export declare class DiscardReason {
    'availability'?: DiscardReasonAvailabilityEnum;
    'is_enabled'?: DiscardReasonIsEnabledEnum;
    'label'?: string;
    'reason_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<DiscardReason>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on discard reasons resource
*/
export declare class DiscardReasonHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'reason_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<DiscardReasonHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* The details about an error which occurred while an email was being processed
*/
export declare class EmailIntegrationError {
    'error_message'?: string;
    'received_at'?: Date;
    'receivers'?: Array<string>;
    'sender'?: string;
    'subject'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<EmailIntegrationError>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an email is send through email integration
*/
export declare class EmailIntegrationHistoryEvent {
    'received_at'?: Date;
    'receivers'?: string;
    'sender'?: string;
    'status'?: string;
    'subject'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<EmailIntegrationHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* The response of the API when there is a client error.
*/
export declare class ErrorResponse {
    'error': ErrorResponseError;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ErrorResponse>, skipDefaultValuesInitialization?: boolean);
}
/**
* Information about a client error.
*/
export declare class ErrorResponseError {
    /**
    * A unique 4-character code associated with the error.
    */
    'code': string;
    /**
    * Details specific to the error. Such as the values that caused it.
    */
    'details'?: {
        [key: string]: string;
    };
    /**
    * A description of the error.
    */
    'message': string;
    /**
    * A reference that you can use if you need to contact customer support about the error.
    */
    'reference': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ErrorResponseError>, skipDefaultValuesInitialization?: boolean);
}
/**
* Archived card version data.
*/
export declare class InlineObject {
    /**
    * The name of the new version.
    */
    'name': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject>, skipDefaultValuesInitialization?: boolean);
}
/**
* Archived card version data.
*/
export declare class InlineObject1 {
    /**
    * The name of the version.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject1>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the value is selected by default.
 * @export
 * @type InlineObject10IsDefaultEnum
 */
export declare const InlineObject10IsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject10IsDefaultEnum = typeof InlineObject10IsDefaultEnum[keyof typeof InlineObject10IsDefaultEnum];
/**
* Board custom field allowed value data.
*/
export declare class InlineObject10 {
    /**
    * Controls whether the value is selected by default.
    */
    'is_default'?: InlineObject10IsDefaultEnum;
    /**
    * The position of the value within the dropdown.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject10>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the value is selected by default.
 * @export
 * @type InlineObject11IsDefaultEnum
 */
export declare const InlineObject11IsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject11IsDefaultEnum = typeof InlineObject11IsDefaultEnum[keyof typeof InlineObject11IsDefaultEnum];
/**
* Board custom field allowed value data.
*/
export declare class InlineObject11 {
    /**
    * Controls whether the value is selected by default.
    */
    'is_default'?: InlineObject11IsDefaultEnum;
    /**
    * The position of the value within the dropdown.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject11>, skipDefaultValuesInitialization?: boolean);
}
/**
 * 1 - backlog, 2 - requested, 3 - progress, 4 - done
 * @export
 * @type InlineObject12SectionEnum
 */
export declare const InlineObject12SectionEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
    readonly NUMBER_3: 3;
    readonly NUMBER_4: 4;
};
export declare type InlineObject12SectionEnum = typeof InlineObject12SectionEnum[keyof typeof InlineObject12SectionEnum];
/**
* Lane section limit data.
*/
export declare class InlineObject12 {
    /**
    * The lane id.
    */
    'lane_id': number;
    /**
    * The WIP limit of the lane section. Set to 0 to remove the current WIP limit.
    */
    'limit': number;
    /**
    * 1 - backlog, 2 - requested, 3 - progress, 4 - done
    */
    'section': InlineObject12SectionEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject12>, skipDefaultValuesInitialization?: boolean);
}
/**
* Lane data.
*/
export declare class InlineObject13 {
    /**
    * The lane color. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A description of the new lane.
    */
    'description'?: string;
    /**
    * The name of the new lane.
    */
    'name': string;
    /**
    * The id of the parent lane. One of workflow and parent_lane_id must be set, but not both!
    */
    'parent_lane_id'?: number;
    /**
    * The position of the lane within the workflow or its parent.
    */
    'position': number;
    'workflow_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject13>, skipDefaultValuesInitialization?: boolean);
}
/**
* Lane data.
*/
export declare class InlineObject14 {
    /**
    * The lane color. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A description of the lane.
    */
    'description'?: string;
    /**
    * The name of the lane.
    */
    'name'?: string;
    /**
    * The id of the parent lane or 0 if you want to make the lane a top lane.
    */
    'parent_lane_id'?: number;
    /**
    * The position of the lane within the workflow or its parent.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject14>, skipDefaultValuesInitialization?: boolean);
}
/**
* Merged area data.
*/
export declare class InlineObject15 {
    /**
    * The ids of the columns which are a part of the merged area.
    */
    'column_ids': Array<number>;
    /**
    * The ids of the lanes which are a part of the merged area.
    */
    'lane_ids': Array<number>;
    /**
    * The WIP limit of the merged area.
    */
    'limit'?: number;
    /**
    * The id of the primary column.
    */
    'primary_column_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject15>, skipDefaultValuesInitialization?: boolean);
}
/**
* Merged area data.
*/
export declare class InlineObject16 {
    /**
    * The ids of the columns which are a part of the merged area.
    */
    'column_ids'?: Array<number>;
    /**
    * The ids of the lanes which are a part of the merged area.
    */
    'lane_ids'?: Array<number>;
    /**
    * The WIP limit of the merged area.
    */
    'limit'?: number;
    /**
    * The id of the primary column.
    */
    'primary_column_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject16>, skipDefaultValuesInitialization?: boolean);
}
/**
* Position of the workflow
*/
export declare class InlineObject17 {
    /**
    * The position of the workflow.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject17>, skipDefaultValuesInitialization?: boolean);
}
/**
* Position of the workflow
*/
export declare class InlineObject18 {
    /**
    * The position of the workflow.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject18>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board sticker data.
*/
export declare class InlineObject19 {
    'limit_per_board'?: number;
    'limit_per_card'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject19>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject2AvailabilityEnum
 */
export declare const InlineObject2AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject2AvailabilityEnum = typeof InlineObject2AvailabilityEnum[keyof typeof InlineObject2AvailabilityEnum];
/**
 * Controls whether this block reason is enabled.
 * @export
 * @type InlineObject2IsEnabledEnum
 */
export declare const InlineObject2IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject2IsEnabledEnum = typeof InlineObject2IsEnabledEnum[keyof typeof InlineObject2IsEnabledEnum];
/**
 * Controls whether this block reason signifies that the card is blocked because of another card.
 * @export
 * @type InlineObject2WithCardsEnum
 */
export declare const InlineObject2WithCardsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject2WithCardsEnum = typeof InlineObject2WithCardsEnum[keyof typeof InlineObject2WithCardsEnum];
/**
 * Controls whether this block reason signifies that the card is blocked until a given date.
 * @export
 * @type InlineObject2WithDateEnum
 */
export declare const InlineObject2WithDateEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject2WithDateEnum = typeof InlineObject2WithDateEnum[keyof typeof InlineObject2WithDateEnum];
/**
 * Controls whether this block reason signifies that the card is blocked because of a user.
 * @export
 * @type InlineObject2WithUsersEnum
 */
export declare const InlineObject2WithUsersEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject2WithUsersEnum = typeof InlineObject2WithUsersEnum[keyof typeof InlineObject2WithUsersEnum];
/**
* Block reason data.
*/
export declare class InlineObject2 {
    /**
    * When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject2AvailabilityEnum;
    /**
    * The color of the block reason. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * An icon for the block reason. If set to 0, the block reason will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this block reason is enabled.
    */
    'is_enabled'?: InlineObject2IsEnabledEnum;
    /**
    * The block reason.
    */
    'label': string;
    /**
    * Controls whether this block reason signifies that the card is blocked because of another card.
    */
    'with_cards'?: InlineObject2WithCardsEnum;
    /**
    * Controls whether this block reason signifies that the card is blocked until a given date.
    */
    'with_date'?: InlineObject2WithDateEnum;
    /**
    * Controls whether this block reason signifies that the card is blocked because of a user.
    */
    'with_users'?: InlineObject2WithUsersEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject2>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board sticker data.
*/
export declare class InlineObject20 {
    'limit_per_board'?: number;
    'limit_per_card'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject20>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board role.
*/
export declare class InlineObject21 {
    /**
    * Board role of the team
    */
    'role_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject21>, skipDefaultValuesInitialization?: boolean);
}
/**
* Role data.
*/
export declare class InlineObject22 {
    /**
    * The role id.
    */
    'role_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject22>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the workflow is collapsible.
 * @export
 * @type InlineObject23IsCollapsibleEnum
 */
export declare const InlineObject23IsCollapsibleEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject23IsCollapsibleEnum = typeof InlineObject23IsCollapsibleEnum[keyof typeof InlineObject23IsCollapsibleEnum];
/**
 * Controls whether the workflow is enabled.
 * @export
 * @type InlineObject23IsEnabledEnum
 */
export declare const InlineObject23IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject23IsEnabledEnum = typeof InlineObject23IsEnabledEnum[keyof typeof InlineObject23IsEnabledEnum];
/**
 * The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.
 * @export
 * @type InlineObject23TypeEnum
 */
export declare const InlineObject23TypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject23TypeEnum = typeof InlineObject23TypeEnum[keyof typeof InlineObject23TypeEnum];
/**
* Workflow data.
*/
export declare class InlineObject23 {
    /**
    * Controls whether the workflow is collapsible.
    */
    'is_collapsible'?: InlineObject23IsCollapsibleEnum;
    /**
    * Controls whether the workflow is enabled.
    */
    'is_enabled'?: InlineObject23IsEnabledEnum;
    /**
    * The name of the new workflow.
    */
    'name'?: string;
    /**
    * Postion of the workflow within the board.
    */
    'position'?: number;
    /**
    * The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.
    */
    'type'?: InlineObject23TypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject23>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the workflow is collapsible.
 * @export
 * @type InlineObject24IsCollapsibleEnum
 */
export declare const InlineObject24IsCollapsibleEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject24IsCollapsibleEnum = typeof InlineObject24IsCollapsibleEnum[keyof typeof InlineObject24IsCollapsibleEnum];
/**
 * Controls whether the workflow is enabled.
 * @export
 * @type InlineObject24IsEnabledEnum
 */
export declare const InlineObject24IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject24IsEnabledEnum = typeof InlineObject24IsEnabledEnum[keyof typeof InlineObject24IsEnabledEnum];
/**
 * The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.
 * @export
 * @type InlineObject24TypeEnum
 */
export declare const InlineObject24TypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject24TypeEnum = typeof InlineObject24TypeEnum[keyof typeof InlineObject24TypeEnum];
/**
* Workflow data.
*/
export declare class InlineObject24 {
    /**
    * Controls whether the workflow is collapsible.
    */
    'is_collapsible'?: InlineObject24IsCollapsibleEnum;
    /**
    * Controls whether the workflow is enabled.
    */
    'is_enabled'?: InlineObject24IsEnabledEnum;
    /**
    * The name of the new workflow.
    */
    'name'?: string;
    /**
    * Postion of the workflow within the board.
    */
    'position'?: number;
    /**
    * The type of workflow can be 0 - cards workflow, 1 - initiatives workflow or 2 - timeline.
    */
    'type'?: InlineObject24TypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject24>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether to copy exit criteria.
 * @export
 * @type InlineObject25CopyColumnChecklistItemsEnum
 */
export declare const InlineObject25CopyColumnChecklistItemsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject25CopyColumnChecklistItemsEnum = typeof InlineObject25CopyColumnChecklistItemsEnum[keyof typeof InlineObject25CopyColumnChecklistItemsEnum];
/**
 * Controls whether to copy service level expectations.
 * @export
 * @type InlineObject25CopyServiceLevelExpectationsEnum
 */
export declare const InlineObject25CopyServiceLevelExpectationsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject25CopyServiceLevelExpectationsEnum = typeof InlineObject25CopyServiceLevelExpectationsEnum[keyof typeof InlineObject25CopyServiceLevelExpectationsEnum];
/**
* Workflow data.
*/
export declare class InlineObject25 {
    /**
    * Controls whether to copy exit criteria.
    */
    'copy_column_checklist_items'?: InlineObject25CopyColumnChecklistItemsEnum;
    /**
    * Controls whether to copy service level expectations.
    */
    'copy_service_level_expectations'?: InlineObject25CopyServiceLevelExpectationsEnum;
    /**
    * Name of the new workflow.
    */
    'name'?: string;
    /**
    * Where the workflow will be copied.
    */
    'to_board_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject25>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject26 {
    /**
    * The position of the child card within the parent's list of linked cards.
    */
    'linked_template_card_position'?: number;
    /**
    * The position of the parent card within the child's list of linked cards.
    */
    'template_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject26>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected value data for the card template.
*/
export declare class InlineObject27 {
    /**
    * The position of the value within the list of selected values.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject27>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject28 {
    /**
    * The position of the parent card within the child's list of linked cards.
    */
    'linked_template_card_position'?: number;
    /**
    * The position of the child card within the parent's list of linked cards.
    */
    'template_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject28>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject29 {
    /**
    * The position of the successor card within the predecessor's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The position of the predecessor card within the successor's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject29>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject3AvailabilityEnum
 */
export declare const InlineObject3AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject3AvailabilityEnum = typeof InlineObject3AvailabilityEnum[keyof typeof InlineObject3AvailabilityEnum];
/**
 * Controls whether this block reason is enabled.
 * @export
 * @type InlineObject3IsEnabledEnum
 */
export declare const InlineObject3IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject3IsEnabledEnum = typeof InlineObject3IsEnabledEnum[keyof typeof InlineObject3IsEnabledEnum];
/**
 * Controls whether this block reason signifies that the card is blocked because of another card.
 * @export
 * @type InlineObject3WithCardsEnum
 */
export declare const InlineObject3WithCardsEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject3WithCardsEnum = typeof InlineObject3WithCardsEnum[keyof typeof InlineObject3WithCardsEnum];
/**
 * Controls whether this block reason signifies that the card is blocked until a given date.
 * @export
 * @type InlineObject3WithDateEnum
 */
export declare const InlineObject3WithDateEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject3WithDateEnum = typeof InlineObject3WithDateEnum[keyof typeof InlineObject3WithDateEnum];
/**
 * Controls whether this block reason signifies that the card is blocked because of a user.
 * @export
 * @type InlineObject3WithUsersEnum
 */
export declare const InlineObject3WithUsersEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject3WithUsersEnum = typeof InlineObject3WithUsersEnum[keyof typeof InlineObject3WithUsersEnum];
/**
* Block reason data.
*/
export declare class InlineObject3 {
    /**
    * When set to 0 the block reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the block reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the block reason is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject3AvailabilityEnum;
    /**
    * The color of the block reason. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * An icon for the block reason. If set to 0, the block reason will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this block reason is enabled.
    */
    'is_enabled'?: InlineObject3IsEnabledEnum;
    /**
    * The block reason.
    */
    'label'?: string;
    /**
    * Controls whether this block reason signifies that the card is blocked because of another card.
    */
    'with_cards'?: InlineObject3WithCardsEnum;
    /**
    * Controls whether this block reason signifies that the card is blocked until a given date.
    */
    'with_date'?: InlineObject3WithDateEnum;
    /**
    * Controls whether this block reason signifies that the card is blocked because of a user.
    */
    'with_users'?: InlineObject3WithUsersEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject3>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject30 {
    /**
    * The position of the related card within the card's list of linked cards.
    */
    'linked_template_card_position'?: number;
    /**
    * The position of the card within the related card's list of linked cards.
    */
    'template_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject30>, skipDefaultValuesInitialization?: boolean);
}
/**
* Sticker data.
*/
export declare class InlineObject31 {
    /**
    * The id of the sticker.
    */
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject31>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject32 {
    /**
    * The position of the predecessor card within the successor's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The position of the successor card within the predecessor's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject32>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.
 * @export
 * @type InlineObject33AllPropertiesAreLockedEnum
 */
export declare const InlineObject33AllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject33AllPropertiesAreLockedEnum = typeof InlineObject33AllPropertiesAreLockedEnum[keyof typeof InlineObject33AllPropertiesAreLockedEnum];
/**
 * When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject33AvailabilityEnum
 */
export declare const InlineObject33AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject33AvailabilityEnum = typeof InlineObject33AvailabilityEnum[keyof typeof InlineObject33AvailabilityEnum];
/**
 * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
 * @export
 * @type InlineObject33CardColorSyncEnum
 */
export declare const InlineObject33CardColorSyncEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject33CardColorSyncEnum = typeof InlineObject33CardColorSyncEnum[keyof typeof InlineObject33CardColorSyncEnum];
/**
 * Controls whether this card type is enabled.
 * @export
 * @type InlineObject33IsEnabledEnum
 */
export declare const InlineObject33IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject33IsEnabledEnum = typeof InlineObject33IsEnabledEnum[keyof typeof InlineObject33IsEnabledEnum];
/**
* Card type data.
*/
export declare class InlineObject33 {
    /**
    * Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.
    */
    'all_properties_are_locked'?: InlineObject33AllPropertiesAreLockedEnum;
    /**
    * When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject33AvailabilityEnum;
    /**
    * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
    */
    'card_color_sync'?: InlineObject33CardColorSyncEnum;
    /**
    * The color of the card type. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A description of the new card type.
    */
    'description'?: string;
    /**
    * An icon for the card type. If set to 0, the card type will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this card type is enabled.
    */
    'is_enabled'?: InlineObject33IsEnabledEnum;
    /**
    * A name for the new card type.
    */
    'name': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject33>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.
 * @export
 * @type InlineObject34AllPropertiesAreLockedEnum
 */
export declare const InlineObject34AllPropertiesAreLockedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject34AllPropertiesAreLockedEnum = typeof InlineObject34AllPropertiesAreLockedEnum[keyof typeof InlineObject34AllPropertiesAreLockedEnum];
/**
 * When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject34AvailabilityEnum
 */
export declare const InlineObject34AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject34AvailabilityEnum = typeof InlineObject34AvailabilityEnum[keyof typeof InlineObject34AvailabilityEnum];
/**
 * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
 * @export
 * @type InlineObject34CardColorSyncEnum
 */
export declare const InlineObject34CardColorSyncEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject34CardColorSyncEnum = typeof InlineObject34CardColorSyncEnum[keyof typeof InlineObject34CardColorSyncEnum];
/**
 * Controls whether this card type is enabled.
 * @export
 * @type InlineObject34IsEnabledEnum
 */
export declare const InlineObject34IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject34IsEnabledEnum = typeof InlineObject34IsEnabledEnum[keyof typeof InlineObject34IsEnabledEnum];
/**
* Card type data.
*/
export declare class InlineObject34 {
    /**
    * Controls whether the icon_type, icon_id, color and card_color_sync properties can be modified per board.
    */
    'all_properties_are_locked'?: InlineObject34AllPropertiesAreLockedEnum;
    /**
    * When set to 0 the card type has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the card type is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the card type is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject34AvailabilityEnum;
    /**
    * When set to 1 the color of the cards with this type will be replaced with the color of the type and cannot be changed manually.
    */
    'card_color_sync'?: InlineObject34CardColorSyncEnum;
    /**
    * The color of the card type. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A description of the new card type.
    */
    'description'?: string;
    /**
    * An icon for the card type. If set to 0, the card type will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this card type is enabled.
    */
    'is_enabled'?: InlineObject34IsEnabledEnum;
    /**
    * The name for the card type.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject34>, skipDefaultValuesInitialization?: boolean);
}
/**
* Cards data.
*/
export declare class InlineObject35 {
    /**
    * A list of cards data.
    */
    'cards': Array<CardCreateRequest>;
    /**
    * Exceeding reason data.
    */
    'exceeding_reason'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject35>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card ids data.
*/
export declare class InlineObject36 {
    /**
    * A list of card ids.
    */
    'card_ids': Array<number>;
    /**
    * Exceeding reason data.
    */
    'exceeding_reason'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject36>, skipDefaultValuesInitialization?: boolean);
}
/**
* Cards data.
*/
export declare class InlineObject37 {
    'cards': Array<CardUpdateWithCardIdRequest>;
    /**
    * Exceeding reason data.
    */
    'exceeding_reason'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject37>, skipDefaultValuesInitialization?: boolean);
}
/**
* Block card data.
*/
export declare class InlineObject38 {
    /**
    * If the card is blocked because it depends on other cards and the block reason allows showing this, their ids should be provided here.
    */
    'cards'?: Array<number>;
    /**
    * A comment about the block reason.
    */
    'comment'?: string;
    /**
    * If the card is blocked until a given date and the block reason allows showing this, the date should be provided here.
    */
    'date'?: Date;
    /**
    * The id of the block reason.
    */
    'reason_id'?: number;
    /**
    * If the card is blocked because it depends on users and the block reason allows showing this, their ids should be provided here.
    */
    'users'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject38>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject39 {
    /**
    * The position of the parent card within the child's list of linked cards.
    */
    'card_position'?: number;
    /**
    * Exceeding reason data.
    */
    'exceeding_reason'?: string;
    /**
    * The position of the child card within the parent's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject39>, skipDefaultValuesInitialization?: boolean);
}
/**
* Block resaon boards data.
*/
export declare class InlineObject4 {
    /**
    * A list of board ids where you want to be available the block reason.
    */
    'board_ids_to_add'?: Array<number>;
    /**
    * A list of board ids where you want to be unavailable the block reason.
    */
    'board_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject4>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field file data.
*/
export declare class InlineObject40 {
    /**
    * The name of the file.
    */
    'file_name'?: string;
    /**
    * The link to the file.
    */
    'link'?: string;
    /**
    * The position of the file within the list of files.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject40>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field selected card data.
*/
export declare class InlineObject41 {
    /**
    * The position of the card within the list of selected cards.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject41>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Your vote.
 * @export
 * @type InlineObject42VoteEnum
 */
export declare const InlineObject42VoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject42VoteEnum = typeof InlineObject42VoteEnum[keyof typeof InlineObject42VoteEnum];
/**
* Card custom field vote data.
*/
export declare class InlineObject42 {
    /**
    * A comment about your vote.
    */
    'comment'?: string;
    /**
    * Your vote.
    */
    'vote'?: InlineObject42VoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject42>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Your vote.
 * @export
 * @type InlineObject43VoteEnum
 */
export declare const InlineObject43VoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject43VoteEnum = typeof InlineObject43VoteEnum[keyof typeof InlineObject43VoteEnum];
/**
* Card custom field vote data.
*/
export declare class InlineObject43 {
    /**
    * A comment about your vote.
    */
    'comment'?: string;
    /**
    * Your vote.
    */
    'vote'?: InlineObject43VoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject43>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject44 {
    /**
    * The position of the child card within the parent's list of linked cards.
    */
    'card_position'?: number;
    /**
    * Exceeding reason data.
    */
    'exceeding_reason'?: string;
    /**
    * The position of the parent card within the child's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject44>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject45 {
    /**
    * The position of the successor card within the predecessor's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The position of the predecessor card within the successor's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject45>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject46 {
    /**
    * The position of the card within the related card's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The position of the related card within the card's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject46>, skipDefaultValuesInitialization?: boolean);
}
/**
 * If set to 1 and the sticker has already been added to the card, it will not be added again. In this case a 409 response will be sent.
 * @export
 * @type InlineObject47IfNotPresentEnum
 */
export declare const InlineObject47IfNotPresentEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject47IfNotPresentEnum = typeof InlineObject47IfNotPresentEnum[keyof typeof InlineObject47IfNotPresentEnum];
/**
* Sticker data.
*/
export declare class InlineObject47 {
    /**
    * If set to 1 and the sticker has already been added to the card, it will not be added again. In this case a 409 response will be sent.
    */
    'if_not_present'?: InlineObject47IfNotPresentEnum;
    /**
    * The id of the sticker.
    */
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject47>, skipDefaultValuesInitialization?: boolean);
}
/**
* Link data.
*/
export declare class InlineObject48 {
    /**
    * The position of the predecessor card within the successor's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The position of the successor card within the predecessor's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject48>, skipDefaultValuesInitialization?: boolean);
}
/**
* Domain data.
*/
export declare class InlineObject49 {
    /**
    * The domain name to be checked.
    */
    'domain': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject49>, skipDefaultValuesInitialization?: boolean);
}
/**
* Board data.
*/
export declare class InlineObject5 {
    /**
    * The description of the new board.
    */
    'description'?: string;
    /**
    * The name of the new board.
    */
    'name': string;
    /**
    * The id of the workspace to hold the new board.
    */
    'workspace_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject5>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the value is selected by default.
 * @export
 * @type InlineObject50IsDefaultEnum
 */
export declare const InlineObject50IsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject50IsDefaultEnum = typeof InlineObject50IsDefaultEnum[keyof typeof InlineObject50IsDefaultEnum];
/**
* Custom field allowed value data.
*/
export declare class InlineObject50 {
    /**
    * Controls whether the value is selected by default.
    */
    'is_default'?: InlineObject50IsDefaultEnum;
    /**
    * The position of the value within the dropdown.
    */
    'position'?: number;
    /**
    * The new value.
    */
    'value': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject50>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the value is selected by default.
 * @export
 * @type InlineObject51IsDefaultEnum
 */
export declare const InlineObject51IsDefaultEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject51IsDefaultEnum = typeof InlineObject51IsDefaultEnum[keyof typeof InlineObject51IsDefaultEnum];
/**
* Custom field allowed value data.
*/
export declare class InlineObject51 {
    /**
    * Controls whether the value is selected by default.
    */
    'is_default'?: InlineObject51IsDefaultEnum;
    /**
    * The position of the value within the dropdown.
    */
    'position'?: number;
    /**
    * The new value.
    */
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject51>, skipDefaultValuesInitialization?: boolean);
}
/**
* Dashboard page data.
*/
export declare class InlineObject52 {
    /**
    * The name of the new board.
    */
    'name': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject52>, skipDefaultValuesInitialization?: boolean);
}
/**
* Dashboard page data.
*/
export declare class InlineObject53 {
    /**
    * The name of the board.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject53>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject54AvailabilityEnum
 */
export declare const InlineObject54AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject54AvailabilityEnum = typeof InlineObject54AvailabilityEnum[keyof typeof InlineObject54AvailabilityEnum];
/**
 * Controls whether this discard reason is enabled.
 * @export
 * @type InlineObject54IsEnabledEnum
 */
export declare const InlineObject54IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject54IsEnabledEnum = typeof InlineObject54IsEnabledEnum[keyof typeof InlineObject54IsEnabledEnum];
/**
* Discard reason data.
*/
export declare class InlineObject54 {
    /**
    * When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject54AvailabilityEnum;
    /**
    * Controls whether this discard reason is enabled.
    */
    'is_enabled'?: InlineObject54IsEnabledEnum;
    /**
    * The discard reason.
    */
    'label': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject54>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject55AvailabilityEnum
 */
export declare const InlineObject55AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject55AvailabilityEnum = typeof InlineObject55AvailabilityEnum[keyof typeof InlineObject55AvailabilityEnum];
/**
 * Controls whether this discard reason is enabled.
 * @export
 * @type InlineObject55IsEnabledEnum
 */
export declare const InlineObject55IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject55IsEnabledEnum = typeof InlineObject55IsEnabledEnum[keyof typeof InlineObject55IsEnabledEnum];
/**
* Discard reason data.
*/
export declare class InlineObject55 {
    /**
    * When set to 0 the discard reason has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the discard reason is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the discard reason is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject55AvailabilityEnum;
    /**
    * Controls whether this discard reason is enabled.
    */
    'is_enabled'?: InlineObject55IsEnabledEnum;
    /**
    * The discard reason.
    */
    'label'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject55>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card logged time data.
*/
export declare class InlineObject56 {
    /**
    * The id of the card for which the time is logged.
    */
    'card_id': number;
    /**
    * The id of the column in which we want the logged time to appear.
    */
    'column_id'?: number;
    /**
    * An optional comment.
    */
    'comment'?: string;
    /**
    * The date for which the time is logged.
    */
    'date'?: Date;
    /**
    * The id of the lane in which we want the logged time to appear.
    */
    'lane_id'?: number;
    /**
    * If the logged time is for a subtask, the id of the subtask for which the time is logged. If the logged time is for a card, this field can be skipped or a null value can be sent.
    */
    'subtask_id'?: number;
    /**
    * The amount of time to log in seconds.
    */
    'time': number;
    /**
    * The id of the user for whom the time is logged.
    */
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject56>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card logged time data.
*/
export declare class InlineObject57 {
    /**
    * The id of the card for which the time is logged.
    */
    'card_id'?: number;
    /**
    * The id of the column in which we want the logged time to appear.
    */
    'column_id'?: number;
    /**
    * An optional comment.
    */
    'comment'?: string;
    /**
    * The date for which the time is logged.
    */
    'date'?: Date;
    /**
    * The id of the lane in which we want the logged time to appear.
    */
    'lane_id'?: number;
    /**
    * If the logged time is for a subtask, the id of the subtask for which the time is logged. If the logged time is for a card, this field can be skipped or a null value can be sent.
    */
    'subtask_id'?: number;
    /**
    * The amount of time to log in seconds.
    */
    'time'?: number;
    /**
    * The id of the user for whom the time is logged.
    */
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject57>, skipDefaultValuesInitialization?: boolean);
}
/**
* Settings boards data.
*/
export declare class InlineObject58 {
    /**
    * A list of board ids where you want to set a list of settings.
    */
    'board_ids': Array<number>;
    /**
    * A list of settings whitch you want to set for a list of boards.
    */
    'settings': Array<MyBoardSettingsBatchUpdateSettings>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject58>, skipDefaultValuesInitialization?: boolean);
}
/**
* My dashboard page data.
*/
export declare class InlineObject59 {
    /**
    * The position of the my dashboard page.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject59>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the board is archived or not.
 * @export
 * @type InlineObject6IsArchivedEnum
 */
export declare const InlineObject6IsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject6IsArchivedEnum = typeof InlineObject6IsArchivedEnum[keyof typeof InlineObject6IsArchivedEnum];
/**
* Board data.
*/
export declare class InlineObject6 {
    /**
    * The description of the new board.
    */
    'description'?: string;
    /**
    * Controls whether the board is archived or not.
    */
    'is_archived'?: InlineObject6IsArchivedEnum;
    /**
    * The name of the board.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject6>, skipDefaultValuesInitialization?: boolean);
}
/**
* My dashboard page widget data.
*/
export declare class InlineObject60 {
    /**
    * The position of the widget on one of mine dashboard pages.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject60>, skipDefaultValuesInitialization?: boolean);
}
/**
* My dashboard page workspace data.
*/
export declare class InlineObject61 {
    /**
    * The position of the workspace on one of mine dashboard pages.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject61>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the board within the list of your favorite boards.
*/
export declare class InlineObject62 {
    /**
    * The position of the board within the list of your favorite boards.
    */
    'position': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject62>, skipDefaultValuesInitialization?: boolean);
}
/**
* Role data.
*/
export declare class InlineObject63 {
    /**
    * The name of the new role.
    */
    'name': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject63>, skipDefaultValuesInitialization?: boolean);
}
/**
* Role data.
*/
export declare class InlineObject64 {
    /**
    * The name of the new role.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject64>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject65AvailabilityEnum
 */
export declare const InlineObject65AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject65AvailabilityEnum = typeof InlineObject65AvailabilityEnum[keyof typeof InlineObject65AvailabilityEnum];
/**
 * Controls whether this sticker is enabled.
 * @export
 * @type InlineObject65IsEnabledEnum
 */
export declare const InlineObject65IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject65IsEnabledEnum = typeof InlineObject65IsEnabledEnum[keyof typeof InlineObject65IsEnabledEnum];
/**
* Sticker data.
*/
export declare class InlineObject65 {
    /**
    * When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject65AvailabilityEnum;
    /**
    * The color of the sticker. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * An icon for the sticker. If set to 0, the sticker will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this sticker is enabled.
    */
    'is_enabled'?: InlineObject65IsEnabledEnum;
    /**
    * A label for the new sticker.
    */
    'label': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject65>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject66AvailabilityEnum
 */
export declare const InlineObject66AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject66AvailabilityEnum = typeof InlineObject66AvailabilityEnum[keyof typeof InlineObject66AvailabilityEnum];
/**
 * Controls whether this sticker is enabled.
 * @export
 * @type InlineObject66IsEnabledEnum
 */
export declare const InlineObject66IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject66IsEnabledEnum = typeof InlineObject66IsEnabledEnum[keyof typeof InlineObject66IsEnabledEnum];
/**
* Sticker data.
*/
export declare class InlineObject66 {
    /**
    * When set to 0 the sticker has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the sticker is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the sticker is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject66AvailabilityEnum;
    /**
    * The color of the sticker. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * An icon for the sticker. If set to 0, the sticker will not have an icon.
    */
    'icon_id'?: number;
    /**
    * The type of the icon. 0 - system. 1 - user.
    */
    'icon_type'?: number;
    /**
    * Controls whether this sticker is enabled.
    */
    'is_enabled'?: InlineObject66IsEnabledEnum;
    /**
    * The label for the sticker.
    */
    'label'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject66>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject67AvailabilityEnum
 */
export declare const InlineObject67AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject67AvailabilityEnum = typeof InlineObject67AvailabilityEnum[keyof typeof InlineObject67AvailabilityEnum];
/**
 * Controls whether this tag is enabled.
 * @export
 * @type InlineObject67IsEnabledEnum
 */
export declare const InlineObject67IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject67IsEnabledEnum = typeof InlineObject67IsEnabledEnum[keyof typeof InlineObject67IsEnabledEnum];
/**
* Tag data.
*/
export declare class InlineObject67 {
    /**
    * When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject67AvailabilityEnum;
    /**
    * The color of the tag. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this tag is enabled.
    */
    'is_enabled'?: InlineObject67IsEnabledEnum;
    /**
    * A label for the new tag.
    */
    'label': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject67>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.
 * @export
 * @type InlineObject68AvailabilityEnum
 */
export declare const InlineObject68AvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject68AvailabilityEnum = typeof InlineObject68AvailabilityEnum[keyof typeof InlineObject68AvailabilityEnum];
/**
 * Controls whether this tag is enabled.
 * @export
 * @type InlineObject68IsEnabledEnum
 */
export declare const InlineObject68IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject68IsEnabledEnum = typeof InlineObject68IsEnabledEnum[keyof typeof InlineObject68IsEnabledEnum];
/**
* Tag data.
*/
export declare class InlineObject68 {
    /**
    * When set to 0 the tag has to be added to boards manually. Every workspace manager can add it to the boards they can manage. When set to 1 the tag is added automatically to all new boards but workspace managers can remove it from the boards they can manage. When set to 2 the tag is added automatically to all boards and cannot be removed.
    */
    'availability'?: InlineObject68AvailabilityEnum;
    /**
    * The color of the tag. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * Controls whether this tag is enabled.
    */
    'is_enabled'?: InlineObject68IsEnabledEnum;
    /**
    * The label for the tag.
    */
    'label'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject68>, skipDefaultValuesInitialization?: boolean);
}
/**
* Tag boards data.
*/
export declare class InlineObject69 {
    /**
    * A list of board ids where you want to be available the tag.
    */
    'board_ids_to_add'?: Array<number>;
    /**
    * A list of board ids where you want to be unavailable the tag.
    */
    'board_ids_to_remove'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject69>, skipDefaultValuesInitialization?: boolean);
}
/**
* Cell limit data.
*/
export declare class InlineObject7 {
    /**
    * The column id of the cell.
    */
    'column_id': number;
    /**
    * The lane id of the cell.
    */
    'lane_id': number;
    /**
    * The WIP limit of the cell. Set to 0 to remove the current WIP limit.
    */
    'limit': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject7>, skipDefaultValuesInitialization?: boolean);
}
/**
* Team data.
*/
export declare class InlineObject70 {
    /**
    * The description of the team.
    */
    'description'?: string;
    /**
    * A name for the new team.
    */
    'name': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject70>, skipDefaultValuesInitialization?: boolean);
}
/**
* Team data.
*/
export declare class InlineObject71 {
    /**
    * The description of the team.
    */
    'description'?: string;
    /**
    * The name for the team.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject71>, skipDefaultValuesInitialization?: boolean);
}
/**
* Email
*/
export declare class InlineObject72 {
    /**
    * The email of the new user.
    */
    'email': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject72>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the user is enabled or not.
 * @export
 * @type InlineObject73IsEnabledEnum
 */
export declare const InlineObject73IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject73IsEnabledEnum = typeof InlineObject73IsEnabledEnum[keyof typeof InlineObject73IsEnabledEnum];
/**
 * Controls whether the user has two-factor authentication enabled or not.
 * @export
 * @type InlineObject73IsTfaEnabledEnum
 */
export declare const InlineObject73IsTfaEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject73IsTfaEnabledEnum = typeof InlineObject73IsTfaEnabledEnum[keyof typeof InlineObject73IsTfaEnabledEnum];
/**
* User data.
*/
export declare class InlineObject73 {
    /**
    * The email of the user.
    */
    'email'?: string;
    /**
    * Controls whether the user is enabled or not.
    */
    'is_enabled'?: InlineObject73IsEnabledEnum;
    /**
    * Controls whether the user has two-factor authentication enabled or not.
    */
    'is_tfa_enabled'?: InlineObject73IsTfaEnabledEnum;
    /**
    * The full name of the user.
    */
    'realname'?: string;
    /**
    * The username of the user.
    */
    'username'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject73>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the webhook is enabled or not.
 * @export
 * @type InlineObject74IsEnabledEnum
 */
export declare const InlineObject74IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject74IsEnabledEnum = typeof InlineObject74IsEnabledEnum[keyof typeof InlineObject74IsEnabledEnum];
/**
* Webhook data.
*/
export declare class InlineObject74 {
    /**
    * An id of a board for the events of which the webhook will be invoked. If not set, the webhook will be invoked for the events of all boards.
    */
    'board_id'?: number;
    /**
    * Controls whether the webhook is enabled or not.
    */
    'is_enabled'?: InlineObject74IsEnabledEnum;
    /**
    * The url of the new webhook.
    */
    'url': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject74>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the webhook is enabled or not.
 * @export
 * @type InlineObject75IsEnabledEnum
 */
export declare const InlineObject75IsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject75IsEnabledEnum = typeof InlineObject75IsEnabledEnum[keyof typeof InlineObject75IsEnabledEnum];
/**
* Webhook data.
*/
export declare class InlineObject75 {
    /**
    * An id of a board for the events of which the webhook will be invoked. If set to null the webhook will be invoked for the events of all boards.
    */
    'board_id'?: number;
    /**
    * Controls whether the webhook is enabled or not.
    */
    'is_enabled'?: InlineObject75IsEnabledEnum;
    /**
    * The url of the webhook.
    */
    'url'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject75>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The type of the workspace: 1 - team workspace, 2 - management workspace.
 * @export
 * @type InlineObject76TypeEnum
 */
export declare const InlineObject76TypeEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject76TypeEnum = typeof InlineObject76TypeEnum[keyof typeof InlineObject76TypeEnum];
/**
* Workspace data.
*/
export declare class InlineObject76 {
    /**
    * The name of the new workspace.
    */
    'name': string;
    /**
    * The type of the workspace: 1 - team workspace, 2 - management workspace.
    */
    'type'?: InlineObject76TypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject76>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the workspace is archived or not.
 * @export
 * @type InlineObject77IsArchivedEnum
 */
export declare const InlineObject77IsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineObject77IsArchivedEnum = typeof InlineObject77IsArchivedEnum[keyof typeof InlineObject77IsArchivedEnum];
/**
* Workspace data.
*/
export declare class InlineObject77 {
    /**
    * Controls whether the workspace is archived or not.
    */
    'is_archived'?: InlineObject77IsArchivedEnum;
    /**
    * The name of the workspace.
    */
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject77>, skipDefaultValuesInitialization?: boolean);
}
/**
 * 1 - if the column is an activity, 2 - if the column is a queue.
 * @export
 * @type InlineObject8FlowTypeEnum
 */
export declare const InlineObject8FlowTypeEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject8FlowTypeEnum = typeof InlineObject8FlowTypeEnum[keyof typeof InlineObject8FlowTypeEnum];
/**
 * 1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!
 * @export
 * @type InlineObject8SectionEnum
 */
export declare const InlineObject8SectionEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
    readonly NUMBER_3: 3;
    readonly NUMBER_4: 4;
};
export declare type InlineObject8SectionEnum = typeof InlineObject8SectionEnum[keyof typeof InlineObject8SectionEnum];
/**
* Column data.
*/
export declare class InlineObject8 {
    /**
    * The number of cards per row displayed in the cells of this column.
    */
    'cards_per_row'?: number;
    /**
    * The column color. 6 hexadecimal characters or an empty string is expected.
    */
    'color'?: string;
    /**
    * A description of the new column.
    */
    'description'?: string;
    /**
    * 1 - if the column is an activity, 2 - if the column is a queue.
    */
    'flow_type'?: InlineObject8FlowTypeEnum;
    /**
    * The WIP limit of the column.
    */
    'limit'?: number;
    /**
    * The name of the new column.
    */
    'name': string;
    /**
    * The id of the parent column. Either workflow and section or parent_column_id must be set, but not all of them!
    */
    'parent_column_id'?: number;
    /**
    * The position of the column within the section or its parent.
    */
    'position': number;
    /**
    * 1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!
    */
    'section'?: InlineObject8SectionEnum;
    /**
    * An id that indentifies a workflow.
    */
    'workflow_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject8>, skipDefaultValuesInitialization?: boolean);
}
/**
 * 1 - if the column is an activity, 2 - if the column is a queue.
 * @export
 * @type InlineObject9FlowTypeEnum
 */
export declare const InlineObject9FlowTypeEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type InlineObject9FlowTypeEnum = typeof InlineObject9FlowTypeEnum[keyof typeof InlineObject9FlowTypeEnum];
/**
 * 1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!
 * @export
 * @type InlineObject9SectionEnum
 */
export declare const InlineObject9SectionEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
    readonly NUMBER_3: 3;
    readonly NUMBER_4: 4;
};
export declare type InlineObject9SectionEnum = typeof InlineObject9SectionEnum[keyof typeof InlineObject9SectionEnum];
/**
* Column data.
*/
export declare class InlineObject9 {
    /**
    * The number of cards per row displayed in the cells of this column.
    */
    'cards_per_row'?: number;
    /**
    * The column color. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A description of the column.
    */
    'description'?: string;
    /**
    * 1 - if the column is an activity, 2 - if the column is a queue.
    */
    'flow_type'?: InlineObject9FlowTypeEnum;
    /**
    * The WIP limit of the column.
    */
    'limit'?: number;
    /**
    * The name of the column.
    */
    'name'?: string;
    /**
    * The id of the parent column. One of section and parent_column_id may be set, but not both!
    */
    'parent_column_id'?: number;
    /**
    * The position of the column within the section or its parent.
    */
    'position'?: number;
    /**
    * 1 - backlog, 2 - requested, 3 - progress, 4 - done. 2, 3 and 4 are only valid for the cards workflow. Either workflow and section or parent_column_id must be set, but not all of them!
    */
    'section'?: InlineObject9SectionEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineObject9>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200 {
    /**
    * A list of features.
    */
    'data'?: Array<CompanyAddon>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2001 {
    /**
    * A list of features.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2001>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20010 {
    /**
    * A list of block reasons creation, deletion, update events.
    */
    'data'?: Array<BlockReasonHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20010>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200100 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200100>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200101 {
    'data'?: CardCustomFieldFile;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200101>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200102 {
    /**
    * A list of selected cards.
    */
    'data'?: Array<CardCustomFieldSelectedCard>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200102>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200103 {
    'data'?: InlineResponse200103Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200103>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the selected card.
*/
export declare class InlineResponse200103Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200103Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200104 {
    /**
    * A list of selected values.
    */
    'data'?: Array<CardCustomFieldSelectedValue>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200104>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200105 {
    /**
    * A list of votes.
    */
    'data'?: Array<CardCustomFieldDataVote>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200105>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200106 {
    'data'?: InlineResponse200106Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200106>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type InlineResponse200106DataVoteEnum
 */
export declare const InlineResponse200106DataVoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse200106DataVoteEnum = typeof InlineResponse200106DataVoteEnum[keyof typeof InlineResponse200106DataVoteEnum];
/**
* A vote.
*/
export declare class InlineResponse200106Data {
    'comment'?: string;
    'vote'?: InlineResponse200106DataVoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200106Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* Card custom field vote data.
*/
export declare class InlineResponse200107 {
    'data'?: InlineResponse200107Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200107>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Your vote.
 * @export
 * @type InlineResponse200107DataVoteEnum
 */
export declare const InlineResponse200107DataVoteEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse200107DataVoteEnum = typeof InlineResponse200107DataVoteEnum[keyof typeof InlineResponse200107DataVoteEnum];
/**
* A vote.
*/
export declare class InlineResponse200107Data {
    /**
    * A comment about your vote.
    */
    'comment'?: string;
    /**
    * Your vote.
    */
    'vote'?: InlineResponse200107DataVoteEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200107Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200108 {
    /**
    * A list of linked cards.
    */
    'data'?: Array<LinkedCardWithType>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200108>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200109 {
    'data'?: Array<CardOutcomeWithId>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200109>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20011 {
    /**
    * A list of boards.
    */
    'data'?: Array<InlineResponse20011Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20011>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200110 {
    'data'?: CardOutcomeWithId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200110>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200111 {
    'data'?: CardOutcome;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200111>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200112 {
    'data'?: Array<CardOutcomeCheckpointWithId>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200112>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200113 {
    'data'?: CardOutcomeCheckpointWithId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200113>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200114 {
    'data'?: CardOutcomeValueWithId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200114>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200115 {
    'data'?: CardOutcomeValueWithIdAndOutcomeId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200115>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200116 {
    /**
    * A list of parent cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200116>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200117 {
    /**
    * A list of child cards.
    */
    'data'?: Array<PredecessorSuccessorLink>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200117>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200118 {
    /**
    * A list of predecessor cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200118>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200119 {
    /**
    * A list of related cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200119>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20011Data {
    'board_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20011Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20012 {
    /**
    * A list of cards.
    */
    'data'?: Array<InlineResponse20012Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20012>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200120 {
    /**
    * A list of card revisions.
    */
    'data'?: Array<InlineResponse200120Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200120>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200120Data {
    'replaced_at'?: Date;
    'revision'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200120Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200121 {
    'data'?: CardRevision;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200121>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200122 {
    /**
    * A list of card stickers.
    */
    'data'?: Array<CardSticker>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200122>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200123 {
    'data'?: CardSticker;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200123>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200124 {
    'data'?: Array<CardSubtaskWithId>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200124>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200125 {
    'data'?: CardSubtaskWithId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200125>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200126 {
    /**
    * A list of successor cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200126>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200127 {
    /**
    * A list of card tags.
    */
    'data'?: Array<CardTag>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200127>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200128 {
    /**
    * A list of card watchers.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200128>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200129 {
    'data'?: boolean;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200129>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20012Data {
    'card_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20012Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20013 {
    /**
    * A list of boards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20013>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200130 {
    /**
    * A list of custom field management history events.
    */
    'data'?: Array<CustomFieldHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200130>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200131 {
    /**
    * A list of allowed values.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200131>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200132 {
    'data'?: CustomFieldAllowedValue;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200132>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200133 {
    /**
    * A list of dashboard pages.
    */
    'data'?: Array<DashboardPage>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200133>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200134 {
    'data'?: DashboardPage;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200134>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200135 {
    /**
    * A list of teams and their roles can manage dashboard page.
    */
    'data'?: Array<InlineResponse200135Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200135>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200135Data {
    'can_edit'?: number;
    'dashboard_page_id'?: number;
    'team_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200135Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200136 {
    /**
    * A list of users and their roles can manage dashboard page.
    */
    'data'?: Array<InlineResponse200136Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200136>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200136Data {
    'can_edit'?: number;
    'dashboard_page_id'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200136Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200137 {
    /**
    * User dashboard page data
    */
    'data'?: Array<InlineResponse200136Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200137>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200138 {
    /**
    * A list of the workspaces added to a dashboard page.
    */
    'data'?: Array<InlineResponse200138Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200138>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200138Data {
    'dashboard_page_id'?: number;
    'workspace_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200138Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200139 {
    /**
    * A list of discard reasons.
    */
    'data'?: Array<DiscardReason>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200139>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20014 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20014>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200140 {
    'data'?: DiscardReason;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200140>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200141 {
    /**
    * A list of discard reasons creation, deletion, update events
    */
    'data'?: Array<DiscardReasonHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200141>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200142 {
    /**
    * A list of errors from the email integration.
    */
    'data'?: Array<EmailIntegrationError>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200142>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200143 {
    /**
    * A list of emails received by the email integration and their status.
    */
    'data'?: Array<EmailIntegrationHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200143>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200144 {
    /**
    * A list of card logged times.
    */
    'data'?: Array<LoggedTime>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200144>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200145 {
    'data'?: LoggedTime;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200145>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200146 {
    /**
    * A list of logged times creation, deletion, update events.
    */
    'data'?: Array<LoggedTimeHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200146>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200147 {
    'data'?: InlineResponse200147Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200147>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Controls whether the user is confirmed or not.
 * @export
 * @type InlineResponse200147DataIsConfirmedEnum
 */
export declare const InlineResponse200147DataIsConfirmedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse200147DataIsConfirmedEnum = typeof InlineResponse200147DataIsConfirmedEnum[keyof typeof InlineResponse200147DataIsConfirmedEnum];
/**
 * Controls whether the user is enabled or not.
 * @export
 * @type InlineResponse200147DataIsEnabledEnum
 */
export declare const InlineResponse200147DataIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse200147DataIsEnabledEnum = typeof InlineResponse200147DataIsEnabledEnum[keyof typeof InlineResponse200147DataIsEnabledEnum];
/**
 * Controls whether the user has two-factor authentication enabled or not.
 * @export
 * @type InlineResponse200147DataIsTfaEnabledEnum
 */
export declare const InlineResponse200147DataIsTfaEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse200147DataIsTfaEnabledEnum = typeof InlineResponse200147DataIsTfaEnabledEnum[keyof typeof InlineResponse200147DataIsTfaEnabledEnum];
/**
* The data about the active user.
*/
export declare class InlineResponse200147Data {
    /**
    * The file name of avatar of the active user.
    */
    'avatar'?: string;
    /**
    * The email of the active user.
    */
    'email'?: string;
    /**
    * Controls whether the user is confirmed or not.
    */
    'is_confirmed'?: InlineResponse200147DataIsConfirmedEnum;
    /**
    * Controls whether the user is enabled or not.
    */
    'is_enabled'?: InlineResponse200147DataIsEnabledEnum;
    /**
    * Controls whether the user has two-factor authentication enabled or not.
    */
    'is_tfa_enabled'?: InlineResponse200147DataIsTfaEnabledEnum;
    /**
    * The selected language of the active user.
    */
    'language'?: string;
    /**
    * The realname of the active user.
    */
    'realname'?: string;
    /**
    * The registration date of the active user.
    */
    'registration_date'?: Date;
    /**
    * The timezone of the active user.
    */
    'timezone'?: string;
    /**
    * The username of the active user.
    */
    'username'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200147Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200148 {
    'data'?: InlineResponse200148Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200148>, skipDefaultValuesInitialization?: boolean);
}
/**
* Generated api key.
*/
export declare class InlineResponse200148Data {
    'api_key'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200148Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200149 {
    /**
    * A list of my dashboard pages.
    */
    'data'?: Array<MyDashboardPage>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200149>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20015 {
    'data'?: Board;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20015>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200150 {
    'data'?: MyDashboardPage;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200150>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200151 {
    /**
    * A list of the widgets added to one of mine dashboard pages and their positions.
    */
    'data'?: Array<InlineResponse200151Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200151>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200151Data {
    'dashboard_page_id'?: number;
    'position'?: number;
    'widget_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200151Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200152 {
    /**
    * The widget data which is added to one of mine dashboard pages.
    */
    'data'?: Array<InlineResponse200152Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200152>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200152Data {
    'position'?: number;
    'widget_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200152Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200153 {
    /**
    * A list of the workspaces added to one of mine dashboard pages and their positions.
    */
    'data'?: Array<InlineResponse200153Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200153>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200153Data {
    'dashboard_page_id'?: number;
    'position'?: number;
    'workspace_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200153Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200154 {
    /**
    * The workspace data which is added to one of mine dashboard pages.
    */
    'data'?: Array<InlineResponse200154Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200154>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200154Data {
    'position'?: number;
    'workspace_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200154Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200155 {
    'data'?: InlineResponse200155Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200155>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the board within the list of your favorite boards
*/
export declare class InlineResponse200155Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200155Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200156 {
    'data'?: InlineResponse200156Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200156>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the board within the list of your favorite boards.
*/
export declare class InlineResponse200156Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200156Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200157 {
    /**
    * An hourly old api limit.
    */
    'data'?: Array<OldApiLimit>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200157>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200158 {
    /**
    * A list of api requests.
    */
    'data'?: Array<OldApiRequestHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200158>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200159 {
    /**
    * An aggregated response by api`s history.
    */
    'data'?: Array<OldApiRequestHistoryAggregated>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200159>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20016 {
    /**
    * A list of block reasons.
    */
    'data'?: Array<InlineResponse20016Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20016>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200160 {
    /**
    * A list of plans.
    */
    'data'?: Array<CompanyPlan>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200160>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200161 {
    /**
    * A list of plans.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200161>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200162 {
    'data'?: CompanyPlanTrial;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200162>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200163 {
    /**
    * A list of roles.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200163>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200164 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200164>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200165 {
    'data'?: Role;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200165>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200166 {
    /**
    * A list of permissions.
    */
    'data'?: Array<Permission>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200166>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200167 {
    /**
    * A list of stickers.
    */
    'data'?: Array<Sticker>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200167>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200168 {
    'data'?: Sticker;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200168>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200169 {
    /**
    * A list of stickers creation, deletion, update events.
    */
    'data'?: Array<StickerHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200169>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20016Data {
    'reason_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20016Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20017 {
    /**
    * A list of card templates.
    */
    'data'?: Array<InlineResponse20017Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20017>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200170 {
    /**
    * A list of tags.
    */
    'data'?: Array<Tag>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200170>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200171 {
    'data'?: Tag;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200171>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200172 {
    /**
    * A list of tags creation, deletion, update events.
    */
    'data'?: Array<TagHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200172>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200173 {
    /**
    * A list of teams.
    */
    'data'?: Array<Team>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200173>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200174 {
    'data'?: Team;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200174>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200175 {
    /**
    * A list of teams creation, deletion, update events.
    */
    'data'?: Array<TeamHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200175>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200176 {
    /**
    * A list of managers.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200176>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200177 {
    /**
    * A list of users.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200177>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200178 {
    /**
    * A list of users.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200178>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200179 {
    /**
    * A list of user management history events.
    */
    'data'?: Array<UserHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200179>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20017Data {
    /**
    * Template id.
    */
    'template_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20017Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20018 {
    /**
    * A list of card types.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20018>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200180 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200180>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200181 {
    'data'?: User;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200181>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200182 {
    /**
    * A list of boards and board roles.
    */
    'data'?: Array<InlineResponse200182Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200182>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200182Data {
    'board_id'?: number;
    'role_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200182Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200183 {
    /**
    * A list of global privileges.
    */
    'data'?: Array<Privilege>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200183>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200184 {
    /**
    * A list of involved business rules.
    */
    'data'?: Array<InlineResponse200184Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200184>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200184Data {
    'name'?: string;
    'rule_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200184Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200185 {
    'data'?: InlineResponse200185Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200185>, skipDefaultValuesInitialization?: boolean);
}
/**
* The last activity of a user.
*/
export declare class InlineResponse200185Data {
    'last_activity'?: Date;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200185Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200186 {
    /**
    * A list of managed workspaces.
    */
    'data'?: Array<InlineResponse200186Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200186>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200186Data {
    'workspace_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200186Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200187 {
    /**
    * A list of teams.
    */
    'data'?: Array<InlineResponse200187Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200187>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200187Data {
    'team_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200187Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200188 {
    /**
    * A list of webhooks.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200188>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200189 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200189>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20019 {
    'data'?: BoardCardType;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20019>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200190 {
    /**
    * A list of webhooks creation, deletion, update events.
    */
    'data'?: Array<WebhookHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200190>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200191 {
    'data'?: Webhook;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200191>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200192 {
    /**
    * A list of workspaces.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200192>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200193 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200193>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200194 {
    'data'?: Workspace;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200194>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200195 {
    /**
    * A list of workspace managers.
    */
    'data'?: Array<InlineResponse200195Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200195>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse200195Data {
    'manager_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200195Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200196 {
    'data'?: Array<CardCommentAttachmentWithId>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200196>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse200197 {
    'data'?: CardCommentAttachmentWithId;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse200197>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2002 {
    'data'?: CompanyAddonTrial;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2002>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20020 {
    /**
    * A list of cell limits.
    */
    'data'?: Array<CellLimit>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20020>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20021 {
    'data'?: CellLimit;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20021>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20022 {
    /**
    * A list of columns.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20022>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20023 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20023>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20024 {
    'data'?: Column;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20024>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20025 {
    /**
    * Contains all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.
    */
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20025>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20026 {
    'data'?: InlineResponse20026Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20026>, skipDefaultValuesInitialization?: boolean);
}
/**
* A role id.
*/
export declare class InlineResponse20026Data {
    'role_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20026Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20027 {
    /**
    * A list of allowed values.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20027>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20028 {
    'data'?: BoardCustomFieldAllowedValue;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20028>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20029 {
    /**
    * A list of default contributors.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20029>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20029Data {
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20029Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2003 {
    /**
    * An hourly or minutely limit.
    */
    'data'?: Array<ApiLimit>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2003>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20030 {
    /**
    * A list of discard reasons.
    */
    'data'?: Array<InlineResponse20016Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20030>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20031 {
    /**
    * A list of lane section limits.
    */
    'data'?: Array<LaneSectionLimit>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20031>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20032 {
    'data'?: LaneSectionLimit;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20032>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20033 {
    /**
    * A list of lanes.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20033>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20034 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20034>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20035 {
    'data'?: Lane;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20035>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20036 {
    /**
    * A list of merged areas.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20036>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20037 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20037>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20038 {
    'data'?: MergedArea;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20038>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20039 {
    /**
    * A list of settings.
    */
    'data'?: Array<Setting>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20039>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2004 {
    /**
    * A list of api requests.
    */
    'data'?: Array<ApiRequestHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2004>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20040 {
    'data'?: Setting;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20040>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20041 {
    /**
    * A list of boards and workflows.
    */
    'data'?: Array<InlineResponse20011Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20041>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20042 {
    'data'?: InlineResponse20042Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20042>, skipDefaultValuesInitialization?: boolean);
}
/**
* A position in workflow.
*/
export declare class InlineResponse20042Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20042Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20043 {
    'data'?: BoardSettings;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20043>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20044 {
    /**
    * A list of stickers.
    */
    'data'?: Array<InlineResponse20044Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20044>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20044Data {
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20044Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20045 {
    'data'?: BoardSticker;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20045>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20046 {
    'data'?: InlineResponse20046Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20046>, skipDefaultValuesInitialization?: boolean);
}
/**
* A role id.
*/
export declare class InlineResponse20046Data {
    'replaced_at'?: Date;
    'role_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20046Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20047 {
    /**
    * A list of tags.
    */
    'data'?: Array<InlineResponse20047Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20047>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20047Data {
    'tag_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20047Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20048 {
    /**
    * A list of teams and their roles.
    */
    'data'?: Array<InlineResponse20048Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20048>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20048Data {
    'role_id'?: number;
    'team_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20048Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20049 {
    /**
    * A role id.
    */
    'data'?: Array<InlineResponse20049Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20049>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20049Data {
    'role_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20049Data>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse2004Pagination {
    /**
    * The number of pages the result is split into.
    */
    'all_pages'?: number;
    /**
    * The current page.
    */
    'current_page'?: number;
    /**
    * The number of results per page.
    */
    'results_per_page'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2004Pagination>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2005 {
    /**
    * An aggregated response by api`s history.
    */
    'data'?: Array<ApiRequestHistoryAggregated>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2005>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20050 {
    /**
    * A list of board assignees and their roles.
    */
    'data'?: Array<InlineResponse20050Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20050>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20050Data {
    'role_id'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20050Data>, skipDefaultValuesInitialization?: boolean);
}
/**
 * Created at.
 * @export
 * @type InlineResponse20051CreatedAtEnum
 */
export declare const InlineResponse20051CreatedAtEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse20051CreatedAtEnum = typeof InlineResponse20051CreatedAtEnum[keyof typeof InlineResponse20051CreatedAtEnum];
/**
 * Last modified.
 * @export
 * @type InlineResponse20051LastModifiedEnum
 */
export declare const InlineResponse20051LastModifiedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse20051LastModifiedEnum = typeof InlineResponse20051LastModifiedEnum[keyof typeof InlineResponse20051LastModifiedEnum];
/**
 * Reporter.
 * @export
 * @type InlineResponse20051ReporterEnum
 */
export declare const InlineResponse20051ReporterEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type InlineResponse20051ReporterEnum = typeof InlineResponse20051ReporterEnum[keyof typeof InlineResponse20051ReporterEnum];
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20051 {
    /**
    * Board id.
    */
    'board_id'?: number;
    /**
    * Created at.
    */
    'created_at'?: InlineResponse20051CreatedAtEnum;
    /**
    * Last modified.
    */
    'last_modified'?: InlineResponse20051LastModifiedEnum;
    /**
    * Reporter.
    */
    'reporter'?: InlineResponse20051ReporterEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20051>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20052 {
    'data'?: any;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20052>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20053 {
    'data'?: Workflow;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20053>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20054 {
    'data'?: WorkflowCopy;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20054>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20055 {
    /**
    * A list of business rule execution history events.
    */
    'data'?: Array<BusinessRulesExecutionHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20055>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20056 {
    /**
    * A list of card templates.
    */
    'data'?: Array<CardTemplate>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20056>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20057 {
    'data'?: CardTemplate;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20057>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20058 {
    /**
    * A list of card templates creation, deletion, update events.
    */
    'data'?: Array<CardTemplateHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20058>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20059 {
    /**
    * A list of cards for the card template.
    */
    'data'?: Array<CardTemplateCard>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20059>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2006 {
    /**
    * A list of archived card versions.
    */
    'data'?: Array<ArchiveCardVersion>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2006>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20060 {
    'data'?: CardTemplateCard;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20060>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20061 {
    'data'?: Array<CardAttachmentWithPosition>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20061>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20062 {
    'data'?: CardAttachmentWithPosition;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20062>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20063 {
    /**
    * A list of child cards of a card for the card template.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20063>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20064 {
    'data'?: LinkedCard;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20064>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20065 {
    'data'?: InlineResponse20065Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20065>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the child card within the parent's list of linked cards.
*/
export declare class InlineResponse20065Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20065Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20066 {
    /**
    * A list of co-owners of a card for the card template.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20066>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20067 {
    /**
    * A list of files.
    */
    'data'?: Array<CardTemplateCustomFieldFile>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20067>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20068 {
    'data'?: CardTemplateCustomFieldFile;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20068>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20069 {
    /**
    * A list of selected values.
    */
    'data'?: Array<CardTemplateCustomFieldSelectedValue>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20069>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2007 {
    'data'?: ArchiveCardVersion;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2007>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20070 {
    'data'?: CardTemplateCustomFieldSelectedValue;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20070>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20071 {
    'data'?: InlineResponse20071Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20071>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the value within the list of selected values.
*/
export declare class InlineResponse20071Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20071Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20072 {
    /**
    * A list of parent cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20072>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20073 {
    'data'?: InlineResponse20073Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20073>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the parent card within the child's list of linked cards.
*/
export declare class InlineResponse20073Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20073Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20074 {
    /**
    * A list of predecessor cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20074>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20075 {
    'data'?: InlineResponse20075Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20075>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the predecessor card within the successor's list of linked cards.
*/
export declare class InlineResponse20075Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20075Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20076 {
    /**
    * A list of relative cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20076>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20077 {
    'data'?: InlineResponse20077Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20077>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the related card within the card's list of linked cards.
*/
export declare class InlineResponse20077Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20077Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20078 {
    'data'?: Array<CardTemplateCardSticker>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20078>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20079 {
    'data'?: CardTemplateCardSticker;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20079>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2008 {
    /**
    * A list of block reasons.
    */
    'data'?: Array<BlockReason>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2008>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20080 {
    'data'?: Array<CardTemplateCardSubtaskWithPosition>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20080>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20081 {
    'data'?: CardTemplateCardSubtaskWithPosition;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20081>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20082 {
    /**
    * A list of successor cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20082>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20083 {
    'data'?: InlineResponse20083Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20083>, skipDefaultValuesInitialization?: boolean);
}
/**
* The position of the successor card within the predecessor's list of linked cards.
*/
export declare class InlineResponse20083Data {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20083Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20084 {
    'data'?: Array<CardTag>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20084>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20085 {
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20085>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20086 {
    /**
    * A list of card types.
    */
    'data'?: Array<CardType>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20086>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20087 {
    'data'?: CardType;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20087>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20088 {
    /**
    * A list of card types creation, deletion, update events.
    */
    'data'?: Array<CardTypeHistoryEvent>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20088>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20089 {
    'data'?: InlineResponse20089Data;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20089>, skipDefaultValuesInitialization?: boolean);
}
export declare class InlineResponse20089Data {
    /**
    * A list of cards.
    */
    'data'?: Array<Card>;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20089Data>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse2009 {
    'data'?: BlockReason;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse2009>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20090 {
    /**
    * A list of cards.
    */
    'data'?: Array<Card>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20090>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20091 {
    'data'?: Card;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20091>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20092 {
    'data'?: CardBlockReason;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20092>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20093 {
    /**
    * A list of child cards.
    */
    'data'?: Array<ParentChildLink>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20093>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20094 {
    /**
    * A list of child cards.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20094>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20095 {
    /**
    * A list of card co-owners.
    */
    'data'?: Array<InlineResponse20029Data>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20095>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20096 {
    'data'?: Array<CardComment>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20096>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20097 {
    'data'?: CardComment;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20097>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20098 {
    'data'?: CardCommentAttachment;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20098>, skipDefaultValuesInitialization?: boolean);
}
/**
* A wrapper for a successful response.
*/
export declare class InlineResponse20099 {
    /**
    * A list of files.
    */
    'data'?: Array<any>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<InlineResponse20099>, skipDefaultValuesInitialization?: boolean);
}
/**
* Json export data
*/
export declare class JsonExport {
    'data'?: JsonExportData;
    'pagination'?: InlineResponse2004Pagination;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<JsonExport>, skipDefaultValuesInitialization?: boolean);
}
export declare class JsonExportData {
    /**
    * The exported items.
    */
    'items'?: Array<Array<string>>;
    /**
    * The titles of the exported data.
    */
    'titles'?: Array<Array<string>>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<JsonExportData>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type LaneWorkflowEnum
 */
export declare const LaneWorkflowEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type LaneWorkflowEnum = typeof LaneWorkflowEnum[keyof typeof LaneWorkflowEnum];
/**
* Lane data
*/
export declare class Lane {
    'color'?: string;
    'description'?: string;
    'name'?: string;
    'parent_lane_id'?: number;
    'position'?: number;
    'workflow'?: LaneWorkflowEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Lane>, skipDefaultValuesInitialization?: boolean);
}
/**
* Lane section limit data
*/
export declare class LaneSectionLimit {
    'board_id'?: number;
    'lane_id'?: number;
    'limit'?: number;
    'section'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LaneSectionLimit>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type LinkAddOrUpdateRequestLinkTypeEnum
 */
export declare const LinkAddOrUpdateRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type LinkAddOrUpdateRequestLinkTypeEnum = typeof LinkAddOrUpdateRequestLinkTypeEnum[keyof typeof LinkAddOrUpdateRequestLinkTypeEnum];
/**
* Link data.
*/
export declare class LinkAddOrUpdateRequest {
    /**
    * The position of the card within the link card's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The link type.
    */
    'link_type'?: LinkAddOrUpdateRequestLinkTypeEnum;
    /**
    * The card id of the linked card.
    */
    'linked_card_id'?: number;
    /**
    * The position of the linked card within the card's list of linked cards.
    */
    'linked_card_position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LinkAddOrUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type LinkRemoveRequestLinkTypeEnum
 */
export declare const LinkRemoveRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type LinkRemoveRequestLinkTypeEnum = typeof LinkRemoveRequestLinkTypeEnum[keyof typeof LinkRemoveRequestLinkTypeEnum];
/**
* Link data
*/
export declare class LinkRemoveRequest {
    /**
    * The link type.
    */
    'link_type': LinkRemoveRequestLinkTypeEnum;
    /**
    * The card id of the linked card.
    */
    'linked_card_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LinkRemoveRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * The link type.
 * @export
 * @type LinkToNewCardToAddRequestLinkTypeEnum
 */
export declare const LinkToNewCardToAddRequestLinkTypeEnum: {
    readonly Parent: "parent";
    readonly Child: "child";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type LinkToNewCardToAddRequestLinkTypeEnum = typeof LinkToNewCardToAddRequestLinkTypeEnum[keyof typeof LinkToNewCardToAddRequestLinkTypeEnum];
/**
* Link data.
*/
export declare class LinkToNewCardToAddRequest {
    /**
    * The position of the card within the link card's list of linked cards.
    */
    'card_position'?: number;
    /**
    * The link type.
    */
    'link_type': LinkToNewCardToAddRequestLinkTypeEnum;
    /**
    * The position of the linked card within the card's list of linked cards.
    */
    'linked_card_position'?: number;
    /**
    * The new card's reference of the linked card.
    */
    'linked_new_card_reference': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LinkToNewCardToAddRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Linked card data
*/
export declare class LinkedCard {
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LinkedCard>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type LinkedCardWithTypeLinkTypeEnum
 */
export declare const LinkedCardWithTypeLinkTypeEnum: {
    readonly Child: "child";
    readonly Parent: "parent";
    readonly Relative: "relative";
    readonly Predecessor: "predecessor";
    readonly Successor: "successor";
};
export declare type LinkedCardWithTypeLinkTypeEnum = typeof LinkedCardWithTypeLinkTypeEnum[keyof typeof LinkedCardWithTypeLinkTypeEnum];
/**
* Linked card data with type
*/
export declare class LinkedCardWithType {
    'card_id'?: number;
    'link_type'?: LinkedCardWithTypeLinkTypeEnum;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LinkedCardWithType>, skipDefaultValuesInitialization?: boolean);
}
/**
* Logged time data
*/
export declare class LoggedTime {
    'card_id'?: number;
    'column_id'?: number;
    'comment'?: string;
    'date'?: Date;
    'lane_id'?: number;
    'logged_at'?: Date;
    'logged_time_id'?: number;
    'subtask_id'?: number;
    'time'?: number;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LoggedTime>, skipDefaultValuesInitialization?: boolean);
}
/**
* Logged time history event data
*/
export declare class LoggedTimeHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'logged_time_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<LoggedTimeHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* Merged area data
*/
export declare class MergedArea {
    'board_id'?: number;
    'column_ids'?: Array<number>;
    'lane_ids'?: Array<number>;
    'limit'?: number;
    'primary_column_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MergedArea>, skipDefaultValuesInitialization?: boolean);
}
export declare class MyBoardSettingsBatchUpdateSettings {
    /**
    * The name of the setting.
    */
    'setting': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyBoardSettingsBatchUpdateSettings>, skipDefaultValuesInitialization?: boolean);
}
/**
* My dashboard Page data
*/
export declare class MyDashboardPage {
    'dashboard_page_id'?: number;
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPage>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum
 */
export declare const MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum = typeof MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum[keyof typeof MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum];
/**
* My dashboard page background settings color data
*/
export declare class MyDashboardPageSettingBackgroundSettingsColor {
    'default_value'?: MyDashboardPageSettingBackgroundSettingsColorDefaultValueEnum;
    'multiple_values'?: boolean;
    'name'?: string;
    'restrictions'?: MyDashboardPageSettingBackgroundSettingsColorRestrictions;
    'type'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingBackgroundSettingsColor>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum
 */
export declare const MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum = typeof MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum[keyof typeof MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum];
export declare class MyDashboardPageSettingBackgroundSettingsColorRestrictions {
    'allowed_values'?: MyDashboardPageSettingBackgroundSettingsColorRestrictionsAllowedValuesEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingBackgroundSettingsColorRestrictions>, skipDefaultValuesInitialization?: boolean);
}
/**
* The background color of one of mine dashboard pages
*/
export declare class MyDashboardPageSettingBackgroundSettingsColorUpdateValue {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingBackgroundSettingsColorUpdateValue>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum
 */
export declare const MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum = typeof MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum[keyof typeof MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum];
/**
* My dashboard page background settings image data
*/
export declare class MyDashboardPageSettingBackgroundSettingsImage {
    'default_value'?: MyDashboardPageSettingBackgroundSettingsImageDefaultValueEnum;
    'multiple_values'?: boolean;
    'name'?: string;
    'restrictions'?: MyDashboardPageSettingBackgroundSettingsColorRestrictions;
    'type'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingBackgroundSettingsImage>, skipDefaultValuesInitialization?: boolean);
}
/**
* The background image of one of mine dashboard pages
*/
export declare class MyDashboardPageSettingBackgroundSettingsImageUpdateValue {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingBackgroundSettingsImageUpdateValue>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageSettingTabSettingsColorDefaultValueEnum
 */
export declare const MyDashboardPageSettingTabSettingsColorDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageSettingTabSettingsColorDefaultValueEnum = typeof MyDashboardPageSettingTabSettingsColorDefaultValueEnum[keyof typeof MyDashboardPageSettingTabSettingsColorDefaultValueEnum];
/**
* My dashboard page tab settings color data
*/
export declare class MyDashboardPageSettingTabSettingsColor {
    'default_value'?: MyDashboardPageSettingTabSettingsColorDefaultValueEnum;
    'multiple_values'?: boolean;
    'name'?: string;
    'restrictions'?: MyDashboardPageSettingBackgroundSettingsColorRestrictions;
    'type'?: string;
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingTabSettingsColor>, skipDefaultValuesInitialization?: boolean);
}
/**
* The tab color of one of mine dashboard pages
*/
export declare class MyDashboardPageSettingTabSettingsColorUpdateValue {
    'value'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageSettingTabSettingsColorUpdateValue>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageTabSettingsIsHiddenDefaultValueEnum
 */
export declare const MyDashboardPageTabSettingsIsHiddenDefaultValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageTabSettingsIsHiddenDefaultValueEnum = typeof MyDashboardPageTabSettingsIsHiddenDefaultValueEnum[keyof typeof MyDashboardPageTabSettingsIsHiddenDefaultValueEnum];
/**
 *
 * @export
 * @type MyDashboardPageTabSettingsIsHiddenValueEnum
 */
export declare const MyDashboardPageTabSettingsIsHiddenValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageTabSettingsIsHiddenValueEnum = typeof MyDashboardPageTabSettingsIsHiddenValueEnum[keyof typeof MyDashboardPageTabSettingsIsHiddenValueEnum];
/**
* My dashboard page tab settings is hidden data
*/
export declare class MyDashboardPageTabSettingsIsHidden {
    'default_value'?: MyDashboardPageTabSettingsIsHiddenDefaultValueEnum;
    'multiple_values'?: boolean;
    'name'?: string;
    'restrictions'?: MyDashboardPageSettingBackgroundSettingsColorRestrictions;
    'type'?: string;
    'value'?: MyDashboardPageTabSettingsIsHiddenValueEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageTabSettingsIsHidden>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum
 */
export declare const MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum = typeof MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum[keyof typeof MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum];
/**
* The tab is hidden or not of one of mine dashboard pages
*/
export declare class MyDashboardPageTabSettingsIsHiddenUpdateValue {
    'value'?: MyDashboardPageTabSettingsIsHiddenUpdateValueValueEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<MyDashboardPageTabSettingsIsHiddenUpdateValue>, skipDefaultValuesInitialization?: boolean);
}
/**
* An hourly request limit for the old api.
*/
export declare class OldApiLimit {
    '_function'?: string;
    'limit'?: number;
    'type'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<OldApiLimit>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded for each request execution torwards the old api aggregated by parameters
*/
export declare class OldApiRequestHistoryAggregated {
    'aggregation_period'?: string;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<OldApiRequestHistoryAggregated>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded for each request execution torwards the old api
*/
export declare class OldApiRequestHistoryEvent {
    'method'?: string;
    'resource'?: string;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<OldApiRequestHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* Parent-Child link data
*/
export declare class ParentChildLink {
    'child_id'?: number;
    'depth'?: number;
    'parent_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<ParentChildLink>, skipDefaultValuesInitialization?: boolean);
}
/**
* Permission data
*/
export declare class Permission {
    'available'?: boolean;
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Permission>, skipDefaultValuesInitialization?: boolean);
}
/**
* Predecessor-Successor link data
*/
export declare class PredecessorSuccessorLink {
    'depth'?: number;
    'predecessor_id'?: number;
    'successor_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<PredecessorSuccessorLink>, skipDefaultValuesInitialization?: boolean);
}
/**
* Privilege data
*/
export declare class Privilege {
    'available'?: boolean;
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Privilege>, skipDefaultValuesInitialization?: boolean);
}
/**
* Role data
*/
export declare class Role {
    'name'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Role>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type SettingTypeEnum
 */
export declare const SettingTypeEnum: {
    readonly Int: "int";
    readonly String: "string";
    readonly Url: "url";
    readonly Color: "color";
};
export declare type SettingTypeEnum = typeof SettingTypeEnum[keyof typeof SettingTypeEnum];
/**
* Setting data
*/
export declare class Setting {
    'multiple_values'?: boolean;
    'name'?: string;
    'restrictions'?: {
        [key: string]: string;
    };
    'type'?: SettingTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Setting>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type StickerAvailabilityEnum
 */
export declare const StickerAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type StickerAvailabilityEnum = typeof StickerAvailabilityEnum[keyof typeof StickerAvailabilityEnum];
/**
 *
 * @export
 * @type StickerIconTypeEnum
 */
export declare const StickerIconTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type StickerIconTypeEnum = typeof StickerIconTypeEnum[keyof typeof StickerIconTypeEnum];
/**
 *
 * @export
 * @type StickerIsEnabledEnum
 */
export declare const StickerIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type StickerIsEnabledEnum = typeof StickerIsEnabledEnum[keyof typeof StickerIsEnabledEnum];
/**
* Sticker data
*/
export declare class Sticker {
    'availability'?: StickerAvailabilityEnum;
    'color'?: string;
    'icon_id'?: number;
    'icon_type'?: StickerIconTypeEnum;
    'is_enabled'?: StickerIsEnabledEnum;
    'label'?: string;
    'sticker_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Sticker>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on stickers resource
*/
export declare class StickerHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'sticker_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<StickerHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the current user will become a card's watcher.
 * @export
 * @type SubtaskConvertIntoCardRequestWatchEnum
 */
export declare const SubtaskConvertIntoCardRequestWatchEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type SubtaskConvertIntoCardRequestWatchEnum = typeof SubtaskConvertIntoCardRequestWatchEnum[keyof typeof SubtaskConvertIntoCardRequestWatchEnum];
/**
* Subtask convert into card data.
*/
export declare class SubtaskConvertIntoCardRequest {
    /**
    * The actual end time of the converted subtask into card.
    */
    'actual_end_time'?: Date;
    /**
    * The actual start time of the converted subtask into card.
    */
    'actual_start_time'?: Date;
    /**
    * A list of attachments which will be removed from the converted subtask into card.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the converted subtask into card.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated to the converted subtask into card.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    'block_reason'?: CardBlockReasonSetRequest;
    /**
    * The co-owner ids which will be added to converted subtask into card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * The color of the converted subtask into card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of exit criteria.
    */
    'column_checklist_items_to_check_or_update'?: Array<CardColumnChecklistItemWithIdAddOrUpdateRequest>;
    /**
    * The column id of the converted subtask into card.
    */
    'column_id'?: number;
    /**
    * A list of custom fields will be added or updated for the converted subtask into card.
    */
    'custom_fields_to_add_or_update'?: Array<CardCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the converted subtask into card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the converted subtask into card.
    */
    'deadline'?: Date;
    /**
    * The description of the converted subtask into card.
    */
    'description'?: string;
    /**
    * The lane id of the converted subtask into card.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_cards_to_add_or_update'?: Array<LinkAddOrUpdateRequest>;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_cards_to_add'?: Array<LinkToNewCardToAddRequest>;
    /**
    * The user id of assignee of the converted subtask into card.
    */
    'owner_user_id'?: number;
    /**
    * The planened end date of the converted subtask into card.
    */
    'planned_end_date'?: Date;
    /**
    * The planened start date of the converted subtask into card.
    */
    'planned_start_date'?: Date;
    /**
    * The position of the converted subtask into card.
    */
    'position'?: number;
    /**
    * The priority of the converted subtask into card.
    */
    'priority'?: number;
    /**
    * The reference of converted subtask into card that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size of the converted subtask into card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the converted subtask into card.
    */
    'stickers_to_add'?: Array<CardStickerAddRequest>;
    /**
    * The subtask id of the converted subtask into card.
    */
    'subtask_id': number;
    /**
    * A list of subtasks which will be added to the converted subtask into card.
    */
    'subtasks_to_add'?: Array<SubtaskCreateRequest>;
    /**
    * The tag with ids which will be added to the converted subtask into card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * The title of the converted subtask into card.
    */
    'title'?: string;
    /**
    * The track of the converted subtask into card.
    */
    'track'?: number;
    /**
    * The type id of the converted subtask into card.
    */
    'type_id'?: number;
    /**
    * When set to 1 the current user will become a card's watcher.
    */
    'watch'?: SubtaskConvertIntoCardRequestWatchEnum;
    /**
    * The watcher ids which will be added to the converted subtask into card.
    */
    'watcher_ids_to_add'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskConvertIntoCardRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the subtask is already finished.
 * @export
 * @type SubtaskCreateRequestIsFinishedEnum
 */
export declare const SubtaskCreateRequestIsFinishedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type SubtaskCreateRequestIsFinishedEnum = typeof SubtaskCreateRequestIsFinishedEnum[keyof typeof SubtaskCreateRequestIsFinishedEnum];
/**
* Subtask data.
*/
export declare class SubtaskCreateRequest {
    /**
    * A list of attachments which will be added to the new subtask.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A subtask description.
    */
    'description': string;
    /**
    * When set to 1 the subtask is already finished.
    */
    'is_finished'?: SubtaskCreateRequestIsFinishedEnum;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskCreateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
* Subtask data.
*/
export declare class SubtaskData {
    'subtask_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskData>, skipDefaultValuesInitialization?: boolean);
}
/**
* Subtask data - subtask_id
*/
export declare class SubtaskDataSubtaskId {
    'template_subtask_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskDataSubtaskId>, skipDefaultValuesInitialization?: boolean);
}
/**
* Subtask data - subtask_id
*/
export declare class SubtaskDataSubtaskId1 {
    'subtask_id': number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskDataSubtaskId1>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the subtask is already finished.
 * @export
 * @type SubtaskUpdateRequestIsFinishedEnum
 */
export declare const SubtaskUpdateRequestIsFinishedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type SubtaskUpdateRequestIsFinishedEnum = typeof SubtaskUpdateRequestIsFinishedEnum[keyof typeof SubtaskUpdateRequestIsFinishedEnum];
/**
* Subtask data.
*/
export declare class SubtaskUpdateRequest {
    /**
    * A list of attachments to remove.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments to add.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments to update.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A subtask description.
    */
    'description'?: string;
    /**
    * When set to 1 the subtask is already finished.
    */
    'is_finished'?: SubtaskUpdateRequestIsFinishedEnum;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the current user will become a card's watcher.
 * @export
 * @type SubtaskWithIdConvertIntoCardRequestWatchEnum
 */
export declare const SubtaskWithIdConvertIntoCardRequestWatchEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type SubtaskWithIdConvertIntoCardRequestWatchEnum = typeof SubtaskWithIdConvertIntoCardRequestWatchEnum[keyof typeof SubtaskWithIdConvertIntoCardRequestWatchEnum];
export declare class SubtaskWithIdConvertIntoCardRequest {
    /**
    * The subtask id of the converted subtask into card.
    */
    'subtask_id': number;
    /**
    * The actual end time of the converted subtask into card.
    */
    'actual_end_time'?: Date;
    /**
    * The actual start time of the converted subtask into card.
    */
    'actual_start_time'?: Date;
    /**
    * A list of attachments which will be removed from the converted subtask into card.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments which will be added to the converted subtask into card.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments which will be updated to the converted subtask into card.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    'block_reason'?: CardBlockReasonSetRequest;
    /**
    * The co-owner ids which will be added to converted subtask into card.
    */
    'co_owner_ids_to_add'?: Array<number>;
    /**
    * The color of the converted subtask into card. 6 hexadecimal characters are expected.
    */
    'color'?: string;
    /**
    * A list of exit criteria.
    */
    'column_checklist_items_to_check_or_update'?: Array<CardColumnChecklistItemWithIdAddOrUpdateRequest>;
    /**
    * The column id of the converted subtask into card.
    */
    'column_id'?: number;
    /**
    * A list of custom fields will be added or updated for the converted subtask into card.
    */
    'custom_fields_to_add_or_update'?: Array<CardCustomFieldWithIdAddOrUpdateRequest>;
    /**
    * The custom id of the converted subtask into card.
    */
    'custom_id'?: string;
    /**
    * The deadline of the converted subtask into card.
    */
    'deadline'?: Date;
    /**
    * The description of the converted subtask into card.
    */
    'description'?: string;
    /**
    * The lane id of the converted subtask into card.
    */
    'lane_id'?: number;
    /**
    * A list of links to existing cards which will be add or update.
    */
    'links_to_existing_cards_to_add_or_update'?: Array<LinkAddOrUpdateRequest>;
    /**
    * A list of links to new cards which will be added.
    */
    'links_to_new_cards_to_add'?: Array<LinkToNewCardToAddRequest>;
    /**
    * The user id of assignee of the converted subtask into card.
    */
    'owner_user_id'?: number;
    /**
    * The planened end date of the converted subtask into card.
    */
    'planned_end_date'?: Date;
    /**
    * The planened start date of the converted subtask into card.
    */
    'planned_start_date'?: Date;
    /**
    * The position of the converted subtask into card.
    */
    'position'?: number;
    /**
    * The priority of the converted subtask into card.
    */
    'priority'?: number;
    /**
    * The reference of converted subtask into card that you can use if you need to find the exact new card in responce.
    */
    'reference'?: string;
    /**
    * The size of the converted subtask into card.
    */
    'size'?: number;
    /**
    * A list of strickers which will be added to the converted subtask into card.
    */
    'stickers_to_add'?: Array<CardStickerAddRequest>;
    /**
    * A list of subtasks which will be added to the converted subtask into card.
    */
    'subtasks_to_add'?: Array<SubtaskCreateRequest>;
    /**
    * The tag with ids which will be added to the converted subtask into card.
    */
    'tag_ids_to_add'?: Array<number>;
    /**
    * The title of the converted subtask into card.
    */
    'title'?: string;
    /**
    * The track of the converted subtask into card.
    */
    'track'?: number;
    /**
    * The type id of the converted subtask into card.
    */
    'type_id'?: number;
    /**
    * When set to 1 the current user will become a card's watcher.
    */
    'watch'?: SubtaskWithIdConvertIntoCardRequestWatchEnum;
    /**
    * The watcher ids which will be added to the converted subtask into card.
    */
    'watcher_ids_to_add'?: Array<number>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskWithIdConvertIntoCardRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 * When set to 1 the subtask is already finished.
 * @export
 * @type SubtaskWithIdUpdateRequestIsFinishedEnum
 */
export declare const SubtaskWithIdUpdateRequestIsFinishedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type SubtaskWithIdUpdateRequestIsFinishedEnum = typeof SubtaskWithIdUpdateRequestIsFinishedEnum[keyof typeof SubtaskWithIdUpdateRequestIsFinishedEnum];
export declare class SubtaskWithIdUpdateRequest {
    'subtask_id': number;
    /**
    * A list of attachments to remove.
    */
    'attachment_ids_to_remove'?: Array<number>;
    /**
    * A list of attachments to add.
    */
    'attachments_to_add'?: Array<CardAttachmentCreateRequest>;
    /**
    * A list of attachments to update.
    */
    'attachments_to_update'?: Array<CardAttachmentWithIdUpdateRequest>;
    /**
    * A subtask description.
    */
    'description'?: string;
    /**
    * When set to 1 the subtask is already finished.
    */
    'is_finished'?: SubtaskWithIdUpdateRequestIsFinishedEnum;
    /**
    * A user id of the assignee.
    */
    'owner_user_id'?: number;
    /**
    * The subtask position.
    */
    'position'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<SubtaskWithIdUpdateRequest>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type TagAvailabilityEnum
 */
export declare const TagAvailabilityEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type TagAvailabilityEnum = typeof TagAvailabilityEnum[keyof typeof TagAvailabilityEnum];
/**
 *
 * @export
 * @type TagIconTypeEnum
 */
export declare const TagIconTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type TagIconTypeEnum = typeof TagIconTypeEnum[keyof typeof TagIconTypeEnum];
/**
 *
 * @export
 * @type TagIsEnabledEnum
 */
export declare const TagIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type TagIsEnabledEnum = typeof TagIsEnabledEnum[keyof typeof TagIsEnabledEnum];
/**
* Tag data
*/
export declare class Tag {
    'availability'?: TagAvailabilityEnum;
    'color'?: string;
    'icon_id'?: number;
    'icon_type'?: TagIconTypeEnum;
    'is_enabled'?: TagIsEnabledEnum;
    'label'?: string;
    'tag_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Tag>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on tags resource
*/
export declare class TagHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'tag_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<TagHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
* Team data
*/
export declare class Team {
    'description'?: string;
    'name'?: string;
    'team_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Team>, skipDefaultValuesInitialization?: boolean);
}
/**
* Team history event data
*/
export declare class TeamHistoryEvent {
    'event_type'?: string;
    'history_id'?: number;
    'team_id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<TeamHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type UserIsConfirmedEnum
 */
export declare const UserIsConfirmedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type UserIsConfirmedEnum = typeof UserIsConfirmedEnum[keyof typeof UserIsConfirmedEnum];
/**
 *
 * @export
 * @type UserIsEnabledEnum
 */
export declare const UserIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type UserIsEnabledEnum = typeof UserIsEnabledEnum[keyof typeof UserIsEnabledEnum];
/**
 *
 * @export
 * @type UserIsTfaEnabledEnum
 */
export declare const UserIsTfaEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type UserIsTfaEnabledEnum = typeof UserIsTfaEnabledEnum[keyof typeof UserIsTfaEnabledEnum];
/**
* User data
*/
export declare class User {
    'avatar'?: string;
    'email'?: string;
    'is_confirmed'?: UserIsConfirmedEnum;
    'is_enabled'?: UserIsEnabledEnum;
    'is_tfa_enabled'?: UserIsTfaEnabledEnum;
    'realname'?: string;
    'registration_date'?: Date;
    'username'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<User>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an user management action is executed on users resource
*/
export declare class UserHistoryEvent {
    'affected_user_id'?: number;
    'event_type'?: string;
    'id'?: number;
    'time'?: Date;
    'user_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<UserHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type WebhookIsEnabledEnum
 */
export declare const WebhookIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type WebhookIsEnabledEnum = typeof WebhookIsEnabledEnum[keyof typeof WebhookIsEnabledEnum];
/**
* Webhook data
*/
export declare class Webhook {
    'board_id'?: number;
    'is_enabled'?: WebhookIsEnabledEnum;
    'url'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Webhook>, skipDefaultValuesInitialization?: boolean);
}
/**
* An event recorded when an update, delete or create action is executed on webhooks resource
*/
export declare class WebhookHistoryEvent {
    'event_type'?: string;
    'id'?: number;
    'time'?: Date;
    'user_id'?: number;
    'webhook_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<WebhookHistoryEvent>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type WorkflowIsCollapsibleEnum
 */
export declare const WorkflowIsCollapsibleEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type WorkflowIsCollapsibleEnum = typeof WorkflowIsCollapsibleEnum[keyof typeof WorkflowIsCollapsibleEnum];
/**
 *
 * @export
 * @type WorkflowIsEnabledEnum
 */
export declare const WorkflowIsEnabledEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type WorkflowIsEnabledEnum = typeof WorkflowIsEnabledEnum[keyof typeof WorkflowIsEnabledEnum];
/**
 *
 * @export
 * @type WorkflowTypeEnum
 */
export declare const WorkflowTypeEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type WorkflowTypeEnum = typeof WorkflowTypeEnum[keyof typeof WorkflowTypeEnum];
/**
* Workflow data
*/
export declare class Workflow {
    'is_collapsible'?: WorkflowIsCollapsibleEnum;
    'is_enabled'?: WorkflowIsEnabledEnum;
    'name'?: string;
    'position'?: number;
    'type'?: WorkflowTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Workflow>, skipDefaultValuesInitialization?: boolean);
}
/**
* Workflow copy data
*/
export declare class WorkflowCopy {
    'cycle_time_column_ids'?: Array<number>;
    'initiative_workflow_settings'?: Array<WorkflowCopyInitiativeWorkflowSettings>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<WorkflowCopy>, skipDefaultValuesInitialization?: boolean);
}
export declare class WorkflowCopyInitiativeWorkflowSettings {
    'built_in_rules_can_finish_initiatives'?: number;
    'built_in_rules_can_move_back_from_done'?: number;
    'built_in_rules_can_move_from_backlog_to_requested'?: number;
    'built_in_rules_can_move_to_requested'?: number;
    'built_in_rules_can_start_initiatives'?: number;
    'workflow_id'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<WorkflowCopyInitiativeWorkflowSettings>, skipDefaultValuesInitialization?: boolean);
}
/**
 *
 * @export
 * @type WorkspaceIsArchivedEnum
 */
export declare const WorkspaceIsArchivedEnum: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
};
export declare type WorkspaceIsArchivedEnum = typeof WorkspaceIsArchivedEnum[keyof typeof WorkspaceIsArchivedEnum];
/**
 *
 * @export
 * @type WorkspaceTypeEnum
 */
export declare const WorkspaceTypeEnum: {
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export declare type WorkspaceTypeEnum = typeof WorkspaceTypeEnum[keyof typeof WorkspaceTypeEnum];
/**
* Workspace data
*/
export declare class Workspace {
    'is_archived'?: WorkspaceIsArchivedEnum;
    'name'?: string;
    'type'?: WorkspaceTypeEnum;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<TypeAttributeDescriptor>;
    static getAttributeTypeMap(): TypeAttributeDescriptor[];
    static getTypeSerializer(): typeof ObjectSerializer;
    constructor(defaultValues?: Partial<Workspace>, skipDefaultValuesInitialization?: boolean);
}
export declare type TypeAttributeDescriptor = {
    name: string;
    baseName: string;
    type: string;
    format: string;
    required: boolean;
};
export declare type TypeSerializer = {
    serialize: (data: any, type: string, format: string) => any;
    deserialize: (data: any, type: string, format: string) => any;
    initialize: (data: any, type: string, format: string) => any;
};
export declare type EnumTypeDescriptor = Record<string, string>;
export declare type TypeDescriptor = ((value?: any) => any) & {
    serialize: (value: any) => any;
    deserialize: (value: any) => any;
};
export declare type TypeModelDescriptor = (new (value?: any, skipDefaultValuesInitialization?: boolean) => any) & {
    discriminator?: string;
    getTypeSerializer: () => TypeSerializer;
    getAttributeTypeMap: () => Array<TypeAttributeDescriptor>;
};
export declare type ApiTypeDescriptor = TypeDescriptor | TypeModelDescriptor | EnumTypeDescriptor;
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): string;
    static serialize(data: any, type: string, format: string): any;
    static deserialize(data: any, type: string, format: string): any;
    static initialize(data: any, type: string, format: string): any;
    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    static normalizeMediaType(mediaType: string | undefined): string | undefined;
    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    static getPreferredMediaType(mediaTypes: Array<string>): string;
    /**
     * Convert data to a string according the given media type
     */
    static stringify(data: any, mediaType: string): string;
    /**
     * Parse data from a string according to the given media type
     */
    static parse(rawData: string, mediaType: string | undefined): any;
}
/**
 * no description
 */
export declare class ApiLimitsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the api request limits.
     * Get the hourly and minutely limits for the api requests
     */
    getApiLimits(options?: Configuration): Promise<RequestContext>;
}
export declare class ApiLimitsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiLimits
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiLimits(response: ResponseContext): Promise<InlineResponse2003>;
}
/**
 * no description
 */
export declare class ApiRequestHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistory(user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of api requests aggregated by user matching some optional criteria.
     * Get a list of api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option for choosing the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Promise<RequestContext>;
}
export declare class ApiRequestHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiRequestHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiRequestHistory(response: ResponseContext): Promise<InlineResponse2004>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiRequestHistoryAggregated
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiRequestHistoryAggregated(response: ResponseContext): Promise<InlineResponse2005>;
}
/**
 * no description
 */
export declare class ArchivedCardVersionsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new archived card version.
     * Create a archived card version
     * @param InlineObject
     */
    createArchiveCardVersion(InlineObject?: InlineObject, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a archived card version.
     * Delete a archived card version
     * @param version_id A archived card version id.
     */
    deleteArchiveCardVersion(version_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single archived card version.
     * Get the details of a single archived card version
     * @param version_id A archived card version id.
     */
    getArchiveCardVersion(version_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of archived card versions.
     * Get a list of archived card versions
     */
    getArchivedCardVersions(options?: Configuration): Promise<RequestContext>;
    /**
     * Update a archived card version.
     * Update a archived card version
     * @param version_id A archived card version id.
     * @param InlineObject1
     */
    updateArchiveCardVersion(version_id: number, InlineObject1?: InlineObject1, options?: Configuration): Promise<RequestContext>;
}
export declare class ArchivedCardVersionsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createArchiveCardVersion
     * @throws ApiException if the response code was not in [200, 299]
     */
    createArchiveCardVersion(response: ResponseContext): Promise<InlineResponse2007>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteArchiveCardVersion
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteArchiveCardVersion(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getArchiveCardVersion
     * @throws ApiException if the response code was not in [200, 299]
     */
    getArchiveCardVersion(response: ResponseContext): Promise<InlineResponse2007>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getArchivedCardVersions
     * @throws ApiException if the response code was not in [200, 299]
     */
    getArchivedCardVersions(response: ResponseContext): Promise<InlineResponse2006>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateArchiveCardVersion
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateArchiveCardVersion(response: ResponseContext): Promise<InlineResponse2007>;
}
/**
 * no description
 */
export declare class BlockReasonBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the block reason is available.
     * Get a list of boards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonBoards(reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a block reason available or unavailable on several boards.
     * Make a block reason available or unavailable on several boards
     * @param reason_id A block reason id.
     * @param InlineObject4
     */
    updateBlockReasonBoards(reason_id: number, InlineObject4?: InlineObject4, options?: Configuration): Promise<RequestContext>;
}
export declare class BlockReasonBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReasonBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReasonBoards(response: ResponseContext): Promise<InlineResponse20011>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBlockReasonBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBlockReasonBoards(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BlockReasonCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards on which the block reason is available.
     * Get a list of cards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonCards(reason_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BlockReasonCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReasonCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReasonCards(response: ResponseContext): Promise<InlineResponse20012>;
}
/**
 * no description
 */
export declare class BlockReasonHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of block reasons creation, deletion, update events matching some optional criteria.
     * Get a list of block reasons creation, deletion, update events
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BlockReasonHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReasonsHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReasonsHistory(response: ResponseContext): Promise<InlineResponse20010>;
}
/**
 * no description
 */
export declare class BlockReasonsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new block reason.
     * Create a block reason
     * @param InlineObject2
     */
    createBlockReason(InlineObject2?: InlineObject2, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a block reason.
     * Delete a block reason
     * @param reason_id A block reason id.
     * @param replace_with_reason_id The id of a block reason with which to block the cards which are currently blocked with the block reason which is about to be deleted.
     */
    deleteBlockReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single block reason.
     * Get the details of a single block reason
     * @param reason_id A block reason id.
     */
    getBlockReason(reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of block reasons matching some optional criteria.
     * Get a list of block reasons
     * @param reason_ids A list of the block reason ids that you want to get.
     * @param label Find a block reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled block reasons. When set to 0 you will only get disabled block reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, icon_type, icon_id, label, color, with_cards, with_date, with_users, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getBlockReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'with_cards' | 'with_date' | 'with_users' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a block reason.
     * Update a block reason
     * @param reason_id A block reason id.
     * @param InlineObject3
     */
    updateBlockReason(reason_id: number, InlineObject3?: InlineObject3, options?: Configuration): Promise<RequestContext>;
}
export declare class BlockReasonsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    createBlockReason(response: ResponseContext): Promise<InlineResponse2009>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteBlockReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReason(response: ResponseContext): Promise<InlineResponse2009>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReasons
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReasons(response: ResponseContext): Promise<InlineResponse2008>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBlockReason(response: ResponseContext): Promise<InlineResponse2009>;
}
/**
 * no description
 */
export declare class BoardAssigneesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the assignees for a board and their roles.
     * Get a list of board assignees
     * @param board_id A board id.
     */
    getBoardAssignees(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is assigned to a board and with what role.
     * Get the role of a board assignee
     * @param board_id A board id.
     * @param user_id A user id.
     */
    getBoardUserRole(board_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Assign a user to a board or change his or her role.
     * Assign a user to a board
     * @param board_id A board id.
     * @param user_id A user id.
     * @param InlineObject22
     */
    setBoardUserRole(board_id: number, user_id: number, InlineObject22?: InlineObject22, options?: Configuration): Promise<RequestContext>;
    /**
     * Unassign a user from a board.
     * Unassign a user from a board
     * @param board_id A board id.
     * @param user_id A user id.
     */
    unsetBoardUserRole(board_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardAssigneesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardAssignees
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardAssignees(response: ResponseContext): Promise<InlineResponse20050>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardUserRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardUserRole(response: ResponseContext): Promise<InlineResponse20026>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setBoardUserRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    setBoardUserRole(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to unsetBoardUserRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    unsetBoardUserRole(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardBlockReasonsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a block reason available on a board.
     * Make a block reason available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    addBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a block reason is available on a board.
     * Check if a block reason is available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    checkBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the block reasons available on a board.
     * Get a list of block reasons available on a board
     * @param board_id A board id.
     */
    getBoardBlockReasons(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a block reason unavailable on a board.
     * Make a block reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    removeBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardBlockReasonsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardBlockReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardBlockReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardBlockReasons
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardBlockReasons(response: ResponseContext): Promise<InlineResponse20016>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardBlockReason(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardCardTemplatesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card template available on a board.
     * Make a card template available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    addBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card template is available on a board.
     * Check if a card template is available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    checkBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the card templates available on a board.
     * Get a list of card templates available on a board
     * @param board_id A board id.
     */
    getBoardCardTemplates(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a card template unavailable on a board.
     * Make a card template unavailable on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    removeBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardCardTemplatesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardCardTemplate(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardCardTemplate(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCardTemplates
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCardTemplates(response: ResponseContext): Promise<InlineResponse20017>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardCardTemplate(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardCardTypesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    addBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card type is available on a board.
     * Check if a card type is available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    checkBoardCardType(board_id: number, type_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the effective settings of a card type for a board if it is available on it.
     * Get the effective settings of a card type for a board if it is available on it
     * @param board_id A board id.
     * @param type_id A type id.
     */
    getBoardCardTypeEffectiveSettings(board_id: number, type_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the card types available on a board.
     * Get a list of card types available on a board
     * @param board_id A board id.
     */
    getBoardCardTypes(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a card type unavailable on a board.
     * Make a card type unavailable on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    removeBoardCardType(board_id: number, type_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    updateBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardCardTypesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardCardType(response: ResponseContext): Promise<InlineResponse20019>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardCardType(response: ResponseContext): Promise<InlineResponse20019>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCardTypeEffectiveSettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCardTypeEffectiveSettings(response: ResponseContext): Promise<InlineResponse20019>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCardTypes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCardTypes(response: ResponseContext): Promise<InlineResponse20018>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardCardType(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBoardCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBoardCardType(response: ResponseContext): Promise<InlineResponse20019>;
}
/**
 * no description
 */
export declare class BoardCustomFieldAllowedValuesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add or update an allowed value for a custom field for a board.
     * Add or update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject10
     */
    addOrUpdateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject10?: InlineObject10, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single allowed value for a custom field for a board.
     * Get the details of a single allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown for a board.
     * Get a list of the allowed values of a custom field of type dropdown for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldAllowedValues(board_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove an allowed value for a custom field for a board.
     * Remove an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update an allowed value for a custom field for a board.
     * Update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject11
     */
    updateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject11?: InlineObject11, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardCustomFieldAllowedValuesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addOrUpdateBoardCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    addOrUpdateBoardCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse20028>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse20028>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCustomFieldAllowedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCustomFieldAllowedValues(response: ResponseContext): Promise<InlineResponse20027>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardCustomFieldAllowedValue(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBoardCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBoardCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse20028>;
}
/**
 * no description
 */
export declare class BoardCustomFieldDefaultContributorsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a contributor one of the default for a custom field for a board.
     * Make a contributor one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a contributor is one of the default for a custom field for a board.
     * Check if a contributor is one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the default contributors for a custom field for a board.
     * Get a list of the default contributors for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldDefaultContributors(board_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a contributor from the default for a board.
     * Remove a contributor from the default for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardCustomFieldDefaultContributorsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardCustomFieldDefaultContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardCustomFieldDefaultContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardCustomFieldDefaultContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardCustomFieldDefaultContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardCustomFieldDefaultContributors
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardCustomFieldDefaultContributors(response: ResponseContext): Promise<InlineResponse20029>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardCustomFieldDefaultContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardCustomFieldDefaultContributor(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardCustomFieldsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a custom field unavailable on a board.
     * Make a custom field unavailable on a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    removeBoardCustomField(board_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardCustomFieldsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardCustomField(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardDiscardReasonsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a discard reason available on a board.
     * Make a discard reason available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    addBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a discard reason is available on a board.
     * Check if a discard reason is available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    checkBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the discard reasons available on a board.
     * Get a list of discard reasons available on a board
     * @param board_id A board id.
     */
    getBoardDiscardReasons(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a discard reason unavailable on a board.
     * Make a discard reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    removeBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardDiscardReasonsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardDiscardReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardDiscardReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardDiscardReasons
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardDiscardReasons(response: ResponseContext): Promise<InlineResponse20030>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardDiscardReason(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardSettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the values of the board settings.
     * Get the values of the board settings
     * @param board_id A board id.
     */
    getBoardSettings(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Set the values of the board settings.
     * Set the values of the board settings
     * @param board_id A board id.
     * @param BoardSettings
     */
    setBoardSettings(board_id: number, BoardSettings?: BoardSettings, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardSettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardSettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardSettings(response: ResponseContext): Promise<InlineResponse20043>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setBoardSettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    setBoardSettings(response: ResponseContext): Promise<InlineResponse20043>;
}
/**
 * no description
 */
export declare class BoardStickersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a sticker available on a board.
     * Make a sticker available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject19
     */
    addBoardSticker(board_id: number, sticker_id: number, InlineObject19?: InlineObject19, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a sticker is available on a board.
     * Check if a sticker is available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    checkBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the stickers available on a board.
     * Get a list of stickers available on a board
     * @param board_id A board id.
     */
    getBoardStickers(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a sticker unavailable on a board.
     * Make a sticker unavailable on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    removeBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the properties of a sticker for a board.
     * Update the properties of a sticker for a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject20
     */
    updateBoardSticker(board_id: number, sticker_id: number, InlineObject20?: InlineObject20, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardStickersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardSticker(response: ResponseContext): Promise<InlineResponse20045>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardSticker(response: ResponseContext): Promise<InlineResponse20045>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardStickers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardStickers(response: ResponseContext): Promise<InlineResponse20044>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardSticker(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBoardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBoardSticker(response: ResponseContext): Promise<InlineResponse20045>;
}
/**
 * no description
 */
export declare class BoardStructureApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.
     * Get the current board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructure(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get only the revision number of the current board structure.
     * Get the current revision of the board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructureRevision(board_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardStructureApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCurrentBoardStructure
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCurrentBoardStructure(response: ResponseContext): Promise<InlineResponse20025>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCurrentBoardStructureRevision
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCurrentBoardStructureRevision(response: ResponseContext): Promise<InlineResponse20026>;
}
/**
 * no description
 */
export declare class BoardStructureRevisionsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a specific revision of the board structure.
     * Get a specific revision of the board structure
     * @param board_id A board id.
     * @param revision A revision number.
     */
    getBoardStructureRevision(board_id: number, revision: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the revisions of the board structure and the date and time they were replaced.
     * Get a list of revisions of the board structure
     * @param board_id A board id.
     */
    getBoardStructureRevisions(board_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardStructureRevisionsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardStructureRevision
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardStructureRevision(response: ResponseContext): Promise<InlineResponse20025>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardStructureRevisions
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardStructureRevisions(response: ResponseContext): Promise<InlineResponse20046>;
}
/**
 * no description
 */
export declare class BoardTagsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a tag available on a board.
     * Make a tag available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    addBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a tag is available on a board.
     * Check if a tag is available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    checkBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the tags available on a board.
     * Get a list of tags available on a board
     * @param board_id A board id.
     */
    getBoardTags(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a tag unavailable on a board.
     * Make a tag unavailable on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    removeBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardTagsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardTags
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardTags(response: ResponseContext): Promise<InlineResponse20047>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardTag(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardTeamsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Give a team access to a board.
     * Give a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     * @param InlineObject21
     */
    addBoardTeam(board_id: number, team_id: number, InlineObject21?: InlineObject21, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the role of a team for the current board.
     * Get the role of a team for the current board.
     * @param board_id A board id.
     * @param team_id A team id.
     */
    getBoardTeamRole(board_id: number, team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the teams having access to a board.
     * Get a list of teams having access to a board
     * @param board_id A board id.
     */
    getBoardTeams(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Deny a team access to a board.
     * Deny a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     */
    removeBoardTeam(board_id: number, team_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardTeamsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardTeam(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardTeamRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardTeamRole(response: ResponseContext): Promise<InlineResponse20049>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardTeams
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardTeams(response: ResponseContext): Promise<InlineResponse20048>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardTeam(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardVisibleStandardFieldsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a standard field visible on a board.
     * Make a standard field visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    addBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a standard field is visible on a board.
     * Check if a standard field is visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    checkBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the standard fields visible on a board.
     * Get a list of standard fields visible on a board
     * @param board_id A board id.
     */
    getBoardVisibleStandardFields(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a standard field unvisible on a board.
     * Make a standard field unvisible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    removeBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardVisibleStandardFieldsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardStandardField
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardStandardField(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardStandardField
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardStandardField(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoardVisibleStandardFields
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoardVisibleStandardFields(response: ResponseContext): Promise<InlineResponse20051>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardStandardField
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardStandardField(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class BoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new board.
     * Create a board
     * @param InlineObject5
     */
    createBoard(InlineObject5?: InlineObject5, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a board.
     * Delete a board
     * @param board_id A board id.
     */
    deleteBoard(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single board.
     * Get the details of a single board
     * @param board_id A board id.
     */
    getBoard(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of boards matching some optional criteria.
     * Get a list of boards
     * @param board_ids A list of the board ids that you want to get.
     * @param workspace_ids A list of the workspace ids holding the boards that you want to get.
     * @param is_archived When set to 0 you will only get non-archived boards. When set to 1 you will only get archived boards.
     * @param if_assigned When set to 1 you will only get boards to which you are assigned.
     * @param fields A list of fields that you want in the response. The allowed fields are: board_id, workspace_id, is_archived, name and description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: workflows, settings and structure.
     */
    getBoards(board_ids?: Array<number>, workspace_ids?: Array<number>, is_archived?: 0 | 1, if_assigned?: 0 | 1, fields?: Array<'board_id' | 'workspace_id' | 'is_archived' | 'name' | 'description'>, expand?: Array<'workflows' | 'settings' | 'structure'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a board.
     * Update a board
     * @param board_id A board id.
     * @param InlineObject6
     */
    updateBoard(board_id: number, InlineObject6?: InlineObject6, options?: Configuration): Promise<RequestContext>;
}
export declare class BoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    createBoard(response: ResponseContext): Promise<InlineResponse20014>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteBoard(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoard(response: ResponseContext): Promise<InlineResponse20015>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBoards(response: ResponseContext): Promise<InlineResponse20013>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBoard(response: ResponseContext): Promise<InlineResponse20015>;
}
/**
 * no description
 */
export declare class BusinessRuleExecutionHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of business rule executions matching some optional criteria.
     * Get a list of business rule executions
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistory(business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class BusinessRuleExecutionHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBusinessRulesExecutionHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBusinessRulesExecutionHistory(response: ResponseContext): Promise<InlineResponse20055>;
}
/**
 * no description
 */
export declare class CardAttachmentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card's attachment.
     * Add a card's attachment
     * @param card_id A card id.
     * @param CardAttachmentCreateRequest
     */
    addCardAttachment(card_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an attachment for a card.
     * Delete an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an attachment for a card.
     * Get the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's attachments.
     * Get a card's attachments
     * @param card_id A card id.
     */
    getCardAttachments(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of an attachment for a card.
     * Update the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardAttachment(card_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardAttachmentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardAttachment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardAttachments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardAttachments(response: ResponseContext): Promise<InlineResponse20061>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardAttachment(response: ResponseContext): Promise<void | InlineResponse20062>;
}
/**
 * no description
 */
export declare class CardBlockReasonApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a card is blocked and for what reason.
     * Get a card's block reason
     * @param card_id A card id.
     */
    getCardBlockReason(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Block a card or change its block reason.
     * Block a card
     * @param card_id A card id.
     * @param InlineObject38
     */
    setCardBlockReason(card_id: number, InlineObject38?: InlineObject38, options?: Configuration): Promise<RequestContext>;
    /**
     * Unblock a card.
     * Unblock a card
     * @param card_id A card id.
     */
    unblockCard(card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardBlockReasonApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardBlockReason(response: ResponseContext): Promise<InlineResponse20092>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setCardBlockReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    setCardBlockReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to unblockCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    unblockCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardCoOwnersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a user as a co-owner for a card.
     * Add a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a co-owner is one for the card.
     * Check if a co-owner is one for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's co-owners.
     * Get a card's co-owners
     * @param card_id A card id.
     */
    getCardCoOwners(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user as a co-owner for a card.
     * Remove a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCoOwnersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardCoOwner(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardCoOwner(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCoOwners
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCoOwners(response: ResponseContext): Promise<InlineResponse20095>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardCoOwner(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardCommentAttachmentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card comment's attachment.
     * Add a card comment's attachment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentAttachmentCreateRequest
     */
    addCarCommentAttachment(card_id: number, comment_id: number, CommentAttachmentCreateRequest?: CommentAttachmentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an attachment for a card comment.
     * Delete an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    deleteCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an attachment for a card comment.
     * Get the details of an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    getCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card comment's attachments.
     * Get a card comment's attachments
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardCommentAttachments(card_id: number, comment_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCommentAttachmentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCarCommentAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCarCommentAttachment(response: ResponseContext): Promise<InlineResponse200197>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardCommentAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardCommentAttachment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCommentAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCommentAttachment(response: ResponseContext): Promise<void | InlineResponse20098>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCommentAttachments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCommentAttachments(response: ResponseContext): Promise<InlineResponse200196>;
}
/**
 * no description
 */
export declare class CardCommentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a comment to a card.
     * Add a comment to a card
     * @param card_id A card id.
     * @param CommentCreateRequest
     */
    addCardComment(card_id: number, CommentCreateRequest?: CommentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a comment for a card.
     * Delete a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    deleteCardComment(card_id: number, comment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a comment for a card.
     * Get the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardComment(card_id: number, comment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's comments.
     * Get a card's comments
     * @param card_id A card id.
     */
    getCardComments(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of a comment for a card.
     * Update the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentUpdateRequest
     */
    updateCardComment(card_id: number, comment_id: number, CommentUpdateRequest?: CommentUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCommentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardComment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardComment(response: ResponseContext): Promise<InlineResponse20097>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardComment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardComment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardComment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardComment(response: ResponseContext): Promise<InlineResponse20097>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardComments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardComments(response: ResponseContext): Promise<InlineResponse20096>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardComment
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardComment(response: ResponseContext): Promise<void | InlineResponse20097>;
}
/**
 * no description
 */
export declare class CardCustomFieldContributorsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a user as a contributor for a custom field for a card.
     * Add a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is a contributor for a custom field for a card.
     * Check if a user is a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the default contributors for a custom field for a card.
     * Get a list of the default contributors for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldContributors(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user as a contributor for a custom field for a card.
     * Remove a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldContributorsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardCustomFieldContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardCustomFieldContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldContributors
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldContributors(response: ResponseContext): Promise<InlineResponse20029>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardCustomFieldContributor(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardCustomFieldFilesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a file for a custom field for a card.
     * Add a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldFileCreateRequest
     */
    addCardCustomFieldFile(card_id: number, field_id: number, CardCustomFieldFileCreateRequest?: CardCustomFieldFileCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a file for a custom field for a card.
     * Delete a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single file for a custom field for a card.
     * Get the details of a single file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the files for a custom field for a card.
     * Get a list of the files for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldFiles(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a file for a custom field for a card.
     * Update a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param InlineObject40
     */
    updateCardCustomFieldFile(card_id: number, field_id: number, id: number, InlineObject40?: InlineObject40, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldFilesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardCustomFieldFile(response: ResponseContext): Promise<void | InlineResponse200100>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardCustomFieldFile(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldFile(response: ResponseContext): Promise<InlineResponse200101>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldFiles
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldFiles(response: ResponseContext): Promise<InlineResponse20099>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardCustomFieldFile(response: ResponseContext): Promise<void | InlineResponse200101>;
}
/**
 * no description
 */
export declare class CardCustomFieldSelectedCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add or update a selected card for a custom field for a card.
     * Add or update a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     * @param InlineObject41
     */
    addOrUpdateCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, InlineObject41?: InlineObject41, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a selected card for a custom field for a card.
     * Get the details of a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    getCardCustomFieldSelectedCard(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the selected cards for a custom field of type card picker for a card.
     * Get a list of the selected cards for a custom field of type card picker for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedCards(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a selected card for a custom field for a card.
     * Remove a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    removeCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldSelectedCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addOrUpdateCardCustomFieldSelectedCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    addOrUpdateCardCustomFieldSelectedCards(response: ResponseContext): Promise<void | InlineResponse200103>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldSelectedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldSelectedCard(response: ResponseContext): Promise<InlineResponse200103>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldSelectedCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldSelectedCards(response: ResponseContext): Promise<InlineResponse200102>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardCustomFieldSelectedCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardCustomFieldSelectedCards(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardCustomFieldSelectedValuesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add or update a selected value for a custom field for a card.
     * Add or update a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param CardCustomFieldSelectedValueAddOrUpdateRequest
     */
    addOrUpdateCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, CardCustomFieldSelectedValueAddOrUpdateRequest?: CardCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a selected value for a custom field for a card.
     * Get the details of a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardCustomFieldSelectedValue(card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card.
     * Get a list of the selected values for a custom field of type dropdown for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedValues(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a selected value for a custom field for a card.
     * Remove a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldSelectedValuesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addOrUpdateCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    addOrUpdateCardCustomFieldSelectedValues(response: ResponseContext): Promise<InlineResponse20071 | void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldSelectedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldSelectedValue(response: ResponseContext): Promise<InlineResponse20071>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldSelectedValues(response: ResponseContext): Promise<InlineResponse200104>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardCustomFieldSelectedValues(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardCustomFieldVotesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Delete your vote for a custom field for a card.
     * Delete your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    deleteMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the votes for a custom field for a card.
     * Get a list of the votes for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldVotes(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get your vote for a custom field for a card.
     * Get your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Set your vote for a custom field for a card.
     * Set your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject42
     */
    setMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject42?: InlineObject42, options?: Configuration): Promise<RequestContext>;
    /**
     * Update your vote for a custom field for a card.
     * Update your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject43
     */
    updateMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject43?: InlineObject43, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldVotesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteMyCardCustomFieldVote
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteMyCardCustomFieldVote(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardCustomFieldVotes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardCustomFieldVotes(response: ResponseContext): Promise<InlineResponse200105>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyCardCustomFieldVote
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyCardCustomFieldVote(response: ResponseContext): Promise<InlineResponse200106>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setMyCardCustomFieldVote
     * @throws ApiException if the response code was not in [200, 299]
     */
    setMyCardCustomFieldVote(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMyCardCustomFieldVote
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMyCardCustomFieldVote(response: ResponseContext): Promise<InlineResponse200107>;
}
/**
 * no description
 */
export declare class CardCustomFieldsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a custom field to a card.
     * Add a custom field to a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldAddOrUpdateRequest
     */
    addCardCustomField(card_id: number, field_id: number, CardCustomFieldAddOrUpdateRequest?: CardCustomFieldAddOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a custom field from a card.
     * Remove a custom field from a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardCustomField(card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardCustomFieldsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardCustomField(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardCustomField(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardOutcomeCheckpointsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card outcome's checkpoint.
     * Add a card outcome's checkpoint
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeCheckpointCreateRequest
     */
    addCardOutcomeCheckpoint(card_id: number, outcome_id: number, CardOutcomeCheckpointCreateRequest?: CardOutcomeCheckpointCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a checkpoint for a card outcome.
     * Delete a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    deleteCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a checkpoint for a card outcome.
     * Get the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    getCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card outcome's checkpoints.
     * Get a card outcome's checkpoints
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCheckpoints(card_id: number, outcome_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of a checkpoint for a card outcome.
     * Update the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     * @param CardOutcomeCheckpointUpdateRequest
     */
    updateCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, CardOutcomeCheckpointUpdateRequest?: CardOutcomeCheckpointUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardOutcomeCheckpointsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardOutcomeCheckpoint
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardOutcomeCheckpoint(response: ResponseContext): Promise<InlineResponse200113>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardOutcomeCheckpoint
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardOutcomeCheckpoint(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomeCheckpoint
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomeCheckpoint(response: ResponseContext): Promise<void | InlineResponse200113>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomeCheckpoints
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomeCheckpoints(response: ResponseContext): Promise<InlineResponse200112>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardOutcomeCheckpoint
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardOutcomeCheckpoint(response: ResponseContext): Promise<InlineResponse200113>;
}
/**
 * no description
 */
export declare class CardOutcomeCurrentValueApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the details of a current value for a card outcome.
     * Get the details of a current value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCurrentValue(card_id: number, outcome_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardOutcomeCurrentValueApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomeCurrentValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomeCurrentValue(response: ResponseContext): Promise<InlineResponse200114>;
}
/**
 * no description
 */
export declare class CardOutcomeValuesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card outcome's value.
     * Add a card outcome's value
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeValueCreateRequest
     */
    addCardOutcomeValue(card_id: number, outcome_id: number, CardOutcomeValueCreateRequest?: CardOutcomeValueCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a value for a card outcome.
     * Delete a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    deleteCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a value for a card outcome.
     * Get the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    getCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card outcome's values.
     * Get a card outcome's values
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeValues(card_id: number, outcome_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of a value for a card outcome.
     * Update the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     * @param CardOutcomeValueUpdateRequest
     */
    updateCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, CardOutcomeValueUpdateRequest?: CardOutcomeValueUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardOutcomeValuesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardOutcomeValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardOutcomeValue(response: ResponseContext): Promise<InlineResponse200114>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardOutcomeValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardOutcomeValue(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomeValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomeValue(response: ResponseContext): Promise<void | InlineResponse200115>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomeValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomeValues(response: ResponseContext): Promise<InlineResponse200114>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardOutcomeValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardOutcomeValue(response: ResponseContext): Promise<InlineResponse200115>;
}
/**
 * no description
 */
export declare class CardOutcomesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add an outcome to a card.
     * Add an outcome to a card
     * @param card_id A card id.
     * @param CardOutcomeCreateRequest
     */
    addCardOutcome(card_id: number, CardOutcomeCreateRequest?: CardOutcomeCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an outcome for a card.
     * Delete an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    deleteCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an outcome for a card.
     * Get the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's outcomes.
     * Get a card's outcomes
     * @param card_id A card id.
     */
    getCardOutcomes(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of an outcome for a card.
     * Update the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeUpdateRequest
     */
    updateCardOutcome(card_id: number, outcome_id: number, CardOutcomeUpdateRequest?: CardOutcomeUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardOutcomesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardOutcome
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardOutcome(response: ResponseContext): Promise<InlineResponse200110>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardOutcome
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardOutcome(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcome
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcome(response: ResponseContext): Promise<InlineResponse200111>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardOutcomes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardOutcomes(response: ResponseContext): Promise<InlineResponse200109>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardOutcome
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardOutcome(response: ResponseContext): Promise<void | InlineResponse200111>;
}
/**
 * no description
 */
export declare class CardRevisionsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a specific revision of the card.
     * Get a specific revision of the card
     * @param card_id A card id.
     * @param revision A revision number.
     */
    getCardRevision(card_id: number, revision: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the revisions of the card and the date and time they were replaced.
     * Get a list of revisions of the card
     * @param card_id A card id.
     */
    getCardRevisions(card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardRevisionsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardRevision
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardRevision(response: ResponseContext): Promise<InlineResponse200121>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardRevisions
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardRevisions(response: ResponseContext): Promise<InlineResponse200120>;
}
/**
 * no description
 */
export declare class CardStickersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a sticker to a card.
     * Add a sticker to a card
     * @param card_id A card id.
     * @param InlineObject47
     */
    addCardSticker(card_id: number, InlineObject47?: InlineObject47, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the stickers added to a card. The stickers are listed in the order in which they were added.
     * Get a list of card stickers
     * @param card_id A card id.
     */
    getCardStickers(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a sticker from a card.
     * Remove a sticker from a card
     * @param card_id A card id.
     * @param id A relationship id.
     */
    removeCardSticker(card_id: number, id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardStickersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardSticker(response: ResponseContext): Promise<void | InlineResponse200123>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardStickers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardStickers(response: ResponseContext): Promise<InlineResponse200122>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardSticker(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardSubtaskAttachmentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card subtask's attachment.
     * Add a card subtask's attachment
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardAttachmentCreateRequest
     */
    addCarSubtaskAttachment(card_id: number, subtask_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an attachment for a card subtask.
     * Delete an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an attachment for a card subtask.
     * Get the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card subtask's attachments.
     * Get a card subtask's attachments
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtaskAttachments(card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of an attachment for a card subtask.
     * Update the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardSubtaskAttachmentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCarSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCarSubtaskAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardSubtaskAttachment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardSubtaskAttachment(response: ResponseContext): Promise<void | InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardSubtaskAttachments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardSubtaskAttachments(response: ResponseContext): Promise<InlineResponse20061>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardSubtaskAttachment(response: ResponseContext): Promise<InlineResponse20062>;
}
/**
 * no description
 */
export declare class CardSubtasksApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a subtask to a card.
     * Add a subtask to a card
     * @param card_id A card id.
     * @param SubtaskCreateRequest
     */
    addCardSubtask(card_id: number, SubtaskCreateRequest?: SubtaskCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a subtask for a card.
     * Delete a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a subtask for a card.
     * Get the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's subtasks.
     * Get a card's subtasks
     * @param card_id A card id.
     */
    getCardSubtasks(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of a subtask for a card.
     * Update the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param SubtaskUpdateRequest
     */
    updateCardSubtask(card_id: number, subtask_id: number, SubtaskUpdateRequest?: SubtaskUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardSubtasksApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardSubtask(response: ResponseContext): Promise<InlineResponse200125>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardSubtask(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardSubtask(response: ResponseContext): Promise<InlineResponse200125>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardSubtasks
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardSubtasks(response: ResponseContext): Promise<InlineResponse200124>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardSubtask(response: ResponseContext): Promise<void | InlineResponse200125>;
}
/**
 * no description
 */
export declare class CardTagsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a tag to a card.
     * Add a tag to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a tag is added to a card.
     * Check if a tag is added to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the tags added to a card. The tags are listed in the order in which they were added.
     * Get a list of card tags
     * @param card_id A card id.
     */
    getCardTags(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a tag from a card.
     * Remove a tag from a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTagsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTags
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTags(response: ResponseContext): Promise<InlineResponse200127>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTag(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardAttachmentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add an attachment of a card for the card template.
     * Add an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCardAttachment(template_id: number, card_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an attachment of a card for the card template.
     * Delete an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an attachment of a card for the card template.
     * Get the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of attachments of a card for the card template.
     * Get a list of attachments of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardAttachments(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of an attachment of a card for the card template.
     * Update the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardAttachmentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplateCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplateCardAttachment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardAttachments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardAttachments(response: ResponseContext): Promise<InlineResponse20061>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplateCardAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplateCardAttachment(response: ResponseContext): Promise<InlineResponse20062>;
}
/**
 * no description
 */
export declare class CardTemplateCardChildCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a child of a given card for the card template.
     * Make a card a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject26
     */
    addCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, InlineObject26?: InlineObject26, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a child of a given card for the card template and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of child cards of a card for the card template.
     * Get a list of child cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardChildCards(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    removeCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardChildCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardChildCard(response: ResponseContext): Promise<InlineResponse20065>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardChildCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardChildCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardChildCards(response: ResponseContext): Promise<InlineResponse20063>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardChildCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardCoOwnersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a user as a co-owner for a card for the card template.
     * Add a user as a co-owner for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a co-owner is one for the card for the card template.
     * Check if a co-owner is one for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of co-owners of a card for the card template.
     * Get a list of co-owners of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardCoOwners(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user as a co-owner for the card for the card template.
     * Remove a user as a co-owner for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardCoOwnersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardCoOwner(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardCoOwner(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCoOwners
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCoOwners(response: ResponseContext): Promise<InlineResponse20066>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardCoOwner
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardCoOwner(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardCustomFieldContributorsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a user as a contributor for a custom field for a card for the card template.
     * Add a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is a contributor for a custom field for a card for the card template.
     * Check if a user is a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the default contributors for a custom field for a card for the card template.
     * Get a list of the default contributors for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldContributors(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user as a contributor for a custom field for a card  for the card template.
     * Remove a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardCustomFieldContributorsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardCustomFieldContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardCustomFieldContributor(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCustomFieldContributors
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCustomFieldContributors(response: ResponseContext): Promise<InlineResponse20029>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardCustomFieldContributor
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardCustomFieldContributor(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardCustomFieldFilesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a file for a custom field for a card for the card template.
     * Add a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldFileCreateRequest
     */
    addCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldFileCreateRequest?: CardTemplateCustomFieldFileCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a file for a custom field for a card for the card template.
     * Delete a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single file for a custom field for a card for the card template.
     * Get the details of a single file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the files for a custom field for a card for the card template.
     * Get a list of the files for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldFiles(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a file for a custom field for a card for the card template.
     * Update a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param CardTemplateCustomFieldFileUpdateRequest
     */
    updateCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, CardTemplateCustomFieldFileUpdateRequest?: CardTemplateCustomFieldFileUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardCustomFieldFilesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardCustomFieldFile(response: ResponseContext): Promise<InlineResponse20068>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplateCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplateCardCustomFieldFile(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCustomFieldFile(response: ResponseContext): Promise<InlineResponse20068>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCustomFieldFiles
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCustomFieldFiles(response: ResponseContext): Promise<InlineResponse20067>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplateCardCustomFieldFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplateCardCustomFieldFile(response: ResponseContext): Promise<InlineResponse20068>;
}
/**
 * no description
 */
export declare class CardTemplateCardCustomFieldSelectedValuesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldSelectedValueAddOrUpdateRequest
     */
    addCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldSelectedValueAddOrUpdateRequest?: CardTemplateCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add or update a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject27
     */
    addOrUpdateCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, InlineObject27?: InlineObject27, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a selected value for a custom field for a card for the card template.
     * Get the details of a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardTemplateCardCustomFieldSelectedValue(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template.
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a selected value for a custom field for a card for the card template.
     * Remove a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardCustomFieldSelectedValuesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardCustomFieldSelectedValues(response: ResponseContext): Promise<InlineResponse20070>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addOrUpdateCardTemplateCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    addOrUpdateCardTemplateCardCustomFieldSelectedValues(response: ResponseContext): Promise<InlineResponse20071>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCustomFieldSelectedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCustomFieldSelectedValue(response: ResponseContext): Promise<InlineResponse20071>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardCustomFieldSelectedValues(response: ResponseContext): Promise<InlineResponse20069>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardCustomFieldSelectedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardCustomFieldSelectedValues(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardCustomFieldsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a custom field to a card for the card template.
     * Add a custom field to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldAddOrUpdateRequest
     */
    addCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldAddOrUpdateRequest?: CardTemplateCustomFieldAddOrUpdateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a custom field from a card for the card template.
     * Remove a custom field from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardCustomFieldsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardCustomField(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardCustomField(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardParentCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a parent of a given card for the card template.
     * Make a card a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject28
     */
    addCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, InlineObject28?: InlineObject28, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a parent of a given card for the card template and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of parent cards of a card for the card template.
     * Get a list of parent cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardParentCards(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    removeCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardParentCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardParentCard(response: ResponseContext): Promise<InlineResponse20073>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardParentCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardParentCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardParentCards(response: ResponseContext): Promise<InlineResponse20072>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardParentCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardPredecessorCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a predecessor of a given card for the card template.
     * Make a card a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject29
     */
    addCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, InlineObject29?: InlineObject29, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a predecessor of a given card for the card template and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of predecessor cards of a card for the card template.
     * Get a list of predecessor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardPredecessorCards(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removeCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardPredecessorCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardPredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardPredecessorCard(response: ResponseContext): Promise<InlineResponse20075>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardPredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardPredecessorCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardPredecessorCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardPredecessorCards(response: ResponseContext): Promise<InlineResponse20074>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardPredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardPredecessorCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardRelativeCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a relative of a given card for the card template.
     * Make a card a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject30
     */
    addCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, InlineObject30?: InlineObject30, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a relative of a given card for the card template and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of relative cards of a card for the card template.
     * Get a list of relative cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardRelativeCards(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardRelativeCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardRelatedCard(response: ResponseContext): Promise<InlineResponse20077>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardRelatedCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardRelativeCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardRelativeCards(response: ResponseContext): Promise<InlineResponse20076>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardRelatedCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardStickersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a sticker of a card for the card template.
     * Add a sticker of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param InlineObject31
     */
    addCardTemplateCardSticker(template_id: number, card_id: number, InlineObject31?: InlineObject31, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of stickers of a card for the card template. The stickers are listed in the order in which they were added.
     * Get a list of stickers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardStickers(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a sticker from a card for the card template.
     * Remove a sticker from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param sticker_id A sticker id.
     */
    removeCardTemplateCardSticker(template_id: number, card_id: number, sticker_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardStickersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardSticker(response: ResponseContext): Promise<InlineResponse20079>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardStickers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardStickers(response: ResponseContext): Promise<InlineResponse20078>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardSticker(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardSubtaskAttachmentsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add an attachment of a subtask of a card for the card template.
     * Add an attachment of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCarSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an attachment of a subtask for a card for the card template.
     * Delete an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of an attachment of a subtask for a card for the card template.
     * Get the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of attachments of a subtask of a card for the card template.
     * Get a list of attachments of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtaskAttachments(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of an attachment of a subtask for a card for the card template.
     * Update the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardSubtaskAttachmentsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCarSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCarSubtaskAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplateCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplateCardSubtaskAttachment(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardSubtaskAttachment(response: ResponseContext): Promise<InlineResponse20062>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardSubtaskAttachments
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardSubtaskAttachments(response: ResponseContext): Promise<InlineResponse20061>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplateCardSubtaskAttachment
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplateCardSubtaskAttachment(response: ResponseContext): Promise<InlineResponse20062>;
}
/**
 * no description
 */
export declare class CardTemplateCardSubtasksApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a subtask of a card for the card template.
     * Add a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateSubtaskCreateRequest
     */
    addCardTemplateCardSubtask(template_id: number, card_id: number, CardTemplateSubtaskCreateRequest?: CardTemplateSubtaskCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a subtask for a card for the card template.
     * Delete a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a subtask of a card for the card template.
     * Get the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of subtasks of a card for the card template.
     * Get a list of subtasks of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSubtasks(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update the details of a subtask of a card for the card template.
     * Update the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateSubtaskUpdateRequest
     */
    updateCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, CardTemplateSubtaskUpdateRequest?: CardTemplateSubtaskUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardSubtasksApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardSubtask(response: ResponseContext): Promise<InlineResponse20081>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplateCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplateCardSubtask(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardSubtask(response: ResponseContext): Promise<InlineResponse20081>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardSubtasks
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardSubtasks(response: ResponseContext): Promise<InlineResponse20080>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplateCardSubtask
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplateCardSubtask(response: ResponseContext): Promise<InlineResponse20081>;
}
/**
 * no description
 */
export declare class CardTemplateCardSuccessorCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a successor of a given card for the card template.
     * Make a card a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject32
     */
    addCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, InlineObject32?: InlineObject32, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a successor of a given card for the card template and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of successor cards of a card for the card template.
     * Get a list of successor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSuccessorCards(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardSuccessorCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardSuccessorCard(response: ResponseContext): Promise<InlineResponse20083>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardSuccessorCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardSuccessorCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardSuccessorCards(response: ResponseContext): Promise<InlineResponse20082>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardSuccessorCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardTagsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a tag to a card for the card template.
     * Add a tag to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a tag is added to a card for the card template.
     * Check if a tag is added to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of tags of a card for the card template. The tags are listed in the order in which they were added.
     * Get a list of tags of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardTags(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a tag from a card for the card template.
     * Remove a tag from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardTagsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCardTemplateCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCardTemplateCardTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardTags
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardTags(response: ResponseContext): Promise<InlineResponse20084>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardTag(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardWatchersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a user a watcher for a card for the card for the card template.
     * Make a user a watcher for a card for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check the user with a user id is a watcher for the card for the card template
     * Check the user with a user id is a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of watchers of a card for the card template.
     * Get a list of watchers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardWatchers(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a user not a watcher for the card for the card template.
     * Make a user not a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardWatchersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkUserIsCardTemplateCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkUserIsCardTemplateCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCardWatchers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCardWatchers(response: ResponseContext): Promise<InlineResponse20085>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardTemplateCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardTemplateCardWatcher(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardTemplateCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a card to the card template.
     * Add a card to the card template
     * @param template_id A template id.
     * @param CardTemplateCardInExistingTemplateCreateRequest
     */
    addCardTemplateCard(template_id: number, CardTemplateCardInExistingTemplateCreateRequest?: CardTemplateCardInExistingTemplateCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a card for the card template
     * Delete a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    deleteCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single card for the card template.
     * Get the details of a single card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of cards for the card template.
     * Get a list of cards for the card template
     * @param template_id A template id.
     */
    getCardTemplateCards(template_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a card of the card template.
     * Update a card of the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateCardUpdateRequest
     */
    updateCardTemplateCard(template_id: number, card_id: number, CardTemplateCardUpdateRequest?: CardTemplateCardUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardTemplateCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardTemplateCard(response: ResponseContext): Promise<InlineResponse20060>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplateCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplateCard(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCard(response: ResponseContext): Promise<InlineResponse20060>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplateCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplateCards(response: ResponseContext): Promise<InlineResponse20059>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplateCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplateCard(response: ResponseContext): Promise<InlineResponse20060>;
}
/**
 * no description
 */
export declare class CardTemplateHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of card templates creation, deletion, update events matching some optional criteria.
     * Get a list of card templates creation, deletion, update events
     * @param template_ids A list of the template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card template.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistory(template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplateHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplatesHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplatesHistory(response: ResponseContext): Promise<InlineResponse20058>;
}
/**
 * no description
 */
export declare class CardTemplatesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new card template.
     * Create a new card template
     * @param CardTemplateCreateRequest
     */
    createCardTemplate(CardTemplateCreateRequest?: CardTemplateCreateRequest, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a card template.
     * Delete a card template
     * @param template_id A template id.
     */
    deleteCardTemplate(template_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single card template.
     * Get the details of a single card template
     * @param template_id A template id.
     */
    getCardTemplate(template_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of card templates matching some optional criteria.
     * Get a list of card templates
     * @param template_ids A list of the card template ids that you want to get.
     * @param name Find a card template by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card templates. When set to 0 you will only get disabled card templates.
     * @param fields A list of fields that you want in the response. The allowed fields are: template_id, name, description, primary_template_card_id, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count and template_cards.
     */
    getCardTemplates(template_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'template_id' | 'name' | 'description' | 'primary_template_card_id' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'template_cards'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a card template.
     * Update a card template
     * @param template_id A template id.
     * @param CardTemplateUpdateRequest
     */
    updateCardTemplate(template_id: number, CardTemplateUpdateRequest?: CardTemplateUpdateRequest, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTemplatesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCardTemplate(response: ResponseContext): Promise<InlineResponse20057>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardTemplate(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplate(response: ResponseContext): Promise<InlineResponse20057>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplates
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplates(response: ResponseContext): Promise<InlineResponse20056>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardTemplate
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardTemplate(response: ResponseContext): Promise<InlineResponse20057>;
}
/**
 * no description
 */
export declare class CardTypeBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the card type is available.
     * Get a list of boards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeBoards(type_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTypeBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTypeBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTypeBoards(response: ResponseContext): Promise<InlineResponse20011>;
}
/**
 * no description
 */
export declare class CardTypeCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards on which the card type is available.
     * Get a list of cards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeCards(type_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTypeCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTypeCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTypeCards(response: ResponseContext): Promise<InlineResponse20012>;
}
/**
 * no description
 */
export declare class CardTypeHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of card types creation, deletion, update events matching some optional criteria.
     * Get a list of card types creation, deletion, update events
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistory(type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTypeHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTypesHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTypesHistory(response: ResponseContext): Promise<InlineResponse20088>;
}
/**
 * no description
 */
export declare class CardTypesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new card type.
     * Create a card type
     * @param InlineObject33
     */
    createCardType(InlineObject33?: InlineObject33, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a card type.
     * Delete a card type
     * @param type_id A type id.
     * @param replace_with_type_id The id of a card type with which to replace the one to be deleted on the cards using it.
     */
    deleteCardType(type_id: number, replace_with_type_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single card type.
     * Get the details of a single card type
     * @param type_id A type id.
     */
    getCardType(type_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of card types matching some optional criteria.
     * Get a list of card types
     * @param type_ids A list of the card type ids that you want to get.
     * @param name Find a card type by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card types. When set to 0 you will only get disabled card types.
     * @param fields A list of fields that you want in the response. The allowed fields are: type_id, icon_type, icon_id, name, description, color, card_color_sync, all_properties_are_locked, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards, board_count, card_ids, card_count and business_rules.
     */
    getCardTypes(type_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'type_id' | 'icon_type' | 'icon_id' | 'name' | 'description' | 'color' | 'card_color_sync' | 'all_properties_are_locked' | 'availability' | 'is_enabled'>, expand?: Array<'boards' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a card type.
     * Update a card type
     * @param type_id A type id.
     * @param InlineObject34
     */
    updateCardType(type_id: number, InlineObject34?: InlineObject34, options?: Configuration): Promise<RequestContext>;
}
export declare class CardTypesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCardType(response: ResponseContext): Promise<InlineResponse20087>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCardType(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardType(response: ResponseContext): Promise<InlineResponse20087>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTypes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTypes(response: ResponseContext): Promise<InlineResponse20086>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCardType
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCardType(response: ResponseContext): Promise<InlineResponse20087>;
}
/**
 * no description
 */
export declare class CardWatchedApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a current user a watcher for the card.
     * Make a current user a watcher for the card
     * @param card_id A card id.
     */
    addCurrentUserForCardWatcher(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check current user is a watcher for the card
     * Check current user is a watcher for the card
     * @param card_id A card id.
     */
    checkCurrentUserIsCardWatcher(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a current user not a watcher for the card.
     * Make a current user not a watcher for the card
     * @param card_id A card id.
     */
    removeCurrentUserCardWatcher(card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardWatchedApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCurrentUserForCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCurrentUserForCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkCurrentUserIsCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkCurrentUserIsCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCurrentUserCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCurrentUserCardWatcher(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardWatchersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a user a watcher for the card.
     * Make a user a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check the user with a user id is a watcher for the card
     * Check the user with a user id is a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a card's watchers.
     * Get a card's watchers
     * @param card_id A card id.
     */
    getCardWatchers(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a user not a watcher for the card.
     * Make a user not a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CardWatchersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkUserIsCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkUserIsCardWatcher(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardWatchers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardWatchers(response: ResponseContext): Promise<InlineResponse200128>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCardWatcher
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCardWatcher(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Delete a card.
     * Delete a card
     * @param card_id A card id.
     * @param exceeding_reason Exceeding reason.
     */
    deleteCard(card_id: number, exceeding_reason?: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single card.
     * Get the details of a single card
     * @param card_id A card id.
     */
    getCard(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of cards matching some optional criteria.
     * Get a list of cards
     * @param card_ids A list of the card ids that you want to get.
     * @param board_ids A list of the board ids for which you want to get the results.
     * @param workflow_ids A list of the workflows ids for which you want to get the results.
     * @param state The state value of cards that you want to get. By default it&#39;s the active state.
     * @param created_from The first date and time of created cards for which you want results.
     * @param created_from_date The first date of created cards for which you want results.
     * @param created_to The last date and time of created cards for which you want results.
     * @param created_to_date The last date of created cards for which you want results.
     * @param last_modified_from The first date and time of last modified cards for which you want results.
     * @param last_modified_from_date The first date of last modified cards for which you want results.
     * @param last_modified_to The last date and time of last modified cards for which you want results.
     * @param last_modified_to_date The last date of last modified cards for which you want results.
     * @param in_current_position_since_from The first date and time of in current position since cards for which you want results.
     * @param in_current_position_since_from_date The first date of in current position since cards for which you want results.
     * @param in_current_position_since_to The last date and time of in current position since cards for which you want results.
     * @param in_current_position_since_to_date The last date of in current position since cards for which you want results.
     * @param is_blocked When set to 1 you will only get blocked cards. When set to 0 you will only get non blocked cards.
     * @param custom_ids A list of the custom ids for which you want to get the results.
     * @param owner_user_ids A list of the user ids of assignees for which you want to get the results.
     * @param type_ids A list of the type ids for which you want to get the results.
     * @param sizes A list of the sizes for which you want to get the results.
     * @param priorities A list of the priorities for which you want to get the results.
     * @param colors A list of the colors for which you want to get the results.
     * @param deadline_from The first date and time of deadline cards for which you want results.
     * @param deadline_from_date The first date of deadline cards for which you want results.
     * @param deadline_to The last date and time of deadline cards for which you want results.
     * @param deadline_to_date The last date of deadline cards for which you want results.
     * @param column_ids A list of the column ids for which you want to get the results.
     * @param lane_ids A list of the lane ids for which you want to get the results.
     * @param sections A list of the sections for which you want to get the results.
     * @param last_column_ids A list of the last column ids for which you want to get the results.
     * @param last_lane_ids A list of the last lane ids for which you want to get the results.
     * @param version_ids A list of the version ids for which you want to get the results.
     * @param archived_from The first date and time of archived cards for which you want results.
     * @param archived_from_date The first date of archived cards for which you want results.
     * @param archived_to The last date and time of archived cards for which you want results.
     * @param archived_to_date The last date of archived cards for which you want results.
     * @param reason_ids A list of the reasons ids for which you want to get the results.
     * @param discarded_from The first date and time of discarded cards for which you want results.
     * @param discarded_from_date The first date of discarded cards for which you want results.
     * @param discarded_to The last date and time of discarded cards for which you want results.
     * @param discarded_to_date The last date of discarded cards for which you want results.
     * @param include_logged_time_for_subtasks Controls whether this include logged times for subtasks.
     * @param include_logged_time_for_child_cards Controls whether this include logged times for child cards.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     * @param fields A list of fields that you want in the response. The allowed fields are: card_id, title, description, custom_id, owner_user_id, type_id, size, priority, color, deadline, reporter, created_at, revision, last_modified, in_current_position_since, board_id, workflow_id, column_id, lane_id, section, position, last_column_id, last_lane_id, version_id, archived_at, reason_id, discard_comment, discarded_at, is_blocked, block_reason, current_block_time, current_logged_time, current_cycle_time, child_card_stats, finished_subtask_count, unfinished_subtask_count and comment_count.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.
     */
    getCards(card_ids?: Array<number>, board_ids?: Array<number>, workflow_ids?: Array<number>, state?: 'active' | 'archived' | 'discarded', created_from?: Date, created_from_date?: Date, created_to?: Date, created_to_date?: Date, last_modified_from?: Date, last_modified_from_date?: Date, last_modified_to?: Date, last_modified_to_date?: Date, in_current_position_since_from?: Date, in_current_position_since_from_date?: Date, in_current_position_since_to?: Date, in_current_position_since_to_date?: Date, is_blocked?: 0 | 1, custom_ids?: Array<string>, owner_user_ids?: Array<number>, type_ids?: Array<number>, sizes?: Array<number>, priorities?: Array<number>, colors?: Array<string>, deadline_from?: Date, deadline_from_date?: Date, deadline_to?: Date, deadline_to_date?: Date, column_ids?: Array<number>, lane_ids?: Array<number>, sections?: Array<number>, last_column_ids?: Array<number>, last_lane_ids?: Array<number>, version_ids?: Array<number>, archived_from?: Date, archived_from_date?: Date, archived_to?: Date, archived_to_date?: Date, reason_ids?: Array<number>, discarded_from?: Date, discarded_from_date?: Date, discarded_to?: Date, discarded_to_date?: Date, include_logged_time_for_subtasks?: 0 | 1, include_logged_time_for_child_cards?: 0 | 1, page?: number, per_page?: number, fields?: Array<'card_id' | 'title' | 'description' | 'custom_id' | 'owner_user_id' | 'type_id' | 'size' | 'priority' | 'color' | 'deadline' | 'reporter' | 'created_at' | 'revision' | 'last_modified' | 'in_current_position_since' | 'board_id' | 'workflow_id' | 'column_id' | 'lane_id' | 'section' | 'position' | 'last_column_id' | 'last_lane_id' | 'version_id' | 'archived_at' | 'reason_id' | 'discard_comment' | 'discarded_at' | 'is_blocked' | 'block_reason' | 'current_block_time' | 'current_logged_time' | 'current_cycle_time' | 'child_card_stats' | 'finished_subtask_count' | 'unfinished_subtask_count' | 'comment_count'>, expand?: Array<'custom_fields' | 'stickers' | 'tag_ids' | 'co_owner_ids' | 'watcher_ids' | 'attachments' | 'checked_column_checklist_items' | 'initiative_details' | 'annotations' | 'subtasks' | 'linked_cards' | 'transitions' | 'block_times' | 'logged_times' | 'logged_times_for_child_cards' | 'lead_time_per_column' | 'outcomes' | 'outcome_current_values'>, options?: Configuration): Promise<RequestContext>;
}
export declare class CardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCard(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCard(response: ResponseContext): Promise<InlineResponse20091>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCards(response: ResponseContext): Promise<InlineResponse20089>;
}
/**
 * no description
 */
export declare class CardsCreateManyApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create many cards.
     * Create many cards
     * @param InlineObject35
     */
    createManyCards(InlineObject35?: InlineObject35, options?: Configuration): Promise<RequestContext>;
}
export declare class CardsCreateManyApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createManyCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    createManyCards(response: ResponseContext): Promise<InlineResponse20090>;
}
/**
 * no description
 */
export declare class CardsDeleteManyApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Delete many cards.
     * Delete many cards
     * @param InlineObject36
     */
    deleteManyCards(InlineObject36?: InlineObject36, options?: Configuration): Promise<RequestContext>;
}
export declare class CardsDeleteManyApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteManyCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteManyCards(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CardsUpdateManyApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Update many cards.
     * Update many cards
     * @param InlineObject37
     */
    updateManyCards(InlineObject37?: InlineObject37, options?: Configuration): Promise<RequestContext>;
}
export declare class CardsUpdateManyApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateManyCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateManyCards(response: ResponseContext): Promise<InlineResponse20090>;
}
/**
 * no description
 */
export declare class CellLimitsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cell limits for a specified board.
     * Get a list of cell limits
     * @param board_id A board id.
     */
    getCellLimits(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Set a cell limit.
     * Set a cell limit
     * @param board_id A board id.
     * @param InlineObject7
     */
    setCellLimit(board_id: number, InlineObject7?: InlineObject7, options?: Configuration): Promise<RequestContext>;
}
export declare class CellLimitsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCellLimits
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCellLimits(response: ResponseContext): Promise<InlineResponse20020>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setCellLimit
     * @throws ApiException if the response code was not in [200, 299]
     */
    setCellLimit(response: ResponseContext): Promise<InlineResponse20021>;
}
/**
 * no description
 */
export declare class CheckSPFRecordApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a domain has a valid SPF record including mail.kanbanize.com.
     * Check if the SPF record of a domain includes mail.kanbanize.com
     * @param InlineObject49
     */
    checkSPFRecord(InlineObject49?: InlineObject49, options?: Configuration): Promise<RequestContext>;
}
export declare class CheckSPFRecordApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkSPFRecord
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkSPFRecord(response: ResponseContext): Promise<InlineResponse200129>;
}
/**
 * no description
 */
export declare class ChildCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a child of a given card.
     * Make a card a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject39
     */
    addChildCard(card_id: number, child_card_id: number, InlineObject39?: InlineObject39, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a child of a given card and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkChildCard(card_id: number, child_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the full list of child cards of a given card and the child cards of those cards too.
     * Get a list of child cards including their child cards too
     * @param card_id A card id.
     */
    getChildCardGraph(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the child cards of a given card.
     * Get a list of child cards
     * @param card_id A card id.
     */
    getChildCards(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeChildCard(card_id: number, child_card_id: number, exceeding_reason?: string, options?: Configuration): Promise<RequestContext>;
}
export declare class ChildCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addChildCard(response: ResponseContext): Promise<void | InlineResponse20065>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkChildCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getChildCardGraph
     * @throws ApiException if the response code was not in [200, 299]
     */
    getChildCardGraph(response: ResponseContext): Promise<InlineResponse20093>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getChildCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getChildCards(response: ResponseContext): Promise<InlineResponse20094>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeChildCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeChildCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class ColumnsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new column.
     * Create a column
     * @param board_id A board id.
     * @param InlineObject8
     */
    createColumn(board_id: number, InlineObject8?: InlineObject8, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a column.
     * Delete a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param move_cards_to_column_id The id of a column to which to move the cards from the deleted column, if there are any.
     * @param move_metrics_to_column_id The id of a column to which to move the cycle time data associated with the deleted column, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteColumn(board_id: number, column_id: number, move_cards_to_column_id?: number, move_metrics_to_column_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single column.
     * Get the details of a single column
     * @param board_id A board id.
     * @param column_id A column id.
     */
    getColumn(board_id: number, column_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the columns in a specified board.
     * Get a list of columns
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: column_id, workflow, section, parent_column_id, position, name, description, color, limit, cards_per_row and flow_type.
     */
    getColumns(board_id: number, fields?: Array<'column_id' | 'workflow_id' | 'section' | 'parent_column_id' | 'position' | 'name' | 'description' | 'color' | 'limit' | 'cards_per_row' | 'flow_type'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a column.
     * Update a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param InlineObject9
     */
    updateColumn(board_id: number, column_id: number, InlineObject9?: InlineObject9, options?: Configuration): Promise<RequestContext>;
}
export declare class ColumnsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createColumn
     * @throws ApiException if the response code was not in [200, 299]
     */
    createColumn(response: ResponseContext): Promise<InlineResponse20023>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteColumn
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteColumn(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getColumn
     * @throws ApiException if the response code was not in [200, 299]
     */
    getColumn(response: ResponseContext): Promise<InlineResponse20024>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getColumns
     * @throws ApiException if the response code was not in [200, 299]
     */
    getColumns(response: ResponseContext): Promise<InlineResponse20022>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateColumn
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateColumn(response: ResponseContext): Promise<InlineResponse20024>;
}
/**
 * no description
 */
export declare class CompanyAddonTrialsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a possible addon trial status
     * Get a possible addon trial status
     * @param feature_id A feature id.
     */
    getAddonTrial(feature_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all possible addon trial statuses
     * Get a list of all possible addon trial statuses
     */
    getAddonsTrials(options?: Configuration): Promise<RequestContext>;
    /**
     * Start an addon trial
     * Start an addon trial
     * @param feature_id A feature id.
     */
    putAddonTrial(feature_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CompanyAddonTrialsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getAddonTrial
     * @throws ApiException if the response code was not in [200, 299]
     */
    getAddonTrial(response: ResponseContext): Promise<InlineResponse2002>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getAddonsTrials
     * @throws ApiException if the response code was not in [200, 299]
     */
    getAddonsTrials(response: ResponseContext): Promise<InlineResponse2001>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to putAddonTrial
     * @throws ApiException if the response code was not in [200, 299]
     */
    putAddonTrial(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CompanyAddonsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of all possible addon
     * Get a list of all possible addons
     */
    getAddons(options?: Configuration): Promise<RequestContext>;
}
export declare class CompanyAddonsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getAddons
     * @throws ApiException if the response code was not in [200, 299]
     */
    getAddons(response: ResponseContext): Promise<InlineResponse200>;
}
/**
 * no description
 */
export declare class CompanyPlanTrialsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a possible plan trial status
     * Get a possible plan trial status
     * @param plan_id A plan id.
     */
    getPlanTrial(plan_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all possible plan trial statuses
     * Get a list of all possible plan trial statuses
     */
    getPlansTrials(options?: Configuration): Promise<RequestContext>;
    /**
     * Start a plan trial
     * Start a plan trial
     * @param plan_id A plan id.
     */
    putPlanTrial(plan_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CompanyPlanTrialsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPlanTrial
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPlanTrial(response: ResponseContext): Promise<InlineResponse200162>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPlansTrials
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPlansTrials(response: ResponseContext): Promise<InlineResponse200161>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to putPlanTrial
     * @throws ApiException if the response code was not in [200, 299]
     */
    putPlanTrial(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CompanyPlansApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of all possible plan statuses
     * Get a list of all possible plan statuses
     */
    getPlans(options?: Configuration): Promise<RequestContext>;
}
export declare class CompanyPlansApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPlans
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPlans(response: ResponseContext): Promise<InlineResponse200160>;
}
/**
 * no description
 */
export declare class CompanySettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the details of a company setting and its value.
     * Get the details of a company setting and its value
     * @param setting_name A setting name.
     */
    getCompanySetting(setting_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all company settings and their values.
     * Get a list of all company settings and their values
     */
    getCompanySettings(options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the value of a company setting.
     * Remove the value of a company setting
     * @param setting_name A setting name.
     */
    removeCompanySetting(setting_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class CompanySettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCompanySetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCompanySetting(response: ResponseContext): Promise<InlineResponse20040>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCompanySettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCompanySettings(response: ResponseContext): Promise<InlineResponse20039>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeCompanySetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeCompanySetting(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class CustomFieldAllowedValuesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new allowed value.
     * Create an allowed value
     * @param field_id A custom field id.
     * @param InlineObject50
     */
    createCustomFieldAllowedValue(field_id: number, InlineObject50?: InlineObject50, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete an allowed value.
     * Delete an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param replace_with_value_id The id of a value with which to replace the one to be deleted on the cards using it.
     */
    deleteCustomFieldAllowedValue(field_id: number, value_id: number, replace_with_value_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single allowed value.
     * Get the details of a single allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCustomFieldAllowedValue(field_id: number, value_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown.
     * Get a list of the allowed values of a custom field of type dropdown
     * @param field_id A custom field id.
     */
    getCustomFieldAllowedValues(field_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update an allowed value.
     * Update an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject51
     */
    updateCustomFieldAllowedValue(field_id: number, value_id: number, InlineObject51?: InlineObject51, options?: Configuration): Promise<RequestContext>;
}
export declare class CustomFieldAllowedValuesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse200132>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCustomFieldAllowedValue(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse200132>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCustomFieldAllowedValues
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCustomFieldAllowedValues(response: ResponseContext): Promise<InlineResponse200131>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCustomFieldAllowedValue
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCustomFieldAllowedValue(response: ResponseContext): Promise<InlineResponse200132>;
}
/**
 * no description
 */
export declare class CustomFieldHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of custom field management history events.
     * Get a list of custom field management history events.
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistory(field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CustomFieldHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCustomFieldHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCustomFieldHistory(response: ResponseContext): Promise<InlineResponse200130>;
}
/**
 * no description
 */
export declare class CustomFieldsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Delete a custom field.
     * Delete a custom field
     * @param field_id A custom field id.
     */
    deleteCustomField(field_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class CustomFieldsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCustomField
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCustomField(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class DashboardPageTeamsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a team is added to a dashboard page.
     * Check if a team is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    checkDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the teams having access to a dashboard page.
     * Get a list of teams having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageTeams(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Deny a team access to a dashboard page.
     * Deny a team access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    removeDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DashboardPageTeamsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkDashboardPageTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkDashboardPageTeam(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboardPageTeams
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboardPageTeams(response: ResponseContext): Promise<InlineResponse200135>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeDashboardPageTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeDashboardPageTeam(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class DashboardPageUsersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a user is added to a dashboard page.
     * Check if a user is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    checkDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the users having access to a dashboard page.
     * Get a list of users having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageUsers(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Deny a user access to a dashboard page.
     * Deny a user access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    removeDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DashboardPageUsersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkDashboardPageUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkDashboardPageUser(response: ResponseContext): Promise<InlineResponse200137>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboardPageUsers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboardPageUsers(response: ResponseContext): Promise<InlineResponse200136>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeDashboardPageUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeDashboardPageUser(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class DashboardPageWorkspacesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a workspace available on a dashboard page.
     * Make a workspace available on a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    addDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a workspaces is added to a dashboard page.
     * Check if a workspace is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the workspaces added to a dashboard page.
     * Get a list of workspaces added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a workspace from a dashboard page.
     * Remove a workspace from a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    removeDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DashboardPageWorkspacesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addDashboardPageWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    addDashboardPageWorkspace(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkDashboardPageWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkDashboardPageWorkspace(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboardPageWorkspaces
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboardPageWorkspaces(response: ResponseContext): Promise<InlineResponse200138>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeDashboardPageWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeDashboardPageWorkspace(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class DashboardPagesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new dashboard page.
     * Create a dashboard page
     * @param InlineObject52
     */
    createDashBoardPage(InlineObject52?: InlineObject52, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a dashboard page.
     * Delete a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    deleteDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single dashboard page.
     * Get the details of a single dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of dashboard pages matching some optional criteria.
     * Get a list of dashboard pages
     * @param dashboard_page_ids A list of the dashboard page ids that you want to get.
     * @param fields A list of fields that you want in the response. The allowed fields are: dashboard_page_id and name.
     */
    getDashboardPages(dashboard_page_ids?: Array<number>, fields?: Array<'dashboard_page_id' | 'name'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a dashboard page.
     * Update a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject53
     */
    updateDashboardPage(dashboard_page_id: number, InlineObject53?: InlineObject53, options?: Configuration): Promise<RequestContext>;
}
export declare class DashboardPagesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createDashBoardPage
     * @throws ApiException if the response code was not in [200, 299]
     */
    createDashBoardPage(response: ResponseContext): Promise<InlineResponse200134>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteDashboardPage
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteDashboardPage(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboardPage
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboardPage(response: ResponseContext): Promise<InlineResponse200134>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboardPages
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboardPages(response: ResponseContext): Promise<InlineResponse200133>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateDashboardPage
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateDashboardPage(response: ResponseContext): Promise<InlineResponse200134>;
}
/**
 * no description
 */
export declare class DiscardReasonBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the discard reason is available.
     * Get a list of boards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonBoards(reason_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DiscardReasonBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReasonBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReasonBoards(response: ResponseContext): Promise<InlineResponse20011>;
}
/**
 * no description
 */
export declare class DiscardReasonCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards on which the discard reason is available.
     * Get a list of cards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonCards(reason_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DiscardReasonCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReasonCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReasonCards(response: ResponseContext): Promise<InlineResponse20012>;
}
/**
 * no description
 */
export declare class DiscardReasonHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of discard reasons creation, deletion, update events matching some optional criteria.
     * Get a list of discard reasons creation, deletion, update events
     * @param reason_ids A list of the discard reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the discard reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class DiscardReasonHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReasonsHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReasonsHistory(response: ResponseContext): Promise<InlineResponse200141>;
}
/**
 * no description
 */
export declare class DiscardReasonsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new discard reason.
     * Create a discard reason
     * @param InlineObject54
     */
    createDiscardReason(InlineObject54?: InlineObject54, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a discard reason.
     * Delete a discard reason
     * @param reason_id A discard reason id.
     * @param replace_with_reason_id The id of a discard reason with which to discard the cards which are currently discarded with the discard reason which is about to be deleted.
     */
    deleteDiscardReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single discard reason.
     * Get the details of a single discard reason
     * @param reason_id A discard reason id.
     */
    getDiscardReason(reason_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of discard reasons matching some optional criteria.
     * Get a list of discard reasons
     * @param reason_ids A list of the discard reason ids that you want to get.
     * @param label Find a discard reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled discard reasons. When set to 0 you will only get disabled discard reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, label, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids and card_count.
     */
    getDiscardReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'label' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a discard reason.
     * Update a discard reason
     * @param reason_id A discard reason id.
     * @param InlineObject55
     */
    updateDiscardReason(reason_id: number, InlineObject55?: InlineObject55, options?: Configuration): Promise<RequestContext>;
}
export declare class DiscardReasonsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    createDiscardReason(response: ResponseContext): Promise<InlineResponse200140>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteDiscardReason(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReason(response: ResponseContext): Promise<InlineResponse200140>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReasons
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReasons(response: ResponseContext): Promise<InlineResponse200139>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateDiscardReason
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateDiscardReason(response: ResponseContext): Promise<InlineResponse200140>;
}
/**
 * no description
 */
export declare class EmailIntegrationErrorsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of errors which occurred while emails were being processed
     * Get a list of errors from the email integration.
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrors(sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class EmailIntegrationErrorsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getEmailIntegrationErrors
     * @throws ApiException if the response code was not in [200, 299]
     */
    getEmailIntegrationErrors(response: ResponseContext): Promise<InlineResponse200142>;
}
/**
 * no description
 */
export declare class EmailIntegrationHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the emails received by the email integration and their status.
     * Get a list of the emails received by the email integration and their status.
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistory(sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class EmailIntegrationHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getEmailIntegrationHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getEmailIntegrationHistory(response: ResponseContext): Promise<InlineResponse200143>;
}
/**
 * no description
 */
export declare class ExportsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v2 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistoryExports(format?: string, user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of block reasons management history events.
     * Export a list of block reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of business rule executions matching some optional criteria.
     * Export a list of business rule executions
     * @param format The allowed values are excel and json
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistoryExport(format?: string, business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of card templates management history events.
     * Export a list of card templates management history events.
     * @param format The allowed values are excel and json
     * @param template_ids A list of the card template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistoryExports(format?: string, template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board' | 'template_structure_updated'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of card types management history events.
     * Export a list of card types management history events.
     * @param format The allowed values are excel and json
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistoryExports(format?: string, type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of custom field management history events.
     * Export a list of custom field management history events.
     * @param format The allowed values are excel and json
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistoryExports(format?: string, field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of discard reasons management history events.
     * Export a list of discard reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of error logs from the email integration.
     * Export a list of error logs from the email integration.
     * @param format The allowed values are excel and json
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrorsExport(format?: string, sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of the emails received by the email integration and their status.
     * Export a list of the emails received by the email integration and their status.
     * @param format The allowed values are excel and json
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistoryExport(format?: string, sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of logged times management history events.
     * Export a list of logged times management history events.
     * @param format The allowed values are excel and json
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimesHistoryExports(format?: string, logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v1 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistoryExport(format?: string, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of stickers management history events.
     * Export a list of stickers management history events.
     * @param format The allowed values are excel and json
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistoryExports(format?: string, sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of tags management history events.
     * Export a list of tags management history events.
     * @param format The allowed values are excel and json
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistoryExports(format?: string, tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of teams management history events.
     * Export a list of teams management history events.
     * @param format The allowed values are excel and json
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistoryExports(format?: string, team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of user management history events.
     * Export a list of user management history events.
     * @param format The allowed values are excel and json
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistoryExport(format?: string, affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of users last activity.
     * Export a list of users last activity.
     * @param format The allowed values are excel and json
     * @param user_ids A list of user ids that performed an action.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     */
    getUsersLastActivityExport(format?: string, user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, options?: Configuration): Promise<RequestContext>;
    /**
     * Export a list of webhooks creation, deletion, update events matching some optional criteria.
     * Export a list of webhooks creation, deletion, update events
     * @param format The allowed values are excel and json
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistoryExport(format?: string, webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class ExportsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiRequestHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiRequestHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBlockReasonsHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBlockReasonsHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getBusinessRulesExecutionHistoryExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getBusinessRulesExecutionHistoryExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTemplatesHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTemplatesHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCardTypesHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCardTypesHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCustomFieldHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCustomFieldHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDiscardReasonsHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDiscardReasonsHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getEmailIntegrationErrorsExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getEmailIntegrationErrorsExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getEmailIntegrationHistoryExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getEmailIntegrationHistoryExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLoggedTimesHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLoggedTimesHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOldApiRequestHistoryExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOldApiRequestHistoryExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getStickersHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getStickersHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTagsHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTagsHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeamsHistoryExports
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeamsHistoryExports(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUsersHistoryExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUsersHistoryExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUsersLastActivityExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUsersLastActivityExport(response: ResponseContext): Promise<JsonExport>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWebhooksHistoryExport
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWebhooksHistoryExport(response: ResponseContext): Promise<JsonExport>;
}
/**
 * no description
 */
export declare class GlobalUserPrivilegesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a user has a global privilege.
     * Check if a user has a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    getGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all possible global privileges and whether the user has them.
     * Get a list of all possible global privileges and whether the user has them
     * @param user_id A user id.
     */
    getGlobalUserPrivileges(user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a global privilege from the user.
     * Remove a global privilege from the user
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    removeGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Give the user a global privilege.
     * Give the user a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    setGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class GlobalUserPrivilegesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getGlobalUserPrivilege
     * @throws ApiException if the response code was not in [200, 299]
     */
    getGlobalUserPrivilege(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getGlobalUserPrivileges
     * @throws ApiException if the response code was not in [200, 299]
     */
    getGlobalUserPrivileges(response: ResponseContext): Promise<InlineResponse200183>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeGlobalUserPrivilege
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeGlobalUserPrivilege(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setGlobalUserPrivilege
     * @throws ApiException if the response code was not in [200, 299]
     */
    setGlobalUserPrivilege(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class LaneSectionLimitsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the lane section limits for a specified board.
     * Get a list of lane section limits
     * @param board_id A board id.
     */
    getLaneSectionLimits(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Set a lane section limit.
     * Set a lane section limit
     * @param board_id A board id.
     * @param InlineObject12
     */
    setLaneSectionLimit(board_id: number, InlineObject12?: InlineObject12, options?: Configuration): Promise<RequestContext>;
}
export declare class LaneSectionLimitsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLaneSectionLimits
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLaneSectionLimits(response: ResponseContext): Promise<InlineResponse20031>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setLaneSectionLimit
     * @throws ApiException if the response code was not in [200, 299]
     */
    setLaneSectionLimit(response: ResponseContext): Promise<InlineResponse20032>;
}
/**
 * no description
 */
export declare class LanesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new lane.
     * Create a lane
     * @param board_id A board id.
     * @param InlineObject13
     */
    createLane(board_id: number, InlineObject13?: InlineObject13, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a lane.
     * Delete a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param move_cards_to_lane_id The id of a lane to which to move the cards from the deleted lane, if there are any.
     * @param move_metrics_to_lane_id The id of a lane to which to move the cycle time data associated with the deleted lane, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteLane(board_id: number, lane_id: number, move_cards_to_lane_id?: number, move_metrics_to_lane_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single lane.
     * Get the details of a single lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     */
    getLane(board_id: number, lane_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the lanes in a specified board.
     * Get a list of lanes
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: lane_id, workflow, parent_lane_id, position, name, description and color.
     */
    getLanes(board_id: number, fields?: Array<'lane_id' | 'workflow_id' | 'parent_lane_id' | 'position' | 'name' | 'description' | 'color'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a lane.
     * Update a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param InlineObject14
     */
    updateLane(board_id: number, lane_id: number, InlineObject14?: InlineObject14, options?: Configuration): Promise<RequestContext>;
}
export declare class LanesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createLane
     * @throws ApiException if the response code was not in [200, 299]
     */
    createLane(response: ResponseContext): Promise<InlineResponse20034>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteLane
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteLane(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLane
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLane(response: ResponseContext): Promise<InlineResponse20035>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLanes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLanes(response: ResponseContext): Promise<InlineResponse20033>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateLane
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateLane(response: ResponseContext): Promise<InlineResponse20035>;
}
/**
 * no description
 */
export declare class LinkedCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards that are linked to a given card ordered by position.
     * Get a list of linked cards
     * @param card_id A card id.
     */
    getLinkedCards(card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class LinkedCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLinkedCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLinkedCards(response: ResponseContext): Promise<InlineResponse200108>;
}
/**
 * no description
 */
export declare class LoggedTimeApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a logged time to a card
     * Add a logged time to a card
     * @param InlineObject56
     */
    addCardLoggedTime(InlineObject56?: InlineObject56, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single logged time.
     * Get the details of a single logged time
     * @param logged_time_id A logged time id.
     */
    getLoggedTime(logged_time_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the logged times added to card or cards. The logged times are listed in the order in which they were added.
     * Get a list of logged times
     * @param card_ids Filter logged time by cards ids or id.
     * @param user_ids Filter logged time by user ids or id.
     * @param include_logged_time_for_subtasks When set to 1 you will the get logged time for all tasks and subtasks.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param logged_from The first date and time for which you want results.
     * @param logged_to The last date and time for which you want results.
     * @param logged_from_date The first date for which you want results.
     * @param logged_to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     */
    getLoggedTimes(card_ids?: Array<number>, user_ids?: Array<number>, include_logged_time_for_subtasks?: number, from_date?: Date, to_date?: Date, logged_from?: Date, logged_to?: Date, logged_from_date?: Date, logged_to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a logged time from a card.
     * Remove a logged time from a card
     * @param logged_time_id A logged time id.
     */
    removeLoggedTime(logged_time_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update card logged time.
     * Update card logged time.
     * @param logged_time_id A logged time id.
     * @param InlineObject57
     */
    updateLoggedTime(logged_time_id: number, InlineObject57?: InlineObject57, options?: Configuration): Promise<RequestContext>;
}
export declare class LoggedTimeApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addCardLoggedTime
     * @throws ApiException if the response code was not in [200, 299]
     */
    addCardLoggedTime(response: ResponseContext): Promise<InlineResponse200145>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLoggedTime
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLoggedTime(response: ResponseContext): Promise<InlineResponse200145>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLoggedTimes
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLoggedTimes(response: ResponseContext): Promise<InlineResponse200144>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeLoggedTime
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeLoggedTime(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateLoggedTime
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateLoggedTime(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class LoggedTimeHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of logged times creation, deletion, update events matching some optional criteria.
     * Get a list of logged times creation, deletion, update events
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimeHistory(logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class LoggedTimeHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getLoggedTimeHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getLoggedTimeHistory(response: ResponseContext): Promise<InlineResponse200146>;
}
/**
 * no description
 */
export declare class ManagedWorkspacesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the workspaces in which the user is a workspace manager.
     * Get a list of managed workspaces
     * @param user_id A user id.
     */
    getManagedWorkspace(user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class ManagedWorkspacesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getManagedWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    getManagedWorkspace(response: ResponseContext): Promise<InlineResponse200186>;
}
/**
 * no description
 */
export declare class MeApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the data about the active user.
     * Get the data about the active user
     */
    getActiveUserData(options?: Configuration): Promise<RequestContext>;
}
export declare class MeApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getActiveUserData
     * @throws ApiException if the response code was not in [200, 299]
     */
    getActiveUserData(response: ResponseContext): Promise<InlineResponse200147>;
}
/**
 * no description
 */
export declare class MergedAreasApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new merged area.
     * Create a merged area
     * @param board_id A board id.
     * @param InlineObject15
     */
    createMergedArea(board_id: number, InlineObject15?: InlineObject15, options?: Configuration): Promise<RequestContext>;
    /**
     * Split the merged area into its individual cells.
     * Delete a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    deleteMergedArea(board_id: number, area_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single merged area.
     * Get the details of a single merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    getMergedArea(board_id: number, area_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the merged areas in a specified board.
     * Get a list of merged areas
     * @param board_id A board id.
     */
    getMergedAreas(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a merged area.
     * Update a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     * @param InlineObject16
     */
    updateMergedArea(board_id: number, area_id: number, InlineObject16?: InlineObject16, options?: Configuration): Promise<RequestContext>;
}
export declare class MergedAreasApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createMergedArea
     * @throws ApiException if the response code was not in [200, 299]
     */
    createMergedArea(response: ResponseContext): Promise<InlineResponse20037>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteMergedArea
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteMergedArea(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMergedArea
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMergedArea(response: ResponseContext): Promise<InlineResponse20038>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMergedAreas
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMergedAreas(response: ResponseContext): Promise<InlineResponse20036>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMergedArea
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMergedArea(response: ResponseContext): Promise<InlineResponse20038>;
}
/**
 * no description
 */
export declare class MyApiKeyGenerateApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Generate an api key.
     * Generate an api key
     */
    generateApiKey(options?: Configuration): Promise<RequestContext>;
}
export declare class MyApiKeyGenerateApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to generateApiKey
     * @throws ApiException if the response code was not in [200, 299]
     */
    generateApiKey(response: ResponseContext): Promise<InlineResponse200148>;
}
/**
 * no description
 */
export declare class MyAppSettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the details of an app setting and the value you have set for it.
     * Get the details of an app setting and the value you have set for it
     * @param setting_name A setting name.
     */
    getMyAppSetting(setting_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all app settings and the values you have selected.
     * Get a list of all app settings and the values you have selected
     */
    getMyAppSettings(options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the value of an app setting.
     * Remove the value of an app setting
     * @param setting_name A setting name.
     */
    removeMyAppSetting(setting_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class MyAppSettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyAppSetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyAppSetting(response: ResponseContext): Promise<InlineResponse20040>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyAppSettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyAppSettings(response: ResponseContext): Promise<InlineResponse20039>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeMyAppSetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeMyAppSetting(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class MyBoardSettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the details of an board setting and the value you have set for it.
     * Get the details of an board setting and the value you have set for it
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    getMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all board settings and the values you have selected.
     * Get a list of all board settings and the values you have selected
     * @param board_id A board id.
     */
    getMyBoardSettings(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the value of an board setting.
     * Remove the value of an board setting
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    removeMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class MyBoardSettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyBoardSetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyBoardSetting(response: ResponseContext): Promise<InlineResponse20040>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyBoardSettings
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyBoardSettings(response: ResponseContext): Promise<InlineResponse20039>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeMyBoardSetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeMyBoardSetting(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class MyBoardsSettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Set the values of board settings for a list of boards.
     * Set the values of board settings for a list of boards
     * @param InlineObject58
     */
    setMySettingsBoards(InlineObject58?: InlineObject58, options?: Configuration): Promise<RequestContext>;
}
export declare class MyBoardsSettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setMySettingsBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    setMySettingsBoards(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class MyDashboardPageSettingsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Unset a single setting added to one of mine dashboard pages.
     * Unset a single setting added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param setting_name A setting name.
     */
    unsetMyDashboardPageSingleSetting(dashboard_page_id: number, setting_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class MyDashboardPageSettingsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to unsetMyDashboardPageSingleSetting
     * @throws ApiException if the response code was not in [200, 299]
     */
    unsetMyDashboardPageSingleSetting(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class MyDashboardPageWidgetsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a widget is added to one of mine dashboard pages.
     * Check if a widget is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     */
    checkMyDashboardPageWidget(dashboard_page_id: number, widget_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of widgets added to one of mine dashboard pages.
     * Get a list of widgets added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWidgets(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update position of a single widget on one of mine dashboard pages.
     * Update position of a single widget on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     * @param InlineObject60
     */
    updateMyDashboardPageWidgetPosition(dashboard_page_id: number, widget_id: number, InlineObject60?: InlineObject60, options?: Configuration): Promise<RequestContext>;
}
export declare class MyDashboardPageWidgetsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkMyDashboardPageWidget
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkMyDashboardPageWidget(response: ResponseContext): Promise<InlineResponse200152>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyDashboardPageWidgets
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyDashboardPageWidgets(response: ResponseContext): Promise<InlineResponse200151>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMyDashboardPageWidgetPosition
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMyDashboardPageWidgetPosition(response: ResponseContext): Promise<InlineResponse200150>;
}
/**
 * no description
 */
export declare class MyDashboardPageWorkspacesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a workspace is added to one of mine dashboard pages.
     * Check if a workspace is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkMyDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of workspaces added to one of mine dashboard pages.
     * Get a list of workspaces added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update position of a single workspace on one of mine dashboard pages.
     * Update position of a single workspace on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     * @param InlineObject61
     */
    updateMyDashboardPageWorkspacePosition(dashboard_page_id: number, workspace_id: number, InlineObject61?: InlineObject61, options?: Configuration): Promise<RequestContext>;
}
export declare class MyDashboardPageWorkspacesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkMyDashboardPageWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkMyDashboardPageWorkspace(response: ResponseContext): Promise<InlineResponse200154>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyDashboardPageWorkspaces
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyDashboardPageWorkspaces(response: ResponseContext): Promise<InlineResponse200153>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMyDashboardPageWorkspacePosition
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMyDashboardPageWorkspacePosition(response: ResponseContext): Promise<InlineResponse200150>;
}
/**
 * no description
 */
export declare class MyDashboardPagesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the details of one of mine dashboard pages.
     * Get the details of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of my dashboard pages.
     * Get a list of my dashboard pages
     */
    getMyDashboardPages(options?: Configuration): Promise<RequestContext>;
    /**
     * Update position of one of mine dashboard pages.
     * Update position of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject59
     */
    updateMyDashboardPagePosition(dashboard_page_id: number, InlineObject59?: InlineObject59, options?: Configuration): Promise<RequestContext>;
}
export declare class MyDashboardPagesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyDashboardPage
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyDashboardPage(response: ResponseContext): Promise<InlineResponse200150>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMyDashboardPages
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMyDashboardPages(response: ResponseContext): Promise<InlineResponse200149>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMyDashboardPagePosition
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMyDashboardPagePosition(response: ResponseContext): Promise<InlineResponse200150>;
}
/**
 * no description
 */
export declare class MyFavoriteBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a board to the list of your favorite boards or change its position within the list.
     * Add a board to your favorite
     * @param board_id A board id.
     * @param InlineObject62
     */
    addFavoriteBoard(board_id: number, InlineObject62?: InlineObject62, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a board is one of your favorite boards.
     * Check if a board is one of your favorite
     * @param board_id A board id.
     */
    checkFavoriteBoard(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of your favorite boards.
     * Get a list of your favorite boards
     */
    getFavoriteBoards(options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a board from the list of your favorite boards.
     * Remove a board from your favorite
     * @param board_id A board id.
     */
    removeFavoriteBoard(board_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class MyFavoriteBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addFavoriteBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addFavoriteBoard(response: ResponseContext): Promise<InlineResponse200156>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkFavoriteBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkFavoriteBoard(response: ResponseContext): Promise<InlineResponse200155>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getFavoriteBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getFavoriteBoards(response: ResponseContext): Promise<InlineResponse20011>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeFavoriteBoard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeFavoriteBoard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class OldApiLimitsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the old api request limits.
     * Get the hourly limits for the old api requests
     */
    getOldApiLimits(options?: Configuration): Promise<RequestContext>;
}
export declare class OldApiLimitsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOldApiLimits
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOldApiLimits(response: ResponseContext): Promise<InlineResponse200157>;
}
/**
 * no description
 */
export declare class OldApiRequestHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistory(user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of old api requests aggregated by user matching some optional criteria.
     * Get a list of old api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option regarding the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getOldApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Promise<RequestContext>;
}
export declare class OldApiRequestHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOldApiRequestHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOldApiRequestHistory(response: ResponseContext): Promise<InlineResponse200158>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOldApiRequestHistoryAggregated
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOldApiRequestHistoryAggregated(response: ResponseContext): Promise<InlineResponse200159>;
}
/**
 * no description
 */
export declare class ParentCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a parent of a given card.
     * Make a card a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject44
     */
    addParentCard(card_id: number, parent_card_id: number, InlineObject44?: InlineObject44, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a parent of a given card and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkParentCard(card_id: number, parent_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the full list of parent cards of a given card and the parent cards of those cards too.
     * Get a list of parent cards including their parent cards too
     * @param card_id A card id.
     */
    getParentCardGraph(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the parent cards of a given card.
     * Get a list of parent cards
     * @param card_id A card id.
     */
    getParentCards(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeParentCard(card_id: number, parent_card_id: number, exceeding_reason?: string, options?: Configuration): Promise<RequestContext>;
}
export declare class ParentCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addParentCard(response: ResponseContext): Promise<void | InlineResponse20073>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkParentCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getParentCardGraph
     * @throws ApiException if the response code was not in [200, 299]
     */
    getParentCardGraph(response: ResponseContext): Promise<InlineResponse20093>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getParentCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getParentCards(response: ResponseContext): Promise<InlineResponse200116>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeParentCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeParentCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class PredecessorCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a predecessor of a given card.
     * Make a card a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject45
     */
    addPredecessorCard(card_id: number, predecessor_card_id: number, InlineObject45?: InlineObject45, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a predecessor of a given card and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkPredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the full list of predecessor cards of a given card and the predecessor cards of those cards too.
     * Get a list of predecessor cards including their predecessor cards too
     * @param card_id A card id.
     */
    getPredecessorCardGraph(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the predecessor cards of a given card.
     * Get a list of predecessor cards
     * @param card_id A card id.
     */
    getPredecessorCards(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removePredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class PredecessorCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addPredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addPredecessorCard(response: ResponseContext): Promise<void | InlineResponse20075>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkPredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkPredecessorCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPredecessorCardGraph
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPredecessorCardGraph(response: ResponseContext): Promise<InlineResponse200117>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPredecessorCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPredecessorCards(response: ResponseContext): Promise<InlineResponse200118>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removePredecessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removePredecessorCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class RelatedWorkflowsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a related workflow on a board.
     * Add a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject17
     */
    addBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject17?: InlineObject17, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a board is related to another board and workflow.
     * Check if a board is related to another board and workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    checkBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of boards and workflows related to a specified board.
     * Get a list of related workflows
     * @param board_id A board id.
     */
    getRelatedBoardsWorlflows(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a related board workflow.
     * Remove a related board workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    removeBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a related workflow on a board.
     * Update a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject18
     */
    updateBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject18?: InlineObject18, options?: Configuration): Promise<RequestContext>;
}
export declare class RelatedWorkflowsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addBoardRelatedWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    addBoardRelatedWorkflow(response: ResponseContext): Promise<InlineResponse20042>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkBoardRelatedWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkBoardRelatedWorkflow(response: ResponseContext): Promise<InlineResponse20042>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRelatedBoardsWorlflows
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRelatedBoardsWorlflows(response: ResponseContext): Promise<InlineResponse20041>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeBoardRelatedWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeBoardRelatedWorkflow(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateBoardRelatedWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateBoardRelatedWorkflow(response: ResponseContext): Promise<InlineResponse20042>;
}
/**
 * no description
 */
export declare class RelativeCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a relative of a given card.
     * Make a card a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject46
     */
    addRelatedCard(card_id: number, related_card_id: number, InlineObject46?: InlineObject46, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a relative of a given card and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the cards related to a given card.
     * Get a list of related cards
     * @param card_id A card id.
     */
    getRelatedCards(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class RelativeCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addRelatedCard(response: ResponseContext): Promise<void | InlineResponse20077>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkRelatedCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRelatedCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRelatedCards(response: ResponseContext): Promise<InlineResponse200119>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeRelatedCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeRelatedCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class RolePermissionsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if a role has a permission.
     * Check if a role has a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    getRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of all possible role permissions and whether the role has them.
     * Get a list of all possible role permissions and whether the role has them
     * @param role_id A role id.
     */
    getRolePermissions(role_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a permission from the role.
     * Remove a permission from the role
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    removeRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<RequestContext>;
    /**
     * Give the role a permission.
     * Give the role a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    setRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<RequestContext>;
}
export declare class RolePermissionsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRolePermission
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRolePermission(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRolePermissions
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRolePermissions(response: ResponseContext): Promise<InlineResponse200166>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeRolePermission
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeRolePermission(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setRolePermission
     * @throws ApiException if the response code was not in [200, 299]
     */
    setRolePermission(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class RolesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new role.
     * Create a role
     * @param InlineObject63
     */
    createRole(InlineObject63?: InlineObject63, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a role.
     * Delete a role
     * @param role_id A role id.
     * @param replace_with_role_id The id of a role which will be given to the users which currently have the role which is about to be deleted.
     */
    deleteRole(role_id: number, replace_with_role_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single role.
     * Get the details of a single role
     * @param role_id A role id.
     */
    getRole(role_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of roles matching some optional criteria.
     * Get a list of roles
     * @param role_ids A list of the role ids that you want to get.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is permissions.
     */
    getRoles(role_ids?: Array<number>, expand?: Array<string>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a role.
     * Update a role
     * @param role_id A role id.
     * @param InlineObject64
     */
    updateRole(role_id: number, InlineObject64?: InlineObject64, options?: Configuration): Promise<RequestContext>;
}
export declare class RolesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    createRole(response: ResponseContext): Promise<InlineResponse200164>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteRole(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRole(response: ResponseContext): Promise<InlineResponse200165>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRoles
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRoles(response: ResponseContext): Promise<InlineResponse200163>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateRole
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateRole(response: ResponseContext): Promise<InlineResponse200165>;
}
/**
 * no description
 */
export declare class StickerBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the sticker is available.
     * Get a list of boards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerBoards(sticker_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class StickerBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getStickerBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getStickerBoards(response: ResponseContext): Promise<InlineResponse20011>;
}
/**
 * no description
 */
export declare class StickerCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards on which the sticker is available.
     * Get a list of cards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerCards(sticker_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class StickerCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getStickerCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getStickerCards(response: ResponseContext): Promise<InlineResponse20012>;
}
/**
 * no description
 */
export declare class StickerHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of stickers creation, deletion, update events matching some optional criteria.
     * Get a list of stickers creation, deletion, update events
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistory(sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class StickerHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getStickersHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getStickersHistory(response: ResponseContext): Promise<InlineResponse200169>;
}
/**
 * no description
 */
export declare class StickersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new sticker.
     * Create a sticker
     * @param InlineObject65
     */
    createSticker(InlineObject65?: InlineObject65, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a sticker.
     * Delete a sticker
     * @param sticker_id A sticker id.
     * @param replace_with_sticker_id The id of a sticker with which to replace the one to be deleted on the cards using it.
     */
    deleteSticker(sticker_id: number, replace_with_sticker_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single sticker.
     * Get the details of a single sticker
     * @param sticker_id A sticker id.
     */
    getSticker(sticker_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of stickers matching some optional criteria.
     * Get a list of stickers
     * @param sticker_ids A list of the sticker ids that you want to get.
     * @param label Find a sticker by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled stickers. When set to 0 you will only get disabled stickers.
     * @param fields A list of fields that you want in the response. The allowed fields are: sticker_id, icon_type, icon_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getStickers(sticker_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'sticker_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a sticker.
     * Update a sticker
     * @param sticker_id A sticker id.
     * @param InlineObject66
     */
    updateSticker(sticker_id: number, InlineObject66?: InlineObject66, options?: Configuration): Promise<RequestContext>;
}
export declare class StickersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    createSticker(response: ResponseContext): Promise<InlineResponse200168>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteSticker(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    getSticker(response: ResponseContext): Promise<InlineResponse200168>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getStickers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getStickers(response: ResponseContext): Promise<InlineResponse200167>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateSticker
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateSticker(response: ResponseContext): Promise<InlineResponse200168>;
}
/**
 * no description
 */
export declare class SuccessorCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a card a successor of a given card.
     * Make a card a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject48
     */
    addSuccessorCard(card_id: number, successor_card_id: number, InlineObject48?: InlineObject48, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a card is a successor of a given card and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the full list of successor cards of a given card and the successor cards of those cards too.
     * Get a list of successor cards including their successor cards too
     * @param card_id A card id.
     */
    getSuccessorCardGraph(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the successor cards of a given card.
     * Get a list of successor cards
     * @param card_id A card id.
     */
    getSuccessorCards(card_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class SuccessorCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    addSuccessorCard(response: ResponseContext): Promise<InlineResponse20083 | void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkSuccessorCard(response: ResponseContext): Promise<InlineResponse20064>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getSuccessorCardGraph
     * @throws ApiException if the response code was not in [200, 299]
     */
    getSuccessorCardGraph(response: ResponseContext): Promise<InlineResponse200117>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getSuccessorCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getSuccessorCards(response: ResponseContext): Promise<InlineResponse200126>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeSuccessorCard
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeSuccessorCard(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class TagBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the tag is available.
     * Get a list of boards where the tag is available
     * @param tag_id A tag id.
     */
    getTagBoards(tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a tag available or unavailable on several boards.
     * Make a tag available or unavailable on several boards
     * @param tag_id A tag id.
     * @param InlineObject69
     */
    updateTagBoards(tag_id: number, InlineObject69?: InlineObject69, options?: Configuration): Promise<RequestContext>;
}
export declare class TagBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTagBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTagBoards(response: ResponseContext): Promise<InlineResponse20011>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateTagBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateTagBoards(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class TagCardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the cards on which the tag is available.
     * Get a list of cards where the tag is available
     * @param tag_id A tag id.
     */
    getTagCards(tag_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TagCardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTagCards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTagCards(response: ResponseContext): Promise<InlineResponse20012>;
}
/**
 * no description
 */
export declare class TagHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of tags creation, deletion, update events matching some optional criteria.
     * Get a list of tags creation, deletion, update events
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistory(tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TagHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTagsHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTagsHistory(response: ResponseContext): Promise<InlineResponse200172>;
}
/**
 * no description
 */
export declare class TagsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new tag.
     * Create a tag
     * @param InlineObject67
     */
    createTag(InlineObject67?: InlineObject67, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a tag.
     * Delete a tag
     * @param tag_id A tag id.
     * @param replace_with_tag_id The id of a tag with which to replace the one to be deleted on the cards using it.
     */
    deleteTag(tag_id: number, replace_with_tag_id?: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single tag.
     * Get the details of a single tag
     * @param tag_id A tag id.
     */
    getTag(tag_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of tags matching some optional criteria.
     * Get a list of tags
     * @param tag_ids A list of the tag ids that you want to get.
     * @param label Find a tag by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled tags. When set to 0 you will only get disabled tags.
     * @param fields A list of fields that you want in the response. The allowed fields are: tag_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getTags(tag_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'tag_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a tag.
     * Update a tag
     * @param tag_id A tag id.
     * @param InlineObject68
     */
    updateTag(tag_id: number, InlineObject68?: InlineObject68, options?: Configuration): Promise<RequestContext>;
}
export declare class TagsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    createTag(response: ResponseContext): Promise<InlineResponse200171>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteTag(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTag(response: ResponseContext): Promise<InlineResponse200171>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTags
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTags(response: ResponseContext): Promise<InlineResponse200170>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateTag
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateTag(response: ResponseContext): Promise<InlineResponse200171>;
}
/**
 * no description
 */
export declare class TeamBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards on which the team is available.
     * Get a list of boards where the team is available
     * @param team_id A team id.
     */
    getTeamBoards(team_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TeamBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeamBoards
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeamBoards(response: ResponseContext): Promise<InlineResponse20011>;
}
/**
 * no description
 */
export declare class TeamHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of teams creation, deletion, update events matching some optional criteria.
     * Get a list of teams creation, deletion, update events
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistory(team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TeamHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeamsHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeamsHistory(response: ResponseContext): Promise<InlineResponse200175>;
}
/**
 * no description
 */
export declare class TeamManagersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Set a user as a manager of the team.
     * Set a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is added as a team manager to a team.
     * Check if a user is added as a team manager to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of users who can manage the team.
     * Get a list of users who can manage the team
     * @param team_id A team id.
     */
    getTeamManagers(team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user as a manager of the team.
     * Remove a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TeamManagersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addTeamManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    addTeamManager(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkTeamManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkTeamManager(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeamManagers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeamManagers(response: ResponseContext): Promise<InlineResponse200176>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeTeamManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeTeamManager(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class TeamUsersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Add a user to the team.
     * Add a user to the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is added to a team.
     * Check if a user is added to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of users added to the team.
     * Get a list of users added to the team
     * @param team_id A team id.
     */
    getTeamUsers(team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Remove a user from the team.
     * Remove a user from the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class TeamUsersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addTeamUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    addTeamUser(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkTeamUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkTeamUser(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeamUsers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeamUsers(response: ResponseContext): Promise<InlineResponse200177>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeTeamUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeTeamUser(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class TeamsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new team.
     * Create a team
     * @param InlineObject70
     */
    createTeam(InlineObject70?: InlineObject70, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a team.
     * Delete a team
     * @param team_id A team id.
     */
    deleteTeam(team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single team.
     * Get the details of a single team
     * @param team_id A team id.
     */
    getTeam(team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of teams matching some optional criteria.
     * Get a list of teams
     * @param team_ids A list of the team ids that you want to get.
     * @param name Find a team by its full name.
     * @param fields A list of fields that you want in the response. The allowed fields are: team_id, name, description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards and user_ids.
     */
    getTeams(team_ids?: Array<number>, name?: string, fields?: Array<'team_id' | 'name' | 'description'>, expand?: Array<'boards' | 'user_ids'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a team.
     * Update a team
     * @param team_id A team id.
     * @param InlineObject71
     */
    updateTeam(team_id: number, InlineObject71?: InlineObject71, options?: Configuration): Promise<RequestContext>;
}
export declare class TeamsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    createTeam(response: ResponseContext): Promise<InlineResponse200174>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteTeam(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeam(response: ResponseContext): Promise<InlineResponse200174>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getTeams
     * @throws ApiException if the response code was not in [200, 299]
     */
    getTeams(response: ResponseContext): Promise<InlineResponse200173>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateTeam(response: ResponseContext): Promise<InlineResponse200174>;
}
/**
 * no description
 */
export declare class UserActivityApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get the last activity of a user.
     * Get the last activity of a user
     * @param user_id A user id.
     */
    getUserLastActivity(user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class UserActivityApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUserLastActivity
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUserLastActivity(response: ResponseContext): Promise<InlineResponse200185>;
}
/**
 * no description
 */
export declare class UserBoardsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of the boards to which the user is assigned and with what role.
     * Get a list of boards the user is assigned to
     * @param user_id A user id.
     */
    getUserBoardRoles(user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class UserBoardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUserBoardRoles
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUserBoardRoles(response: ResponseContext): Promise<InlineResponse200182>;
}
/**
 * no description
 */
export declare class UserHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of user management history events.
     * Get a list of user management history events.
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistory(affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class UserHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUsersHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUsersHistory(response: ResponseContext): Promise<InlineResponse200179>;
}
/**
 * no description
 */
export declare class UserInvolvedBusinessRulesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of business rules where the user is involved.
     * Get a list of business rules where the user is involved
     * @param user_id A user id.
     */
    getUserInvolvedBusinessRules(user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class UserInvolvedBusinessRulesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUserInvolvedBusinessRules
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUserInvolvedBusinessRules(response: ResponseContext): Promise<InlineResponse200184>;
}
/**
 * no description
 */
export declare class UserTeamsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Check if the users is a member of the team.
     * Check if the users is a member of the team
     * @param user_id A user id.
     * @param team_id A team id.
     */
    checkUserTeam(user_id: number, team_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of teams where the user is a member.
     * Get a list of teams where the user is a member
     * @param user_id A user id.
     */
    getUserTeams(user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class UserTeamsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkUserTeam
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkUserTeam(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUserTeams
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUserTeams(response: ResponseContext): Promise<InlineResponse200187>;
}
/**
 * no description
 */
export declare class UsersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Delete a user.
     * Delete a user
     * @param user_id A user id.
     */
    deleteUser(user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single user.
     * Get the details of a single user
     * @param user_id A user id.
     */
    getUser(user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of users matching some optional criteria.
     * Get a list of users
     * @param user_ids A list of the user ids that you want to get.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: user_id, email, username, realname, avatar, is_enabled, is_confirmed, is_tfa_enabled and registration_date.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: invitation_status, global_privileges, board_roles, managed_workspaces and last_activity.
     */
    getUsers(user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, fields?: Array<'user_id' | 'email' | 'username' | 'realname' | 'avatar' | 'is_enabled' | 'is_confirmed' | 'is_tfa_enabled' | 'registration_date' | 'timezone' | 'language'>, expand?: Array<'invitation_status' | 'global_privileges' | 'board_roles' | 'managed_workspaces' | 'last_activity'>, options?: Configuration): Promise<RequestContext>;
    /**
     * Invite a new user.
     * Invite a user
     * @param InlineObject72
     */
    inviteUser(InlineObject72?: InlineObject72, options?: Configuration): Promise<RequestContext>;
    /**
     * Send a new invitation email to the user.
     * Resend an invitation
     * @param user_id A user id.
     */
    resendInvitation(user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a user.
     * Update a user
     * @param user_id A user id.
     * @param InlineObject73
     */
    updateUser(user_id: number, InlineObject73?: InlineObject73, options?: Configuration): Promise<RequestContext>;
}
export declare class UsersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteUser(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUser(response: ResponseContext): Promise<InlineResponse200181>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getUsers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getUsers(response: ResponseContext): Promise<InlineResponse200178>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to inviteUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    inviteUser(response: ResponseContext): Promise<InlineResponse200180>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to resendInvitation
     * @throws ApiException if the response code was not in [200, 299]
     */
    resendInvitation(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateUser
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateUser(response: ResponseContext): Promise<InlineResponse200181>;
}
/**
 * no description
 */
export declare class WebhookHistoryApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Get a list of webhooks creation, deletion, update events matching some optional criteria.
     * Get a list of webhooks creation, deletion, update events
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistory(webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<RequestContext>;
}
export declare class WebhookHistoryApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWebhooksHistory
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWebhooksHistory(response: ResponseContext): Promise<InlineResponse200190>;
}
/**
 * no description
 */
export declare class WebhooksApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new webhook.
     * Create a webhook
     * @param InlineObject74
     */
    createWebhook(InlineObject74?: InlineObject74, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a webhook.
     * Delete a webhook
     * @param webhook_id A webhook id.
     */
    deleteWebhook(webhook_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single webhook.
     * Get the details of a single webhook
     * @param webhook_id A webhook id.
     */
    getWebhook(webhook_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the currently defined webhooks optionally filtered by board id.
     * Get all webhooks
     * @param board_ids A list of the board ids for which you want to get the webhooks.
     */
    getWebhooks(board_ids?: Array<number>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a webhook.
     * Update a webhook
     * @param webhook_id A webhook id.
     * @param InlineObject75
     */
    updateWebhook(webhook_id: number, InlineObject75?: InlineObject75, options?: Configuration): Promise<RequestContext>;
}
export declare class WebhooksApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createWebhook
     * @throws ApiException if the response code was not in [200, 299]
     */
    createWebhook(response: ResponseContext): Promise<InlineResponse200189>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteWebhook
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteWebhook(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWebhook
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWebhook(response: ResponseContext): Promise<InlineResponse200191>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWebhooks
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWebhooks(response: ResponseContext): Promise<InlineResponse200188>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateWebhook
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateWebhook(response: ResponseContext): Promise<InlineResponse200191>;
}
/**
 * no description
 */
export declare class WorkflowsApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Copy existing workflow.
     * Copy a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject25
     */
    copyWorkflow(board_id: number, workflow_id: number, InlineObject25?: InlineObject25, options?: Configuration): Promise<RequestContext>;
    /**
     * Create a new workflow
     * Create workflow
     * @param board_id A board id.
     * @param InlineObject23
     */
    createWorkflow(board_id: number, InlineObject23?: InlineObject23, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a workflow exists and get its details.
     * Get workflow details
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    getWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if board workflows exists and get their details.
     * Get workflow details
     * @param board_id A board id.
     */
    getWorkflows(board_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Update workflow`s properties
     * Update workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject24
     */
    updateWorkflow(board_id: number, workflow_id: number, InlineObject24?: InlineObject24, options?: Configuration): Promise<RequestContext>;
    /**
     * Delete a workflow.
     * Delete a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    workflowDelete(board_id: number, workflow_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class WorkflowsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to copyWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    copyWorkflow(response: ResponseContext): Promise<InlineResponse20054>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    createWorkflow(response: ResponseContext): Promise<InlineResponse20052>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkflow(response: ResponseContext): Promise<InlineResponse20053>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkflows
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkflows(response: ResponseContext): Promise<InlineResponse20052>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateWorkflow
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateWorkflow(response: ResponseContext): Promise<InlineResponse20053>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to workflowDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
    workflowDelete(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class WorkspaceManagersApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Make a user a workspace manager.
     * Make a user a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    addWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Check if a user is a workspace manager.
     * Check if a user is a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    checkWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of the workspace managers for a workspace.
     * Get a list of workspace managers
     * @param workspace_id A workspace id.
     */
    getWorkspaceManagers(workspace_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Make a user not a workspace manager.
     * Make a user not a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    removeWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<RequestContext>;
}
export declare class WorkspaceManagersApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to addWorkspaceManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    addWorkspaceManager(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to checkWorkspaceManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    checkWorkspaceManager(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkspaceManagers
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkspaceManagers(response: ResponseContext): Promise<InlineResponse200195>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to removeWorkspaceManager
     * @throws ApiException if the response code was not in [200, 299]
     */
    removeWorkspaceManager(response: ResponseContext): Promise<void>;
}
/**
 * no description
 */
export declare class WorkspacesApiRequestFactory extends BaseAPIRequestFactory {
    /**
     * Create a new workspace.
     * Create a workspace
     * @param InlineObject76
     */
    createWorkspace(InlineObject76?: InlineObject76, options?: Configuration): Promise<RequestContext>;
    /**
     * Get the details of a single workspace.
     * Get the details of a single workspace
     * @param workspace_id A workspace id.
     */
    getWorkspace(workspace_id: number, options?: Configuration): Promise<RequestContext>;
    /**
     * Get a list of workspaces matching some optional criteria.
     * Get a list of workspaces
     * @param workspace_ids A list of the workspace ids that you want to get.
     * @param type When set to 1 you will only get team workspaces. When set to 2 you will only get management workspaces.
     * @param is_archived When set to 0 you will only get non-archived workspaces. When set to 1 you will only get archived workspaces.
     * @param if_workspace_manager When set to 1 you will only get workspaces for which you are a workspace manager.
     * @param if_assigned_to_boards When set to 1 you will only get workspaces in which you are assigned to at least one board.
     * @param board_filter_is_archived When set to 0 or 1 and the optional expand parameter includes boards, you will only get non archived / archived boards respectively.
     * @param board_filter_if_assigned When set to 1 and the optional expand parameter includes boards, you will only get boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: workspace_id, is_archived and name.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is boards optionally followed by a list of fields inside square brackets. For boards the allowed fields are board_id, is_archived and name.
     */
    getWorkspaces(workspace_ids?: Array<number>, type?: 1 | 2, is_archived?: 0 | 1, if_workspace_manager?: 0 | 1, if_assigned_to_boards?: 0 | 1, board_filter_is_archived?: 0 | 1, board_filter_if_assigned?: 0 | 1, fields?: Array<'workspace_id' | 'type' | 'is_archived' | 'name'>, expand?: Array<string>, options?: Configuration): Promise<RequestContext>;
    /**
     * Update a workspace.
     * Update a workspace
     * @param workspace_id A workspace id.
     * @param InlineObject77
     */
    updateWorkspace(workspace_id: number, InlineObject77?: InlineObject77, options?: Configuration): Promise<RequestContext>;
}
export declare class WorkspacesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    createWorkspace(response: ResponseContext): Promise<InlineResponse200193>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkspace(response: ResponseContext): Promise<InlineResponse200194>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkspaces
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkspaces(response: ResponseContext): Promise<InlineResponse200192>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateWorkspace
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateWorkspace(response: ResponseContext): Promise<InlineResponse200194>;
}
export interface ApiLimitsApiGetApiLimitsRequest {
}
export declare class ObjectApiLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApiLimitsApiRequestFactory, responseProcessor?: ApiLimitsApiResponseProcessor);
    /**
     * Get a list of the api request limits.
     * Get the hourly and minutely limits for the api requests
     * @param param the request object
     */
    getApiLimits(param: ApiLimitsApiGetApiLimitsRequest, options?: Configuration): Promise<InlineResponse2003>;
}
export interface ApiRequestHistoryApiGetApiRequestHistoryRequest {
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    user_ids?: Array<number>;
    /**
     * A list of the methods that you have used while executing the request.
     * @type Array&lt;&#39;get&#39; | &#39;put&#39; | &#39;post&#39; | &#39;patch&#39; | &#39;delete&#39;&gt;
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>;
    /**
     * A list of the status codes that you have received when executing the request.
     * @type Array&lt;200 | 400 | 401 | 403 | 429 | 500 | 503&gt;
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ApiRequestHistoryApigetApiRequestHistory
     */
    per_page?: number;
}
export interface ApiRequestHistoryApiGetApiRequestHistoryAggregatedRequest {
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof ApiRequestHistoryApigetApiRequestHistoryAggregated
     */
    user_ids?: Array<number>;
    /**
     * An option for choosing the aggregation period.
     * @type &#39;day&#39; | &#39;hour&#39;
     * @memberof ApiRequestHistoryApigetApiRequestHistoryAggregated
     */
    aggregation_period?: 'day' | 'hour';
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistoryAggregated
     */
    to?: Date;
    /**
     * The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistoryAggregated
     */
    from_date?: Date;
    /**
     * The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     * @type Date
     * @memberof ApiRequestHistoryApigetApiRequestHistoryAggregated
     */
    to_date?: Date;
}
export declare class ObjectApiRequestHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApiRequestHistoryApiRequestFactory, responseProcessor?: ApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param param the request object
     */
    getApiRequestHistory(param: ApiRequestHistoryApiGetApiRequestHistoryRequest, options?: Configuration): Promise<InlineResponse2004>;
    /**
     * Get a list of api requests aggregated by user matching some optional criteria.
     * Get a list of api requests aggregated by user
     * @param param the request object
     */
    getApiRequestHistoryAggregated(param: ApiRequestHistoryApiGetApiRequestHistoryAggregatedRequest, options?: Configuration): Promise<InlineResponse2005>;
}
export interface ArchivedCardVersionsApiCreateArchiveCardVersionRequest {
    /**
     *
     * @type InlineObject
     * @memberof ArchivedCardVersionsApicreateArchiveCardVersion
     */
    InlineObject?: InlineObject;
}
export interface ArchivedCardVersionsApiDeleteArchiveCardVersionRequest {
    /**
     * A archived card version id.
     * @type number
     * @memberof ArchivedCardVersionsApideleteArchiveCardVersion
     */
    version_id: number;
}
export interface ArchivedCardVersionsApiGetArchiveCardVersionRequest {
    /**
     * A archived card version id.
     * @type number
     * @memberof ArchivedCardVersionsApigetArchiveCardVersion
     */
    version_id: number;
}
export interface ArchivedCardVersionsApiGetArchivedCardVersionsRequest {
}
export interface ArchivedCardVersionsApiUpdateArchiveCardVersionRequest {
    /**
     * A archived card version id.
     * @type number
     * @memberof ArchivedCardVersionsApiupdateArchiveCardVersion
     */
    version_id: number;
    /**
     *
     * @type InlineObject1
     * @memberof ArchivedCardVersionsApiupdateArchiveCardVersion
     */
    InlineObject1?: InlineObject1;
}
export declare class ObjectArchivedCardVersionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ArchivedCardVersionsApiRequestFactory, responseProcessor?: ArchivedCardVersionsApiResponseProcessor);
    /**
     * Create a new archived card version.
     * Create a archived card version
     * @param param the request object
     */
    createArchiveCardVersion(param: ArchivedCardVersionsApiCreateArchiveCardVersionRequest, options?: Configuration): Promise<InlineResponse2007>;
    /**
     * Delete a archived card version.
     * Delete a archived card version
     * @param param the request object
     */
    deleteArchiveCardVersion(param: ArchivedCardVersionsApiDeleteArchiveCardVersionRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single archived card version.
     * Get the details of a single archived card version
     * @param param the request object
     */
    getArchiveCardVersion(param: ArchivedCardVersionsApiGetArchiveCardVersionRequest, options?: Configuration): Promise<InlineResponse2007>;
    /**
     * Get a list of archived card versions.
     * Get a list of archived card versions
     * @param param the request object
     */
    getArchivedCardVersions(param: ArchivedCardVersionsApiGetArchivedCardVersionsRequest, options?: Configuration): Promise<InlineResponse2006>;
    /**
     * Update a archived card version.
     * Update a archived card version
     * @param param the request object
     */
    updateArchiveCardVersion(param: ArchivedCardVersionsApiUpdateArchiveCardVersionRequest, options?: Configuration): Promise<InlineResponse2007>;
}
export interface BlockReasonBoardsApiGetBlockReasonBoardsRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonBoardsApigetBlockReasonBoards
     */
    reason_id: number;
}
export interface BlockReasonBoardsApiUpdateBlockReasonBoardsRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonBoardsApiupdateBlockReasonBoards
     */
    reason_id: number;
    /**
     *
     * @type InlineObject4
     * @memberof BlockReasonBoardsApiupdateBlockReasonBoards
     */
    InlineObject4?: InlineObject4;
}
export declare class ObjectBlockReasonBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonBoardsApiRequestFactory, responseProcessor?: BlockReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the block reason is available.
     * Get a list of boards where the block reason is available
     * @param param the request object
     */
    getBlockReasonBoards(param: BlockReasonBoardsApiGetBlockReasonBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Make a block reason available or unavailable on several boards.
     * Make a block reason available or unavailable on several boards
     * @param param the request object
     */
    updateBlockReasonBoards(param: BlockReasonBoardsApiUpdateBlockReasonBoardsRequest, options?: Configuration): Promise<void>;
}
export interface BlockReasonCardsApiGetBlockReasonCardsRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonCardsApigetBlockReasonCards
     */
    reason_id: number;
}
export declare class ObjectBlockReasonCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonCardsApiRequestFactory, responseProcessor?: BlockReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the block reason is available.
     * Get a list of cards where the block reason is available
     * @param param the request object
     */
    getBlockReasonCards(param: BlockReasonCardsApiGetBlockReasonCardsRequest, options?: Configuration): Promise<InlineResponse20012>;
}
export interface BlockReasonHistoryApiGetBlockReasonsHistoryRequest {
    /**
     * A list of the block reason ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    reason_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the block reason.
     * @type Array&lt;&#39;reason_created&#39; | &#39;reason_updated&#39; | &#39;reason_disabled&#39; | &#39;reason_enabled&#39; | &#39;reason_deleted&#39; | &#39;reason_added_to_board&#39; | &#39;reason_removed_from_board&#39;&gt;
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof BlockReasonHistoryApigetBlockReasonsHistory
     */
    per_page?: number;
}
export declare class ObjectBlockReasonHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonHistoryApiRequestFactory, responseProcessor?: BlockReasonHistoryApiResponseProcessor);
    /**
     * Get a list of block reasons creation, deletion, update events matching some optional criteria.
     * Get a list of block reasons creation, deletion, update events
     * @param param the request object
     */
    getBlockReasonsHistory(param: BlockReasonHistoryApiGetBlockReasonsHistoryRequest, options?: Configuration): Promise<InlineResponse20010>;
}
export interface BlockReasonsApiCreateBlockReasonRequest {
    /**
     *
     * @type InlineObject2
     * @memberof BlockReasonsApicreateBlockReason
     */
    InlineObject2?: InlineObject2;
}
export interface BlockReasonsApiDeleteBlockReasonRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonsApideleteBlockReason
     */
    reason_id: number;
    /**
     * The id of a block reason with which to block the cards which are currently blocked with the block reason which is about to be deleted.
     * @type number
     * @memberof BlockReasonsApideleteBlockReason
     */
    replace_with_reason_id?: number;
}
export interface BlockReasonsApiGetBlockReasonRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonsApigetBlockReason
     */
    reason_id: number;
}
export interface BlockReasonsApiGetBlockReasonsRequest {
    /**
     * A list of the block reason ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof BlockReasonsApigetBlockReasons
     */
    reason_ids?: Array<number>;
    /**
     * Find a block reason by its full label.
     * @type string
     * @memberof BlockReasonsApigetBlockReasons
     */
    label?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof BlockReasonsApigetBlockReasons
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled block reasons. When set to 0 you will only get disabled block reasons.
     * @type 0 | 1
     * @memberof BlockReasonsApigetBlockReasons
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: reason_id, icon_type, icon_id, label, color, with_cards, with_date, with_users, availability and is_enabled.
     * @type Array&lt;&#39;reason_id&#39; | &#39;icon_type&#39; | &#39;icon_id&#39; | &#39;label&#39; | &#39;color&#39; | &#39;with_cards&#39; | &#39;with_date&#39; | &#39;with_users&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof BlockReasonsApigetBlockReasons
     */
    fields?: Array<'reason_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'with_cards' | 'with_date' | 'with_users' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     * @type Array&lt;&#39;board_ids&#39; | &#39;board_count&#39; | &#39;card_ids&#39; | &#39;card_count&#39; | &#39;business_rules&#39;&gt;
     * @memberof BlockReasonsApigetBlockReasons
     */
    expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>;
}
export interface BlockReasonsApiUpdateBlockReasonRequest {
    /**
     * A block reason id.
     * @type number
     * @memberof BlockReasonsApiupdateBlockReason
     */
    reason_id: number;
    /**
     *
     * @type InlineObject3
     * @memberof BlockReasonsApiupdateBlockReason
     */
    InlineObject3?: InlineObject3;
}
export declare class ObjectBlockReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonsApiRequestFactory, responseProcessor?: BlockReasonsApiResponseProcessor);
    /**
     * Create a new block reason.
     * Create a block reason
     * @param param the request object
     */
    createBlockReason(param: BlockReasonsApiCreateBlockReasonRequest, options?: Configuration): Promise<InlineResponse2009>;
    /**
     * Delete a block reason.
     * Delete a block reason
     * @param param the request object
     */
    deleteBlockReason(param: BlockReasonsApiDeleteBlockReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single block reason.
     * Get the details of a single block reason
     * @param param the request object
     */
    getBlockReason(param: BlockReasonsApiGetBlockReasonRequest, options?: Configuration): Promise<InlineResponse2009>;
    /**
     * Get a list of block reasons matching some optional criteria.
     * Get a list of block reasons
     * @param param the request object
     */
    getBlockReasons(param: BlockReasonsApiGetBlockReasonsRequest, options?: Configuration): Promise<InlineResponse2008>;
    /**
     * Update a block reason.
     * Update a block reason
     * @param param the request object
     */
    updateBlockReason(param: BlockReasonsApiUpdateBlockReasonRequest, options?: Configuration): Promise<InlineResponse2009>;
}
export interface BoardAssigneesApiGetBoardAssigneesRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardAssigneesApigetBoardAssignees
     */
    board_id: number;
}
export interface BoardAssigneesApiGetBoardUserRoleRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardAssigneesApigetBoardUserRole
     */
    board_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardAssigneesApigetBoardUserRole
     */
    user_id: number;
}
export interface BoardAssigneesApiSetBoardUserRoleRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardAssigneesApisetBoardUserRole
     */
    board_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardAssigneesApisetBoardUserRole
     */
    user_id: number;
    /**
     *
     * @type InlineObject22
     * @memberof BoardAssigneesApisetBoardUserRole
     */
    InlineObject22?: InlineObject22;
}
export interface BoardAssigneesApiUnsetBoardUserRoleRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardAssigneesApiunsetBoardUserRole
     */
    board_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardAssigneesApiunsetBoardUserRole
     */
    user_id: number;
}
export declare class ObjectBoardAssigneesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardAssigneesApiRequestFactory, responseProcessor?: BoardAssigneesApiResponseProcessor);
    /**
     * Get a list of the assignees for a board and their roles.
     * Get a list of board assignees
     * @param param the request object
     */
    getBoardAssignees(param: BoardAssigneesApiGetBoardAssigneesRequest, options?: Configuration): Promise<InlineResponse20050>;
    /**
     * Check if a user is assigned to a board and with what role.
     * Get the role of a board assignee
     * @param param the request object
     */
    getBoardUserRole(param: BoardAssigneesApiGetBoardUserRoleRequest, options?: Configuration): Promise<InlineResponse20026>;
    /**
     * Assign a user to a board or change his or her role.
     * Assign a user to a board
     * @param param the request object
     */
    setBoardUserRole(param: BoardAssigneesApiSetBoardUserRoleRequest, options?: Configuration): Promise<void>;
    /**
     * Unassign a user from a board.
     * Unassign a user from a board
     * @param param the request object
     */
    unsetBoardUserRole(param: BoardAssigneesApiUnsetBoardUserRoleRequest, options?: Configuration): Promise<void>;
}
export interface BoardBlockReasonsApiAddBoardBlockReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardBlockReasonsApiaddBoardBlockReason
     */
    board_id: number;
    /**
     * A block reason id.
     * @type number
     * @memberof BoardBlockReasonsApiaddBoardBlockReason
     */
    reason_id: number;
}
export interface BoardBlockReasonsApiCheckBoardBlockReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardBlockReasonsApicheckBoardBlockReason
     */
    board_id: number;
    /**
     * A block reason id.
     * @type number
     * @memberof BoardBlockReasonsApicheckBoardBlockReason
     */
    reason_id: number;
}
export interface BoardBlockReasonsApiGetBoardBlockReasonsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardBlockReasonsApigetBoardBlockReasons
     */
    board_id: number;
}
export interface BoardBlockReasonsApiRemoveBoardBlockReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardBlockReasonsApiremoveBoardBlockReason
     */
    board_id: number;
    /**
     * A block reason id.
     * @type number
     * @memberof BoardBlockReasonsApiremoveBoardBlockReason
     */
    reason_id: number;
}
export declare class ObjectBoardBlockReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardBlockReasonsApiRequestFactory, responseProcessor?: BoardBlockReasonsApiResponseProcessor);
    /**
     * Make a block reason available on a board.
     * Make a block reason available on a board
     * @param param the request object
     */
    addBoardBlockReason(param: BoardBlockReasonsApiAddBoardBlockReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a block reason is available on a board.
     * Check if a block reason is available on a board
     * @param param the request object
     */
    checkBoardBlockReason(param: BoardBlockReasonsApiCheckBoardBlockReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the block reasons available on a board.
     * Get a list of block reasons available on a board
     * @param param the request object
     */
    getBoardBlockReasons(param: BoardBlockReasonsApiGetBoardBlockReasonsRequest, options?: Configuration): Promise<InlineResponse20016>;
    /**
     * Make a block reason unavailable on a board.
     * Make a block reason unavailable on a board
     * @param param the request object
     */
    removeBoardBlockReason(param: BoardBlockReasonsApiRemoveBoardBlockReasonRequest, options?: Configuration): Promise<void>;
}
export interface BoardCardTemplatesApiAddBoardCardTemplateRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTemplatesApiaddBoardCardTemplate
     */
    board_id: number;
    /**
     * A template id.
     * @type number
     * @memberof BoardCardTemplatesApiaddBoardCardTemplate
     */
    template_id: number;
}
export interface BoardCardTemplatesApiCheckBoardCardTemplateRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTemplatesApicheckBoardCardTemplate
     */
    board_id: number;
    /**
     * A template id.
     * @type number
     * @memberof BoardCardTemplatesApicheckBoardCardTemplate
     */
    template_id: number;
}
export interface BoardCardTemplatesApiGetBoardCardTemplatesRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTemplatesApigetBoardCardTemplates
     */
    board_id: number;
}
export interface BoardCardTemplatesApiRemoveBoardCardTemplateRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTemplatesApiremoveBoardCardTemplate
     */
    board_id: number;
    /**
     * A template id.
     * @type number
     * @memberof BoardCardTemplatesApiremoveBoardCardTemplate
     */
    template_id: number;
}
export declare class ObjectBoardCardTemplatesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCardTemplatesApiRequestFactory, responseProcessor?: BoardCardTemplatesApiResponseProcessor);
    /**
     * Make a card template available on a board.
     * Make a card template available on a board
     * @param param the request object
     */
    addBoardCardTemplate(param: BoardCardTemplatesApiAddBoardCardTemplateRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a card template is available on a board.
     * Check if a card template is available on a board
     * @param param the request object
     */
    checkBoardCardTemplate(param: BoardCardTemplatesApiCheckBoardCardTemplateRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the card templates available on a board.
     * Get a list of card templates available on a board
     * @param param the request object
     */
    getBoardCardTemplates(param: BoardCardTemplatesApiGetBoardCardTemplatesRequest, options?: Configuration): Promise<InlineResponse20017>;
    /**
     * Make a card template unavailable on a board.
     * Make a card template unavailable on a board
     * @param param the request object
     */
    removeBoardCardTemplate(param: BoardCardTemplatesApiRemoveBoardCardTemplateRequest, options?: Configuration): Promise<void>;
}
export interface BoardCardTypesApiAddBoardCardTypeRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApiaddBoardCardType
     */
    board_id: number;
    /**
     * A type id.
     * @type number
     * @memberof BoardCardTypesApiaddBoardCardType
     */
    type_id: number;
    /**
     *
     * @type BoardCardTypeCreateOrUpdateRequest
     * @memberof BoardCardTypesApiaddBoardCardType
     */
    BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest;
}
export interface BoardCardTypesApiCheckBoardCardTypeRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApicheckBoardCardType
     */
    board_id: number;
    /**
     * A type id.
     * @type number
     * @memberof BoardCardTypesApicheckBoardCardType
     */
    type_id: number;
}
export interface BoardCardTypesApiGetBoardCardTypeEffectiveSettingsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApigetBoardCardTypeEffectiveSettings
     */
    board_id: number;
    /**
     * A type id.
     * @type number
     * @memberof BoardCardTypesApigetBoardCardTypeEffectiveSettings
     */
    type_id: number;
}
export interface BoardCardTypesApiGetBoardCardTypesRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApigetBoardCardTypes
     */
    board_id: number;
}
export interface BoardCardTypesApiRemoveBoardCardTypeRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApiremoveBoardCardType
     */
    board_id: number;
    /**
     * A type id.
     * @type number
     * @memberof BoardCardTypesApiremoveBoardCardType
     */
    type_id: number;
}
export interface BoardCardTypesApiUpdateBoardCardTypeRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCardTypesApiupdateBoardCardType
     */
    board_id: number;
    /**
     * A type id.
     * @type number
     * @memberof BoardCardTypesApiupdateBoardCardType
     */
    type_id: number;
    /**
     *
     * @type BoardCardTypeCreateOrUpdateRequest
     * @memberof BoardCardTypesApiupdateBoardCardType
     */
    BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest;
}
export declare class ObjectBoardCardTypesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCardTypesApiRequestFactory, responseProcessor?: BoardCardTypesApiResponseProcessor);
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param param the request object
     */
    addBoardCardType(param: BoardCardTypesApiAddBoardCardTypeRequest, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Check if a card type is available on a board.
     * Check if a card type is available on a board
     * @param param the request object
     */
    checkBoardCardType(param: BoardCardTypesApiCheckBoardCardTypeRequest, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Get the effective settings of a card type for a board if it is available on it.
     * Get the effective settings of a card type for a board if it is available on it
     * @param param the request object
     */
    getBoardCardTypeEffectiveSettings(param: BoardCardTypesApiGetBoardCardTypeEffectiveSettingsRequest, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Get a list of the card types available on a board.
     * Get a list of card types available on a board
     * @param param the request object
     */
    getBoardCardTypes(param: BoardCardTypesApiGetBoardCardTypesRequest, options?: Configuration): Promise<InlineResponse20018>;
    /**
     * Make a card type unavailable on a board.
     * Make a card type unavailable on a board
     * @param param the request object
     */
    removeBoardCardType(param: BoardCardTypesApiRemoveBoardCardTypeRequest, options?: Configuration): Promise<void>;
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param param the request object
     */
    updateBoardCardType(param: BoardCardTypesApiUpdateBoardCardTypeRequest, options?: Configuration): Promise<InlineResponse20019>;
}
export interface BoardCustomFieldAllowedValuesApiAddOrUpdateBoardCustomFieldAllowedValueRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiaddOrUpdateBoardCustomFieldAllowedValue
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiaddOrUpdateBoardCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiaddOrUpdateBoardCustomFieldAllowedValue
     */
    value_id: number;
    /**
     *
     * @type InlineObject10
     * @memberof BoardCustomFieldAllowedValuesApiaddOrUpdateBoardCustomFieldAllowedValue
     */
    InlineObject10?: InlineObject10;
}
export interface BoardCustomFieldAllowedValuesApiGetBoardCustomFieldAllowedValueRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApigetBoardCustomFieldAllowedValue
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApigetBoardCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApigetBoardCustomFieldAllowedValue
     */
    value_id: number;
}
export interface BoardCustomFieldAllowedValuesApiGetBoardCustomFieldAllowedValuesRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApigetBoardCustomFieldAllowedValues
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApigetBoardCustomFieldAllowedValues
     */
    field_id: number;
}
export interface BoardCustomFieldAllowedValuesApiRemoveBoardCustomFieldAllowedValueRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiremoveBoardCustomFieldAllowedValue
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiremoveBoardCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiremoveBoardCustomFieldAllowedValue
     */
    value_id: number;
}
export interface BoardCustomFieldAllowedValuesApiUpdateBoardCustomFieldAllowedValueRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiupdateBoardCustomFieldAllowedValue
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiupdateBoardCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof BoardCustomFieldAllowedValuesApiupdateBoardCustomFieldAllowedValue
     */
    value_id: number;
    /**
     *
     * @type InlineObject11
     * @memberof BoardCustomFieldAllowedValuesApiupdateBoardCustomFieldAllowedValue
     */
    InlineObject11?: InlineObject11;
}
export declare class ObjectBoardCustomFieldAllowedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldAllowedValuesApiRequestFactory, responseProcessor?: BoardCustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Add or update an allowed value for a custom field for a board.
     * Add or update an allowed value for a custom field for a board
     * @param param the request object
     */
    addOrUpdateBoardCustomFieldAllowedValue(param: BoardCustomFieldAllowedValuesApiAddOrUpdateBoardCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse20028>;
    /**
     * Get the details of a single allowed value for a custom field for a board.
     * Get the details of a single allowed value for a custom field for a board
     * @param param the request object
     */
    getBoardCustomFieldAllowedValue(param: BoardCustomFieldAllowedValuesApiGetBoardCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse20028>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown for a board.
     * Get a list of the allowed values of a custom field of type dropdown for a board
     * @param param the request object
     */
    getBoardCustomFieldAllowedValues(param: BoardCustomFieldAllowedValuesApiGetBoardCustomFieldAllowedValuesRequest, options?: Configuration): Promise<InlineResponse20027>;
    /**
     * Remove an allowed value for a custom field for a board.
     * Remove an allowed value for a custom field for a board
     * @param param the request object
     */
    removeBoardCustomFieldAllowedValue(param: BoardCustomFieldAllowedValuesApiRemoveBoardCustomFieldAllowedValueRequest, options?: Configuration): Promise<void>;
    /**
     * Update an allowed value for a custom field for a board.
     * Update an allowed value for a custom field for a board
     * @param param the request object
     */
    updateBoardCustomFieldAllowedValue(param: BoardCustomFieldAllowedValuesApiUpdateBoardCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse20028>;
}
export interface BoardCustomFieldDefaultContributorsApiAddBoardCustomFieldDefaultContributorRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiaddBoardCustomFieldDefaultContributor
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiaddBoardCustomFieldDefaultContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiaddBoardCustomFieldDefaultContributor
     */
    user_id: number;
}
export interface BoardCustomFieldDefaultContributorsApiCheckBoardCustomFieldDefaultContributorRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApicheckBoardCustomFieldDefaultContributor
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApicheckBoardCustomFieldDefaultContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApicheckBoardCustomFieldDefaultContributor
     */
    user_id: number;
}
export interface BoardCustomFieldDefaultContributorsApiGetBoardCustomFieldDefaultContributorsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApigetBoardCustomFieldDefaultContributors
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApigetBoardCustomFieldDefaultContributors
     */
    field_id: number;
}
export interface BoardCustomFieldDefaultContributorsApiRemoveBoardCustomFieldDefaultContributorRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiremoveBoardCustomFieldDefaultContributor
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiremoveBoardCustomFieldDefaultContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof BoardCustomFieldDefaultContributorsApiremoveBoardCustomFieldDefaultContributor
     */
    user_id: number;
}
export declare class ObjectBoardCustomFieldDefaultContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldDefaultContributorsApiRequestFactory, responseProcessor?: BoardCustomFieldDefaultContributorsApiResponseProcessor);
    /**
     * Make a contributor one of the default for a custom field for a board.
     * Make a contributor one of the default for a custom field for a board
     * @param param the request object
     */
    addBoardCustomFieldDefaultContributor(param: BoardCustomFieldDefaultContributorsApiAddBoardCustomFieldDefaultContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a contributor is one of the default for a custom field for a board.
     * Check if a contributor is one of the default for a custom field for a board
     * @param param the request object
     */
    checkBoardCustomFieldDefaultContributor(param: BoardCustomFieldDefaultContributorsApiCheckBoardCustomFieldDefaultContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a board.
     * Get a list of the default contributors for a custom field for a board
     * @param param the request object
     */
    getBoardCustomFieldDefaultContributors(param: BoardCustomFieldDefaultContributorsApiGetBoardCustomFieldDefaultContributorsRequest, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a contributor from the default for a board.
     * Remove a contributor from the default for a board
     * @param param the request object
     */
    removeBoardCustomFieldDefaultContributor(param: BoardCustomFieldDefaultContributorsApiRemoveBoardCustomFieldDefaultContributorRequest, options?: Configuration): Promise<void>;
}
export interface BoardCustomFieldsApiRemoveBoardCustomFieldRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardCustomFieldsApiremoveBoardCustomField
     */
    board_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof BoardCustomFieldsApiremoveBoardCustomField
     */
    field_id: number;
}
export declare class ObjectBoardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldsApiRequestFactory, responseProcessor?: BoardCustomFieldsApiResponseProcessor);
    /**
     * Make a custom field unavailable on a board.
     * Make a custom field unavailable on a board
     * @param param the request object
     */
    removeBoardCustomField(param: BoardCustomFieldsApiRemoveBoardCustomFieldRequest, options?: Configuration): Promise<void>;
}
export interface BoardDiscardReasonsApiAddBoardDiscardReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardDiscardReasonsApiaddBoardDiscardReason
     */
    board_id: number;
    /**
     * A discard reason id.
     * @type number
     * @memberof BoardDiscardReasonsApiaddBoardDiscardReason
     */
    reason_id: number;
}
export interface BoardDiscardReasonsApiCheckBoardDiscardReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardDiscardReasonsApicheckBoardDiscardReason
     */
    board_id: number;
    /**
     * A discard reason id.
     * @type number
     * @memberof BoardDiscardReasonsApicheckBoardDiscardReason
     */
    reason_id: number;
}
export interface BoardDiscardReasonsApiGetBoardDiscardReasonsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardDiscardReasonsApigetBoardDiscardReasons
     */
    board_id: number;
}
export interface BoardDiscardReasonsApiRemoveBoardDiscardReasonRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardDiscardReasonsApiremoveBoardDiscardReason
     */
    board_id: number;
    /**
     * A discard reason id.
     * @type number
     * @memberof BoardDiscardReasonsApiremoveBoardDiscardReason
     */
    reason_id: number;
}
export declare class ObjectBoardDiscardReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardDiscardReasonsApiRequestFactory, responseProcessor?: BoardDiscardReasonsApiResponseProcessor);
    /**
     * Make a discard reason available on a board.
     * Make a discard reason available on a board
     * @param param the request object
     */
    addBoardDiscardReason(param: BoardDiscardReasonsApiAddBoardDiscardReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a discard reason is available on a board.
     * Check if a discard reason is available on a board
     * @param param the request object
     */
    checkBoardDiscardReason(param: BoardDiscardReasonsApiCheckBoardDiscardReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the discard reasons available on a board.
     * Get a list of discard reasons available on a board
     * @param param the request object
     */
    getBoardDiscardReasons(param: BoardDiscardReasonsApiGetBoardDiscardReasonsRequest, options?: Configuration): Promise<InlineResponse20030>;
    /**
     * Make a discard reason unavailable on a board.
     * Make a discard reason unavailable on a board
     * @param param the request object
     */
    removeBoardDiscardReason(param: BoardDiscardReasonsApiRemoveBoardDiscardReasonRequest, options?: Configuration): Promise<void>;
}
export interface BoardSettingsApiGetBoardSettingsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardSettingsApigetBoardSettings
     */
    board_id: number;
}
export interface BoardSettingsApiSetBoardSettingsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardSettingsApisetBoardSettings
     */
    board_id: number;
    /**
     *
     * @type BoardSettings
     * @memberof BoardSettingsApisetBoardSettings
     */
    BoardSettings?: BoardSettings;
}
export declare class ObjectBoardSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardSettingsApiRequestFactory, responseProcessor?: BoardSettingsApiResponseProcessor);
    /**
     * Get the values of the board settings.
     * Get the values of the board settings
     * @param param the request object
     */
    getBoardSettings(param: BoardSettingsApiGetBoardSettingsRequest, options?: Configuration): Promise<InlineResponse20043>;
    /**
     * Set the values of the board settings.
     * Set the values of the board settings
     * @param param the request object
     */
    setBoardSettings(param: BoardSettingsApiSetBoardSettingsRequest, options?: Configuration): Promise<InlineResponse20043>;
}
export interface BoardStickersApiAddBoardStickerRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStickersApiaddBoardSticker
     */
    board_id: number;
    /**
     * A sticker id.
     * @type number
     * @memberof BoardStickersApiaddBoardSticker
     */
    sticker_id: number;
    /**
     *
     * @type InlineObject19
     * @memberof BoardStickersApiaddBoardSticker
     */
    InlineObject19?: InlineObject19;
}
export interface BoardStickersApiCheckBoardStickerRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStickersApicheckBoardSticker
     */
    board_id: number;
    /**
     * A sticker id.
     * @type number
     * @memberof BoardStickersApicheckBoardSticker
     */
    sticker_id: number;
}
export interface BoardStickersApiGetBoardStickersRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStickersApigetBoardStickers
     */
    board_id: number;
}
export interface BoardStickersApiRemoveBoardStickerRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStickersApiremoveBoardSticker
     */
    board_id: number;
    /**
     * A sticker id.
     * @type number
     * @memberof BoardStickersApiremoveBoardSticker
     */
    sticker_id: number;
}
export interface BoardStickersApiUpdateBoardStickerRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStickersApiupdateBoardSticker
     */
    board_id: number;
    /**
     * A sticker id.
     * @type number
     * @memberof BoardStickersApiupdateBoardSticker
     */
    sticker_id: number;
    /**
     *
     * @type InlineObject20
     * @memberof BoardStickersApiupdateBoardSticker
     */
    InlineObject20?: InlineObject20;
}
export declare class ObjectBoardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStickersApiRequestFactory, responseProcessor?: BoardStickersApiResponseProcessor);
    /**
     * Make a sticker available on a board.
     * Make a sticker available on a board
     * @param param the request object
     */
    addBoardSticker(param: BoardStickersApiAddBoardStickerRequest, options?: Configuration): Promise<InlineResponse20045>;
    /**
     * Check if a sticker is available on a board.
     * Check if a sticker is available on a board
     * @param param the request object
     */
    checkBoardSticker(param: BoardStickersApiCheckBoardStickerRequest, options?: Configuration): Promise<InlineResponse20045>;
    /**
     * Get a list of the stickers available on a board.
     * Get a list of stickers available on a board
     * @param param the request object
     */
    getBoardStickers(param: BoardStickersApiGetBoardStickersRequest, options?: Configuration): Promise<InlineResponse20044>;
    /**
     * Make a sticker unavailable on a board.
     * Make a sticker unavailable on a board
     * @param param the request object
     */
    removeBoardSticker(param: BoardStickersApiRemoveBoardStickerRequest, options?: Configuration): Promise<void>;
    /**
     * Update the properties of a sticker for a board.
     * Update the properties of a sticker for a board
     * @param param the request object
     */
    updateBoardSticker(param: BoardStickersApiUpdateBoardStickerRequest, options?: Configuration): Promise<InlineResponse20045>;
}
export interface BoardStructureApiGetCurrentBoardStructureRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStructureApigetCurrentBoardStructure
     */
    board_id: number;
}
export interface BoardStructureApiGetCurrentBoardStructureRevisionRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStructureApigetCurrentBoardStructureRevision
     */
    board_id: number;
}
export declare class ObjectBoardStructureApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStructureApiRequestFactory, responseProcessor?: BoardStructureApiResponseProcessor);
    /**
     * Get all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.
     * Get the current board structure
     * @param param the request object
     */
    getCurrentBoardStructure(param: BoardStructureApiGetCurrentBoardStructureRequest, options?: Configuration): Promise<InlineResponse20025>;
    /**
     * Get only the revision number of the current board structure.
     * Get the current revision of the board structure
     * @param param the request object
     */
    getCurrentBoardStructureRevision(param: BoardStructureApiGetCurrentBoardStructureRevisionRequest, options?: Configuration): Promise<InlineResponse20026>;
}
export interface BoardStructureRevisionsApiGetBoardStructureRevisionRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStructureRevisionsApigetBoardStructureRevision
     */
    board_id: number;
    /**
     * A revision number.
     * @type number
     * @memberof BoardStructureRevisionsApigetBoardStructureRevision
     */
    revision: number;
}
export interface BoardStructureRevisionsApiGetBoardStructureRevisionsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardStructureRevisionsApigetBoardStructureRevisions
     */
    board_id: number;
}
export declare class ObjectBoardStructureRevisionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStructureRevisionsApiRequestFactory, responseProcessor?: BoardStructureRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the board structure.
     * Get a specific revision of the board structure
     * @param param the request object
     */
    getBoardStructureRevision(param: BoardStructureRevisionsApiGetBoardStructureRevisionRequest, options?: Configuration): Promise<InlineResponse20025>;
    /**
     * Get a list of the revisions of the board structure and the date and time they were replaced.
     * Get a list of revisions of the board structure
     * @param param the request object
     */
    getBoardStructureRevisions(param: BoardStructureRevisionsApiGetBoardStructureRevisionsRequest, options?: Configuration): Promise<InlineResponse20046>;
}
export interface BoardTagsApiAddBoardTagRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTagsApiaddBoardTag
     */
    board_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof BoardTagsApiaddBoardTag
     */
    tag_id: number;
}
export interface BoardTagsApiCheckBoardTagRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTagsApicheckBoardTag
     */
    board_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof BoardTagsApicheckBoardTag
     */
    tag_id: number;
}
export interface BoardTagsApiGetBoardTagsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTagsApigetBoardTags
     */
    board_id: number;
}
export interface BoardTagsApiRemoveBoardTagRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTagsApiremoveBoardTag
     */
    board_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof BoardTagsApiremoveBoardTag
     */
    tag_id: number;
}
export declare class ObjectBoardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardTagsApiRequestFactory, responseProcessor?: BoardTagsApiResponseProcessor);
    /**
     * Make a tag available on a board.
     * Make a tag available on a board
     * @param param the request object
     */
    addBoardTag(param: BoardTagsApiAddBoardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is available on a board.
     * Check if a tag is available on a board
     * @param param the request object
     */
    checkBoardTag(param: BoardTagsApiCheckBoardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the tags available on a board.
     * Get a list of tags available on a board
     * @param param the request object
     */
    getBoardTags(param: BoardTagsApiGetBoardTagsRequest, options?: Configuration): Promise<InlineResponse20047>;
    /**
     * Make a tag unavailable on a board.
     * Make a tag unavailable on a board
     * @param param the request object
     */
    removeBoardTag(param: BoardTagsApiRemoveBoardTagRequest, options?: Configuration): Promise<void>;
}
export interface BoardTeamsApiAddBoardTeamRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTeamsApiaddBoardTeam
     */
    board_id: number;
    /**
     * A team id.
     * @type number
     * @memberof BoardTeamsApiaddBoardTeam
     */
    team_id: number;
    /**
     *
     * @type InlineObject21
     * @memberof BoardTeamsApiaddBoardTeam
     */
    InlineObject21?: InlineObject21;
}
export interface BoardTeamsApiGetBoardTeamRoleRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTeamsApigetBoardTeamRole
     */
    board_id: number;
    /**
     * A team id.
     * @type number
     * @memberof BoardTeamsApigetBoardTeamRole
     */
    team_id: number;
}
export interface BoardTeamsApiGetBoardTeamsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTeamsApigetBoardTeams
     */
    board_id: number;
}
export interface BoardTeamsApiRemoveBoardTeamRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardTeamsApiremoveBoardTeam
     */
    board_id: number;
    /**
     * A team id.
     * @type number
     * @memberof BoardTeamsApiremoveBoardTeam
     */
    team_id: number;
}
export declare class ObjectBoardTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardTeamsApiRequestFactory, responseProcessor?: BoardTeamsApiResponseProcessor);
    /**
     * Give a team access to a board.
     * Give a team access to a board
     * @param param the request object
     */
    addBoardTeam(param: BoardTeamsApiAddBoardTeamRequest, options?: Configuration): Promise<void>;
    /**
     * Get the role of a team for the current board.
     * Get the role of a team for the current board.
     * @param param the request object
     */
    getBoardTeamRole(param: BoardTeamsApiGetBoardTeamRoleRequest, options?: Configuration): Promise<InlineResponse20049>;
    /**
     * Get a list of the teams having access to a board.
     * Get a list of teams having access to a board
     * @param param the request object
     */
    getBoardTeams(param: BoardTeamsApiGetBoardTeamsRequest, options?: Configuration): Promise<InlineResponse20048>;
    /**
     * Deny a team access to a board.
     * Deny a team access to a board
     * @param param the request object
     */
    removeBoardTeam(param: BoardTeamsApiRemoveBoardTeamRequest, options?: Configuration): Promise<void>;
}
export interface BoardVisibleStandardFieldsApiAddBoardStandardFieldRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardVisibleStandardFieldsApiaddBoardStandardField
     */
    board_id: number;
    /**
     * A field name.
     * @type string
     * @memberof BoardVisibleStandardFieldsApiaddBoardStandardField
     */
    field_name: string;
}
export interface BoardVisibleStandardFieldsApiCheckBoardStandardFieldRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardVisibleStandardFieldsApicheckBoardStandardField
     */
    board_id: number;
    /**
     * A field name.
     * @type string
     * @memberof BoardVisibleStandardFieldsApicheckBoardStandardField
     */
    field_name: string;
}
export interface BoardVisibleStandardFieldsApiGetBoardVisibleStandardFieldsRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardVisibleStandardFieldsApigetBoardVisibleStandardFields
     */
    board_id: number;
}
export interface BoardVisibleStandardFieldsApiRemoveBoardStandardFieldRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardVisibleStandardFieldsApiremoveBoardStandardField
     */
    board_id: number;
    /**
     * A field name.
     * @type string
     * @memberof BoardVisibleStandardFieldsApiremoveBoardStandardField
     */
    field_name: string;
}
export declare class ObjectBoardVisibleStandardFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardVisibleStandardFieldsApiRequestFactory, responseProcessor?: BoardVisibleStandardFieldsApiResponseProcessor);
    /**
     * Make a standard field visible on a board.
     * Make a standard field visible on a board
     * @param param the request object
     */
    addBoardStandardField(param: BoardVisibleStandardFieldsApiAddBoardStandardFieldRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a standard field is visible on a board.
     * Check if a standard field is visible on a board
     * @param param the request object
     */
    checkBoardStandardField(param: BoardVisibleStandardFieldsApiCheckBoardStandardFieldRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the standard fields visible on a board.
     * Get a list of standard fields visible on a board
     * @param param the request object
     */
    getBoardVisibleStandardFields(param: BoardVisibleStandardFieldsApiGetBoardVisibleStandardFieldsRequest, options?: Configuration): Promise<InlineResponse20051>;
    /**
     * Make a standard field unvisible on a board.
     * Make a standard field unvisible on a board
     * @param param the request object
     */
    removeBoardStandardField(param: BoardVisibleStandardFieldsApiRemoveBoardStandardFieldRequest, options?: Configuration): Promise<void>;
}
export interface BoardsApiCreateBoardRequest {
    /**
     *
     * @type InlineObject5
     * @memberof BoardsApicreateBoard
     */
    InlineObject5?: InlineObject5;
}
export interface BoardsApiDeleteBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardsApideleteBoard
     */
    board_id: number;
}
export interface BoardsApiGetBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardsApigetBoard
     */
    board_id: number;
}
export interface BoardsApiGetBoardsRequest {
    /**
     * A list of the board ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof BoardsApigetBoards
     */
    board_ids?: Array<number>;
    /**
     * A list of the workspace ids holding the boards that you want to get.
     * @type Array&lt;number&gt;
     * @memberof BoardsApigetBoards
     */
    workspace_ids?: Array<number>;
    /**
     * When set to 0 you will only get non-archived boards. When set to 1 you will only get archived boards.
     * @type 0 | 1
     * @memberof BoardsApigetBoards
     */
    is_archived?: 0 | 1;
    /**
     * When set to 1 you will only get boards to which you are assigned.
     * @type 0 | 1
     * @memberof BoardsApigetBoards
     */
    if_assigned?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: board_id, workspace_id, is_archived, name and description.
     * @type Array&lt;&#39;board_id&#39; | &#39;workspace_id&#39; | &#39;is_archived&#39; | &#39;name&#39; | &#39;description&#39;&gt;
     * @memberof BoardsApigetBoards
     */
    fields?: Array<'board_id' | 'workspace_id' | 'is_archived' | 'name' | 'description'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: workflows, settings and structure.
     * @type Array&lt;&#39;workflows&#39; | &#39;settings&#39; | &#39;structure&#39;&gt;
     * @memberof BoardsApigetBoards
     */
    expand?: Array<'workflows' | 'settings' | 'structure'>;
}
export interface BoardsApiUpdateBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof BoardsApiupdateBoard
     */
    board_id: number;
    /**
     *
     * @type InlineObject6
     * @memberof BoardsApiupdateBoard
     */
    InlineObject6?: InlineObject6;
}
export declare class ObjectBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardsApiRequestFactory, responseProcessor?: BoardsApiResponseProcessor);
    /**
     * Create a new board.
     * Create a board
     * @param param the request object
     */
    createBoard(param: BoardsApiCreateBoardRequest, options?: Configuration): Promise<InlineResponse20014>;
    /**
     * Delete a board.
     * Delete a board
     * @param param the request object
     */
    deleteBoard(param: BoardsApiDeleteBoardRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single board.
     * Get the details of a single board
     * @param param the request object
     */
    getBoard(param: BoardsApiGetBoardRequest, options?: Configuration): Promise<InlineResponse20015>;
    /**
     * Get a list of boards matching some optional criteria.
     * Get a list of boards
     * @param param the request object
     */
    getBoards(param: BoardsApiGetBoardsRequest, options?: Configuration): Promise<InlineResponse20013>;
    /**
     * Update a board.
     * Update a board
     * @param param the request object
     */
    updateBoard(param: BoardsApiUpdateBoardRequest, options?: Configuration): Promise<InlineResponse20015>;
}
export interface BusinessRuleExecutionHistoryApiGetBusinessRulesExecutionHistoryRequest {
    /**
     * A list of the business_rule_ids that you want to get the executions for.
     * @type Array&lt;number&gt;
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    business_rule_ids?: Array<number>;
    /**
     * A list of the card ids on which the business rules were executed on.
     * @type Array&lt;number&gt;
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    executed_on_card_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof BusinessRuleExecutionHistoryApigetBusinessRulesExecutionHistory
     */
    per_page?: number;
}
export declare class ObjectBusinessRuleExecutionHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BusinessRuleExecutionHistoryApiRequestFactory, responseProcessor?: BusinessRuleExecutionHistoryApiResponseProcessor);
    /**
     * Get a list of business rule executions matching some optional criteria.
     * Get a list of business rule executions
     * @param param the request object
     */
    getBusinessRulesExecutionHistory(param: BusinessRuleExecutionHistoryApiGetBusinessRulesExecutionHistoryRequest, options?: Configuration): Promise<InlineResponse20055>;
}
export interface CardAttachmentsApiAddCardAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardAttachmentsApiaddCardAttachment
     */
    card_id: number;
    /**
     *
     * @type CardAttachmentCreateRequest
     * @memberof CardAttachmentsApiaddCardAttachment
     */
    CardAttachmentCreateRequest?: CardAttachmentCreateRequest;
}
export interface CardAttachmentsApiDeleteCardAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardAttachmentsApideleteCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardAttachmentsApideleteCardAttachment
     */
    attachment_id: number;
}
export interface CardAttachmentsApiGetCardAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardAttachmentsApigetCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardAttachmentsApigetCardAttachment
     */
    attachment_id: number;
}
export interface CardAttachmentsApiGetCardAttachmentsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardAttachmentsApigetCardAttachments
     */
    card_id: number;
}
export interface CardAttachmentsApiUpdateCardAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardAttachmentsApiupdateCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardAttachmentsApiupdateCardAttachment
     */
    attachment_id: number;
    /**
     *
     * @type CardAttachmentUpdateRequest
     * @memberof CardAttachmentsApiupdateCardAttachment
     */
    CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest;
}
export declare class ObjectCardAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardAttachmentsApiRequestFactory, responseProcessor?: CardAttachmentsApiResponseProcessor);
    /**
     * Add a card's attachment.
     * Add a card's attachment
     * @param param the request object
     */
    addCardAttachment(param: CardAttachmentsApiAddCardAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment for a card.
     * Delete an attachment for a card
     * @param param the request object
     */
    deleteCardAttachment(param: CardAttachmentsApiDeleteCardAttachmentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card.
     * Get the details of an attachment for a card
     * @param param the request object
     */
    getCardAttachment(param: CardAttachmentsApiGetCardAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a card's attachments.
     * Get a card's attachments
     * @param param the request object
     */
    getCardAttachments(param: CardAttachmentsApiGetCardAttachmentsRequest, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card.
     * Update the details of an attachment for a card
     * @param param the request object
     */
    updateCardAttachment(param: CardAttachmentsApiUpdateCardAttachmentRequest, options?: Configuration): Promise<void | InlineResponse20062>;
}
export interface CardBlockReasonApiGetCardBlockReasonRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardBlockReasonApigetCardBlockReason
     */
    card_id: number;
}
export interface CardBlockReasonApiSetCardBlockReasonRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardBlockReasonApisetCardBlockReason
     */
    card_id: number;
    /**
     *
     * @type InlineObject38
     * @memberof CardBlockReasonApisetCardBlockReason
     */
    InlineObject38?: InlineObject38;
}
export interface CardBlockReasonApiUnblockCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardBlockReasonApiunblockCard
     */
    card_id: number;
}
export declare class ObjectCardBlockReasonApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardBlockReasonApiRequestFactory, responseProcessor?: CardBlockReasonApiResponseProcessor);
    /**
     * Check if a card is blocked and for what reason.
     * Get a card's block reason
     * @param param the request object
     */
    getCardBlockReason(param: CardBlockReasonApiGetCardBlockReasonRequest, options?: Configuration): Promise<InlineResponse20092>;
    /**
     * Block a card or change its block reason.
     * Block a card
     * @param param the request object
     */
    setCardBlockReason(param: CardBlockReasonApiSetCardBlockReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Unblock a card.
     * Unblock a card
     * @param param the request object
     */
    unblockCard(param: CardBlockReasonApiUnblockCardRequest, options?: Configuration): Promise<void>;
}
export interface CardCoOwnersApiAddCardCoOwnerRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCoOwnersApiaddCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCoOwnersApiaddCardCoOwner
     */
    user_id: number;
}
export interface CardCoOwnersApiCheckCardCoOwnerRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCoOwnersApicheckCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCoOwnersApicheckCardCoOwner
     */
    user_id: number;
}
export interface CardCoOwnersApiGetCardCoOwnersRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCoOwnersApigetCardCoOwners
     */
    card_id: number;
}
export interface CardCoOwnersApiRemoveCardCoOwnerRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCoOwnersApiremoveCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCoOwnersApiremoveCardCoOwner
     */
    user_id: number;
}
export declare class ObjectCardCoOwnersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCoOwnersApiRequestFactory, responseProcessor?: CardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card.
     * Add a user as a co-owner for a card
     * @param param the request object
     */
    addCardCoOwner(param: CardCoOwnersApiAddCardCoOwnerRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a co-owner is one for the card.
     * Check if a co-owner is one for the card
     * @param param the request object
     */
    checkCardCoOwner(param: CardCoOwnersApiCheckCardCoOwnerRequest, options?: Configuration): Promise<void>;
    /**
     * Get a card's co-owners.
     * Get a card's co-owners
     * @param param the request object
     */
    getCardCoOwners(param: CardCoOwnersApiGetCardCoOwnersRequest, options?: Configuration): Promise<InlineResponse20095>;
    /**
     * Remove a user as a co-owner for a card.
     * Remove a user as a co-owner for a card
     * @param param the request object
     */
    removeCardCoOwner(param: CardCoOwnersApiRemoveCardCoOwnerRequest, options?: Configuration): Promise<void>;
}
export interface CardCommentAttachmentsApiAddCarCommentAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentAttachmentsApiaddCarCommentAttachment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentAttachmentsApiaddCarCommentAttachment
     */
    comment_id: number;
    /**
     *
     * @type CommentAttachmentCreateRequest
     * @memberof CardCommentAttachmentsApiaddCarCommentAttachment
     */
    CommentAttachmentCreateRequest?: CommentAttachmentCreateRequest;
}
export interface CardCommentAttachmentsApiDeleteCardCommentAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentAttachmentsApideleteCardCommentAttachment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentAttachmentsApideleteCardCommentAttachment
     */
    comment_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardCommentAttachmentsApideleteCardCommentAttachment
     */
    attachment_id: number;
}
export interface CardCommentAttachmentsApiGetCardCommentAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentAttachmentsApigetCardCommentAttachment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentAttachmentsApigetCardCommentAttachment
     */
    comment_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardCommentAttachmentsApigetCardCommentAttachment
     */
    attachment_id: number;
}
export interface CardCommentAttachmentsApiGetCardCommentAttachmentsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentAttachmentsApigetCardCommentAttachments
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentAttachmentsApigetCardCommentAttachments
     */
    comment_id: number;
}
export declare class ObjectCardCommentAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCommentAttachmentsApiRequestFactory, responseProcessor?: CardCommentAttachmentsApiResponseProcessor);
    /**
     * Add a card comment's attachment.
     * Add a card comment's attachment
     * @param param the request object
     */
    addCarCommentAttachment(param: CardCommentAttachmentsApiAddCarCommentAttachmentRequest, options?: Configuration): Promise<InlineResponse200197>;
    /**
     * Delete an attachment for a card comment.
     * Delete an attachment for a card comment
     * @param param the request object
     */
    deleteCardCommentAttachment(param: CardCommentAttachmentsApiDeleteCardCommentAttachmentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card comment.
     * Get the details of an attachment for a card comment
     * @param param the request object
     */
    getCardCommentAttachment(param: CardCommentAttachmentsApiGetCardCommentAttachmentRequest, options?: Configuration): Promise<void | InlineResponse20098>;
    /**
     * Get a card comment's attachments.
     * Get a card comment's attachments
     * @param param the request object
     */
    getCardCommentAttachments(param: CardCommentAttachmentsApiGetCardCommentAttachmentsRequest, options?: Configuration): Promise<InlineResponse200196>;
}
export interface CardCommentsApiAddCardCommentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentsApiaddCardComment
     */
    card_id: number;
    /**
     *
     * @type CommentCreateRequest
     * @memberof CardCommentsApiaddCardComment
     */
    CommentCreateRequest?: CommentCreateRequest;
}
export interface CardCommentsApiDeleteCardCommentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentsApideleteCardComment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentsApideleteCardComment
     */
    comment_id: number;
}
export interface CardCommentsApiGetCardCommentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentsApigetCardComment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentsApigetCardComment
     */
    comment_id: number;
}
export interface CardCommentsApiGetCardCommentsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentsApigetCardComments
     */
    card_id: number;
}
export interface CardCommentsApiUpdateCardCommentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCommentsApiupdateCardComment
     */
    card_id: number;
    /**
     * A comment id.
     * @type number
     * @memberof CardCommentsApiupdateCardComment
     */
    comment_id: number;
    /**
     *
     * @type CommentUpdateRequest
     * @memberof CardCommentsApiupdateCardComment
     */
    CommentUpdateRequest?: CommentUpdateRequest;
}
export declare class ObjectCardCommentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCommentsApiRequestFactory, responseProcessor?: CardCommentsApiResponseProcessor);
    /**
     * Add a comment to a card.
     * Add a comment to a card
     * @param param the request object
     */
    addCardComment(param: CardCommentsApiAddCardCommentRequest, options?: Configuration): Promise<InlineResponse20097>;
    /**
     * Delete a comment for a card.
     * Delete a comment for a card
     * @param param the request object
     */
    deleteCardComment(param: CardCommentsApiDeleteCardCommentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a comment for a card.
     * Get the details of a comment for a card
     * @param param the request object
     */
    getCardComment(param: CardCommentsApiGetCardCommentRequest, options?: Configuration): Promise<InlineResponse20097>;
    /**
     * Get a card's comments.
     * Get a card's comments
     * @param param the request object
     */
    getCardComments(param: CardCommentsApiGetCardCommentsRequest, options?: Configuration): Promise<InlineResponse20096>;
    /**
     * Update the details of a comment for a card.
     * Update the details of a comment for a card
     * @param param the request object
     */
    updateCardComment(param: CardCommentsApiUpdateCardCommentRequest, options?: Configuration): Promise<void | InlineResponse20097>;
}
export interface CardCustomFieldContributorsApiAddCardCustomFieldContributorRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldContributorsApiaddCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldContributorsApiaddCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCustomFieldContributorsApiaddCardCustomFieldContributor
     */
    user_id: number;
}
export interface CardCustomFieldContributorsApiCheckCardCustomFieldContributorRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldContributorsApicheckCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldContributorsApicheckCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCustomFieldContributorsApicheckCardCustomFieldContributor
     */
    user_id: number;
}
export interface CardCustomFieldContributorsApiGetCardCustomFieldContributorsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldContributorsApigetCardCustomFieldContributors
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldContributorsApigetCardCustomFieldContributors
     */
    field_id: number;
}
export interface CardCustomFieldContributorsApiRemoveCardCustomFieldContributorRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldContributorsApiremoveCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldContributorsApiremoveCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardCustomFieldContributorsApiremoveCardCustomFieldContributor
     */
    user_id: number;
}
export declare class ObjectCardCustomFieldContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card.
     * Add a user as a contributor for a custom field for a card
     * @param param the request object
     */
    addCardCustomFieldContributor(param: CardCustomFieldContributorsApiAddCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a contributor for a custom field for a card.
     * Check if a user is a contributor for a custom field for a card
     * @param param the request object
     */
    checkCardCustomFieldContributor(param: CardCustomFieldContributorsApiCheckCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a card.
     * Get a list of the default contributors for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldContributors(param: CardCustomFieldContributorsApiGetCardCustomFieldContributorsRequest, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card.
     * Remove a user as a contributor for a custom field for a card
     * @param param the request object
     */
    removeCardCustomFieldContributor(param: CardCustomFieldContributorsApiRemoveCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
}
export interface CardCustomFieldFilesApiAddCardCustomFieldFileRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldFilesApiaddCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldFilesApiaddCardCustomFieldFile
     */
    field_id: number;
    /**
     *
     * @type CardCustomFieldFileCreateRequest
     * @memberof CardCustomFieldFilesApiaddCardCustomFieldFile
     */
    CardCustomFieldFileCreateRequest?: CardCustomFieldFileCreateRequest;
}
export interface CardCustomFieldFilesApiDeleteCardCustomFieldFileRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldFilesApideleteCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldFilesApideleteCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardCustomFieldFilesApideleteCardCustomFieldFile
     */
    id: number;
}
export interface CardCustomFieldFilesApiGetCardCustomFieldFileRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldFilesApigetCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldFilesApigetCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardCustomFieldFilesApigetCardCustomFieldFile
     */
    id: number;
}
export interface CardCustomFieldFilesApiGetCardCustomFieldFilesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldFilesApigetCardCustomFieldFiles
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldFilesApigetCardCustomFieldFiles
     */
    field_id: number;
}
export interface CardCustomFieldFilesApiUpdateCardCustomFieldFileRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldFilesApiupdateCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldFilesApiupdateCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardCustomFieldFilesApiupdateCardCustomFieldFile
     */
    id: number;
    /**
     *
     * @type InlineObject40
     * @memberof CardCustomFieldFilesApiupdateCardCustomFieldFile
     */
    InlineObject40?: InlineObject40;
}
export declare class ObjectCardCustomFieldFilesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldFilesApiRequestFactory, responseProcessor?: CardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card.
     * Add a file for a custom field for a card
     * @param param the request object
     */
    addCardCustomFieldFile(param: CardCustomFieldFilesApiAddCardCustomFieldFileRequest, options?: Configuration): Promise<void | InlineResponse200100>;
    /**
     * Delete a file for a custom field for a card.
     * Delete a file for a custom field for a card
     * @param param the request object
     */
    deleteCardCustomFieldFile(param: CardCustomFieldFilesApiDeleteCardCustomFieldFileRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single file for a custom field for a card.
     * Get the details of a single file for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldFile(param: CardCustomFieldFilesApiGetCardCustomFieldFileRequest, options?: Configuration): Promise<InlineResponse200101>;
    /**
     * Get a list of the files for a custom field for a card.
     * Get a list of the files for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldFiles(param: CardCustomFieldFilesApiGetCardCustomFieldFilesRequest, options?: Configuration): Promise<InlineResponse20099>;
    /**
     * Update a file for a custom field for a card.
     * Update a file for a custom field for a card
     * @param param the request object
     */
    updateCardCustomFieldFile(param: CardCustomFieldFilesApiUpdateCardCustomFieldFileRequest, options?: Configuration): Promise<void | InlineResponse200101>;
}
export interface CardCustomFieldSelectedCardsApiAddOrUpdateCardCustomFieldSelectedCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiaddOrUpdateCardCustomFieldSelectedCards
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiaddOrUpdateCardCustomFieldSelectedCards
     */
    field_id: number;
    /**
     * A selected card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiaddOrUpdateCardCustomFieldSelectedCards
     */
    selected_card_id: number;
    /**
     *
     * @type InlineObject41
     * @memberof CardCustomFieldSelectedCardsApiaddOrUpdateCardCustomFieldSelectedCards
     */
    InlineObject41?: InlineObject41;
}
export interface CardCustomFieldSelectedCardsApiGetCardCustomFieldSelectedCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApigetCardCustomFieldSelectedCard
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApigetCardCustomFieldSelectedCard
     */
    field_id: number;
    /**
     * A selected card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApigetCardCustomFieldSelectedCard
     */
    selected_card_id: number;
}
export interface CardCustomFieldSelectedCardsApiGetCardCustomFieldSelectedCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApigetCardCustomFieldSelectedCards
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApigetCardCustomFieldSelectedCards
     */
    field_id: number;
}
export interface CardCustomFieldSelectedCardsApiRemoveCardCustomFieldSelectedCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiremoveCardCustomFieldSelectedCards
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiremoveCardCustomFieldSelectedCards
     */
    field_id: number;
    /**
     * A selected card id.
     * @type number
     * @memberof CardCustomFieldSelectedCardsApiremoveCardCustomFieldSelectedCards
     */
    selected_card_id: number;
}
export declare class ObjectCardCustomFieldSelectedCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedCardsApiRequestFactory, responseProcessor?: CardCustomFieldSelectedCardsApiResponseProcessor);
    /**
     * Add or update a selected card for a custom field for a card.
     * Add or update a selected card for a custom field for a card
     * @param param the request object
     */
    addOrUpdateCardCustomFieldSelectedCards(param: CardCustomFieldSelectedCardsApiAddOrUpdateCardCustomFieldSelectedCardsRequest, options?: Configuration): Promise<void | InlineResponse200103>;
    /**
     * Get the details of a selected card for a custom field for a card.
     * Get the details of a selected card for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldSelectedCard(param: CardCustomFieldSelectedCardsApiGetCardCustomFieldSelectedCardRequest, options?: Configuration): Promise<InlineResponse200103>;
    /**
     * Get a list of the selected cards for a custom field of type card picker for a card.
     * Get a list of the selected cards for a custom field of type card picker for a card
     * @param param the request object
     */
    getCardCustomFieldSelectedCards(param: CardCustomFieldSelectedCardsApiGetCardCustomFieldSelectedCardsRequest, options?: Configuration): Promise<InlineResponse200102>;
    /**
     * Remove a selected card for a custom field for a card.
     * Remove a selected card for a custom field for a card
     * @param param the request object
     */
    removeCardCustomFieldSelectedCards(param: CardCustomFieldSelectedCardsApiRemoveCardCustomFieldSelectedCardsRequest, options?: Configuration): Promise<void>;
}
export interface CardCustomFieldSelectedValuesApiAddOrUpdateCardCustomFieldSelectedValuesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiaddOrUpdateCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiaddOrUpdateCardCustomFieldSelectedValues
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiaddOrUpdateCardCustomFieldSelectedValues
     */
    value_id: number;
    /**
     *
     * @type CardCustomFieldSelectedValueAddOrUpdateRequest
     * @memberof CardCustomFieldSelectedValuesApiaddOrUpdateCardCustomFieldSelectedValues
     */
    CardCustomFieldSelectedValueAddOrUpdateRequest?: CardCustomFieldSelectedValueAddOrUpdateRequest;
}
export interface CardCustomFieldSelectedValuesApiGetCardCustomFieldSelectedValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApigetCardCustomFieldSelectedValue
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApigetCardCustomFieldSelectedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApigetCardCustomFieldSelectedValue
     */
    value_id: number;
}
export interface CardCustomFieldSelectedValuesApiGetCardCustomFieldSelectedValuesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApigetCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApigetCardCustomFieldSelectedValues
     */
    field_id: number;
}
export interface CardCustomFieldSelectedValuesApiRemoveCardCustomFieldSelectedValuesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiremoveCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiremoveCardCustomFieldSelectedValues
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardCustomFieldSelectedValuesApiremoveCardCustomFieldSelectedValues
     */
    value_id: number;
}
export declare class ObjectCardCustomFieldSelectedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card.
     * Add or update a selected value for a custom field for a card
     * @param param the request object
     */
    addOrUpdateCardCustomFieldSelectedValues(param: CardCustomFieldSelectedValuesApiAddOrUpdateCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<InlineResponse20071 | void>;
    /**
     * Get the details of a selected value for a custom field for a card.
     * Get the details of a selected value for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldSelectedValue(param: CardCustomFieldSelectedValuesApiGetCardCustomFieldSelectedValueRequest, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card.
     * Get a list of the selected values for a custom field of type dropdown for a card
     * @param param the request object
     */
    getCardCustomFieldSelectedValues(param: CardCustomFieldSelectedValuesApiGetCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<InlineResponse200104>;
    /**
     * Remove a selected value for a custom field for a card.
     * Remove a selected value for a custom field for a card
     * @param param the request object
     */
    removeCardCustomFieldSelectedValues(param: CardCustomFieldSelectedValuesApiRemoveCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<void>;
}
export interface CardCustomFieldVotesApiDeleteMyCardCustomFieldVoteRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldVotesApideleteMyCardCustomFieldVote
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldVotesApideleteMyCardCustomFieldVote
     */
    field_id: number;
}
export interface CardCustomFieldVotesApiGetCardCustomFieldVotesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldVotesApigetCardCustomFieldVotes
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldVotesApigetCardCustomFieldVotes
     */
    field_id: number;
}
export interface CardCustomFieldVotesApiGetMyCardCustomFieldVoteRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldVotesApigetMyCardCustomFieldVote
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldVotesApigetMyCardCustomFieldVote
     */
    field_id: number;
}
export interface CardCustomFieldVotesApiSetMyCardCustomFieldVoteRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldVotesApisetMyCardCustomFieldVote
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldVotesApisetMyCardCustomFieldVote
     */
    field_id: number;
    /**
     *
     * @type InlineObject42
     * @memberof CardCustomFieldVotesApisetMyCardCustomFieldVote
     */
    InlineObject42?: InlineObject42;
}
export interface CardCustomFieldVotesApiUpdateMyCardCustomFieldVoteRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldVotesApiupdateMyCardCustomFieldVote
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldVotesApiupdateMyCardCustomFieldVote
     */
    field_id: number;
    /**
     *
     * @type InlineObject43
     * @memberof CardCustomFieldVotesApiupdateMyCardCustomFieldVote
     */
    InlineObject43?: InlineObject43;
}
export declare class ObjectCardCustomFieldVotesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldVotesApiRequestFactory, responseProcessor?: CardCustomFieldVotesApiResponseProcessor);
    /**
     * Delete your vote for a custom field for a card.
     * Delete your vote for a custom field for a card
     * @param param the request object
     */
    deleteMyCardCustomFieldVote(param: CardCustomFieldVotesApiDeleteMyCardCustomFieldVoteRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the votes for a custom field for a card.
     * Get a list of the votes for a custom field for a card
     * @param param the request object
     */
    getCardCustomFieldVotes(param: CardCustomFieldVotesApiGetCardCustomFieldVotesRequest, options?: Configuration): Promise<InlineResponse200105>;
    /**
     * Get your vote for a custom field for a card.
     * Get your vote for a custom field for a card
     * @param param the request object
     */
    getMyCardCustomFieldVote(param: CardCustomFieldVotesApiGetMyCardCustomFieldVoteRequest, options?: Configuration): Promise<InlineResponse200106>;
    /**
     * Set your vote for a custom field for a card.
     * Set your vote for a custom field for a card
     * @param param the request object
     */
    setMyCardCustomFieldVote(param: CardCustomFieldVotesApiSetMyCardCustomFieldVoteRequest, options?: Configuration): Promise<void>;
    /**
     * Update your vote for a custom field for a card.
     * Update your vote for a custom field for a card
     * @param param the request object
     */
    updateMyCardCustomFieldVote(param: CardCustomFieldVotesApiUpdateMyCardCustomFieldVoteRequest, options?: Configuration): Promise<InlineResponse200107>;
}
export interface CardCustomFieldsApiAddCardCustomFieldRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldsApiaddCardCustomField
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldsApiaddCardCustomField
     */
    field_id: number;
    /**
     *
     * @type CardCustomFieldAddOrUpdateRequest
     * @memberof CardCustomFieldsApiaddCardCustomField
     */
    CardCustomFieldAddOrUpdateRequest?: CardCustomFieldAddOrUpdateRequest;
}
export interface CardCustomFieldsApiRemoveCardCustomFieldRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardCustomFieldsApiremoveCardCustomField
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardCustomFieldsApiremoveCardCustomField
     */
    field_id: number;
}
export declare class ObjectCardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldsApiRequestFactory, responseProcessor?: CardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card.
     * Add a custom field to a card
     * @param param the request object
     */
    addCardCustomField(param: CardCustomFieldsApiAddCardCustomFieldRequest, options?: Configuration): Promise<void>;
    /**
     * Remove a custom field from a card.
     * Remove a custom field from a card
     * @param param the request object
     */
    removeCardCustomField(param: CardCustomFieldsApiRemoveCardCustomFieldRequest, options?: Configuration): Promise<void>;
}
export interface CardOutcomeCheckpointsApiAddCardOutcomeCheckpointRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCheckpointsApiaddCardOutcomeCheckpoint
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCheckpointsApiaddCardOutcomeCheckpoint
     */
    outcome_id: number;
    /**
     *
     * @type CardOutcomeCheckpointCreateRequest
     * @memberof CardOutcomeCheckpointsApiaddCardOutcomeCheckpoint
     */
    CardOutcomeCheckpointCreateRequest?: CardOutcomeCheckpointCreateRequest;
}
export interface CardOutcomeCheckpointsApiDeleteCardOutcomeCheckpointRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCheckpointsApideleteCardOutcomeCheckpoint
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCheckpointsApideleteCardOutcomeCheckpoint
     */
    outcome_id: number;
    /**
     * A checkpoint id.
     * @type number
     * @memberof CardOutcomeCheckpointsApideleteCardOutcomeCheckpoint
     */
    checkpoint_id: number;
}
export interface CardOutcomeCheckpointsApiGetCardOutcomeCheckpointRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCheckpointsApigetCardOutcomeCheckpoint
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCheckpointsApigetCardOutcomeCheckpoint
     */
    outcome_id: number;
    /**
     * A checkpoint id.
     * @type number
     * @memberof CardOutcomeCheckpointsApigetCardOutcomeCheckpoint
     */
    checkpoint_id: number;
}
export interface CardOutcomeCheckpointsApiGetCardOutcomeCheckpointsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCheckpointsApigetCardOutcomeCheckpoints
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCheckpointsApigetCardOutcomeCheckpoints
     */
    outcome_id: number;
}
export interface CardOutcomeCheckpointsApiUpdateCardOutcomeCheckpointRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCheckpointsApiupdateCardOutcomeCheckpoint
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCheckpointsApiupdateCardOutcomeCheckpoint
     */
    outcome_id: number;
    /**
     * A checkpoint id.
     * @type number
     * @memberof CardOutcomeCheckpointsApiupdateCardOutcomeCheckpoint
     */
    checkpoint_id: number;
    /**
     *
     * @type CardOutcomeCheckpointUpdateRequest
     * @memberof CardOutcomeCheckpointsApiupdateCardOutcomeCheckpoint
     */
    CardOutcomeCheckpointUpdateRequest?: CardOutcomeCheckpointUpdateRequest;
}
export declare class ObjectCardOutcomeCheckpointsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCheckpointsApiRequestFactory, responseProcessor?: CardOutcomeCheckpointsApiResponseProcessor);
    /**
     * Add a card outcome's checkpoint.
     * Add a card outcome's checkpoint
     * @param param the request object
     */
    addCardOutcomeCheckpoint(param: CardOutcomeCheckpointsApiAddCardOutcomeCheckpointRequest, options?: Configuration): Promise<InlineResponse200113>;
    /**
     * Delete a checkpoint for a card outcome.
     * Delete a checkpoint for a card outcome
     * @param param the request object
     */
    deleteCardOutcomeCheckpoint(param: CardOutcomeCheckpointsApiDeleteCardOutcomeCheckpointRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a checkpoint for a card outcome.
     * Get the details of a checkpoint for a card outcome
     * @param param the request object
     */
    getCardOutcomeCheckpoint(param: CardOutcomeCheckpointsApiGetCardOutcomeCheckpointRequest, options?: Configuration): Promise<void | InlineResponse200113>;
    /**
     * Get a card outcome's checkpoints.
     * Get a card outcome's checkpoints
     * @param param the request object
     */
    getCardOutcomeCheckpoints(param: CardOutcomeCheckpointsApiGetCardOutcomeCheckpointsRequest, options?: Configuration): Promise<InlineResponse200112>;
    /**
     * Update the details of a checkpoint for a card outcome.
     * Update the details of a checkpoint for a card outcome
     * @param param the request object
     */
    updateCardOutcomeCheckpoint(param: CardOutcomeCheckpointsApiUpdateCardOutcomeCheckpointRequest, options?: Configuration): Promise<InlineResponse200113>;
}
export interface CardOutcomeCurrentValueApiGetCardOutcomeCurrentValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeCurrentValueApigetCardOutcomeCurrentValue
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeCurrentValueApigetCardOutcomeCurrentValue
     */
    outcome_id: number;
}
export declare class ObjectCardOutcomeCurrentValueApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCurrentValueApiRequestFactory, responseProcessor?: CardOutcomeCurrentValueApiResponseProcessor);
    /**
     * Get the details of a current value for a card outcome.
     * Get the details of a current value for a card outcome
     * @param param the request object
     */
    getCardOutcomeCurrentValue(param: CardOutcomeCurrentValueApiGetCardOutcomeCurrentValueRequest, options?: Configuration): Promise<InlineResponse200114>;
}
export interface CardOutcomeValuesApiAddCardOutcomeValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeValuesApiaddCardOutcomeValue
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeValuesApiaddCardOutcomeValue
     */
    outcome_id: number;
    /**
     *
     * @type CardOutcomeValueCreateRequest
     * @memberof CardOutcomeValuesApiaddCardOutcomeValue
     */
    CardOutcomeValueCreateRequest?: CardOutcomeValueCreateRequest;
}
export interface CardOutcomeValuesApiDeleteCardOutcomeValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeValuesApideleteCardOutcomeValue
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeValuesApideleteCardOutcomeValue
     */
    outcome_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardOutcomeValuesApideleteCardOutcomeValue
     */
    value_id: number;
}
export interface CardOutcomeValuesApiGetCardOutcomeValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeValuesApigetCardOutcomeValue
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeValuesApigetCardOutcomeValue
     */
    outcome_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardOutcomeValuesApigetCardOutcomeValue
     */
    value_id: number;
}
export interface CardOutcomeValuesApiGetCardOutcomeValuesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeValuesApigetCardOutcomeValues
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeValuesApigetCardOutcomeValues
     */
    outcome_id: number;
}
export interface CardOutcomeValuesApiUpdateCardOutcomeValueRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomeValuesApiupdateCardOutcomeValue
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomeValuesApiupdateCardOutcomeValue
     */
    outcome_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardOutcomeValuesApiupdateCardOutcomeValue
     */
    value_id: number;
    /**
     *
     * @type CardOutcomeValueUpdateRequest
     * @memberof CardOutcomeValuesApiupdateCardOutcomeValue
     */
    CardOutcomeValueUpdateRequest?: CardOutcomeValueUpdateRequest;
}
export declare class ObjectCardOutcomeValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeValuesApiRequestFactory, responseProcessor?: CardOutcomeValuesApiResponseProcessor);
    /**
     * Add a card outcome's value.
     * Add a card outcome's value
     * @param param the request object
     */
    addCardOutcomeValue(param: CardOutcomeValuesApiAddCardOutcomeValueRequest, options?: Configuration): Promise<InlineResponse200114>;
    /**
     * Delete a value for a card outcome.
     * Delete a value for a card outcome
     * @param param the request object
     */
    deleteCardOutcomeValue(param: CardOutcomeValuesApiDeleteCardOutcomeValueRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a value for a card outcome.
     * Get the details of a value for a card outcome
     * @param param the request object
     */
    getCardOutcomeValue(param: CardOutcomeValuesApiGetCardOutcomeValueRequest, options?: Configuration): Promise<void | InlineResponse200115>;
    /**
     * Get a card outcome's values.
     * Get a card outcome's values
     * @param param the request object
     */
    getCardOutcomeValues(param: CardOutcomeValuesApiGetCardOutcomeValuesRequest, options?: Configuration): Promise<InlineResponse200114>;
    /**
     * Update the details of a value for a card outcome.
     * Update the details of a value for a card outcome
     * @param param the request object
     */
    updateCardOutcomeValue(param: CardOutcomeValuesApiUpdateCardOutcomeValueRequest, options?: Configuration): Promise<InlineResponse200115>;
}
export interface CardOutcomesApiAddCardOutcomeRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomesApiaddCardOutcome
     */
    card_id: number;
    /**
     *
     * @type CardOutcomeCreateRequest
     * @memberof CardOutcomesApiaddCardOutcome
     */
    CardOutcomeCreateRequest?: CardOutcomeCreateRequest;
}
export interface CardOutcomesApiDeleteCardOutcomeRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomesApideleteCardOutcome
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomesApideleteCardOutcome
     */
    outcome_id: number;
}
export interface CardOutcomesApiGetCardOutcomeRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomesApigetCardOutcome
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomesApigetCardOutcome
     */
    outcome_id: number;
}
export interface CardOutcomesApiGetCardOutcomesRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomesApigetCardOutcomes
     */
    card_id: number;
}
export interface CardOutcomesApiUpdateCardOutcomeRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardOutcomesApiupdateCardOutcome
     */
    card_id: number;
    /**
     * An outcome id.
     * @type number
     * @memberof CardOutcomesApiupdateCardOutcome
     */
    outcome_id: number;
    /**
     *
     * @type CardOutcomeUpdateRequest
     * @memberof CardOutcomesApiupdateCardOutcome
     */
    CardOutcomeUpdateRequest?: CardOutcomeUpdateRequest;
}
export declare class ObjectCardOutcomesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomesApiRequestFactory, responseProcessor?: CardOutcomesApiResponseProcessor);
    /**
     * Add an outcome to a card.
     * Add an outcome to a card
     * @param param the request object
     */
    addCardOutcome(param: CardOutcomesApiAddCardOutcomeRequest, options?: Configuration): Promise<InlineResponse200110>;
    /**
     * Delete an outcome for a card.
     * Delete an outcome for a card
     * @param param the request object
     */
    deleteCardOutcome(param: CardOutcomesApiDeleteCardOutcomeRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an outcome for a card.
     * Get the details of an outcome for a card
     * @param param the request object
     */
    getCardOutcome(param: CardOutcomesApiGetCardOutcomeRequest, options?: Configuration): Promise<InlineResponse200111>;
    /**
     * Get a card's outcomes.
     * Get a card's outcomes
     * @param param the request object
     */
    getCardOutcomes(param: CardOutcomesApiGetCardOutcomesRequest, options?: Configuration): Promise<InlineResponse200109>;
    /**
     * Update the details of an outcome for a card.
     * Update the details of an outcome for a card
     * @param param the request object
     */
    updateCardOutcome(param: CardOutcomesApiUpdateCardOutcomeRequest, options?: Configuration): Promise<void | InlineResponse200111>;
}
export interface CardRevisionsApiGetCardRevisionRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardRevisionsApigetCardRevision
     */
    card_id: number;
    /**
     * A revision number.
     * @type number
     * @memberof CardRevisionsApigetCardRevision
     */
    revision: number;
}
export interface CardRevisionsApiGetCardRevisionsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardRevisionsApigetCardRevisions
     */
    card_id: number;
}
export declare class ObjectCardRevisionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardRevisionsApiRequestFactory, responseProcessor?: CardRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the card.
     * Get a specific revision of the card
     * @param param the request object
     */
    getCardRevision(param: CardRevisionsApiGetCardRevisionRequest, options?: Configuration): Promise<InlineResponse200121>;
    /**
     * Get a list of the revisions of the card and the date and time they were replaced.
     * Get a list of revisions of the card
     * @param param the request object
     */
    getCardRevisions(param: CardRevisionsApiGetCardRevisionsRequest, options?: Configuration): Promise<InlineResponse200120>;
}
export interface CardStickersApiAddCardStickerRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardStickersApiaddCardSticker
     */
    card_id: number;
    /**
     *
     * @type InlineObject47
     * @memberof CardStickersApiaddCardSticker
     */
    InlineObject47?: InlineObject47;
}
export interface CardStickersApiGetCardStickersRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardStickersApigetCardStickers
     */
    card_id: number;
}
export interface CardStickersApiRemoveCardStickerRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardStickersApiremoveCardSticker
     */
    card_id: number;
    /**
     * A relationship id.
     * @type number
     * @memberof CardStickersApiremoveCardSticker
     */
    id: number;
}
export declare class ObjectCardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardStickersApiRequestFactory, responseProcessor?: CardStickersApiResponseProcessor);
    /**
     * Add a sticker to a card.
     * Add a sticker to a card
     * @param param the request object
     */
    addCardSticker(param: CardStickersApiAddCardStickerRequest, options?: Configuration): Promise<void | InlineResponse200123>;
    /**
     * Get a list of the stickers added to a card. The stickers are listed in the order in which they were added.
     * Get a list of card stickers
     * @param param the request object
     */
    getCardStickers(param: CardStickersApiGetCardStickersRequest, options?: Configuration): Promise<InlineResponse200122>;
    /**
     * Remove a sticker from a card.
     * Remove a sticker from a card
     * @param param the request object
     */
    removeCardSticker(param: CardStickersApiRemoveCardStickerRequest, options?: Configuration): Promise<void>;
}
export interface CardSubtaskAttachmentsApiAddCarSubtaskAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtaskAttachmentsApiaddCarSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtaskAttachmentsApiaddCarSubtaskAttachment
     */
    subtask_id: number;
    /**
     *
     * @type CardAttachmentCreateRequest
     * @memberof CardSubtaskAttachmentsApiaddCarSubtaskAttachment
     */
    CardAttachmentCreateRequest?: CardAttachmentCreateRequest;
}
export interface CardSubtaskAttachmentsApiDeleteCardSubtaskAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtaskAttachmentsApideleteCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtaskAttachmentsApideleteCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardSubtaskAttachmentsApideleteCardSubtaskAttachment
     */
    attachment_id: number;
}
export interface CardSubtaskAttachmentsApiGetCardSubtaskAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtaskAttachmentsApigetCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtaskAttachmentsApigetCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardSubtaskAttachmentsApigetCardSubtaskAttachment
     */
    attachment_id: number;
}
export interface CardSubtaskAttachmentsApiGetCardSubtaskAttachmentsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtaskAttachmentsApigetCardSubtaskAttachments
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtaskAttachmentsApigetCardSubtaskAttachments
     */
    subtask_id: number;
}
export interface CardSubtaskAttachmentsApiUpdateCardSubtaskAttachmentRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtaskAttachmentsApiupdateCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtaskAttachmentsApiupdateCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardSubtaskAttachmentsApiupdateCardSubtaskAttachment
     */
    attachment_id: number;
    /**
     *
     * @type CardAttachmentUpdateRequest
     * @memberof CardSubtaskAttachmentsApiupdateCardSubtaskAttachment
     */
    CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest;
}
export declare class ObjectCardSubtaskAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add a card subtask's attachment.
     * Add a card subtask's attachment
     * @param param the request object
     */
    addCarSubtaskAttachment(param: CardSubtaskAttachmentsApiAddCarSubtaskAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment for a card subtask.
     * Delete an attachment for a card subtask
     * @param param the request object
     */
    deleteCardSubtaskAttachment(param: CardSubtaskAttachmentsApiDeleteCardSubtaskAttachmentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card subtask.
     * Get the details of an attachment for a card subtask
     * @param param the request object
     */
    getCardSubtaskAttachment(param: CardSubtaskAttachmentsApiGetCardSubtaskAttachmentRequest, options?: Configuration): Promise<void | InlineResponse20062>;
    /**
     * Get a card subtask's attachments.
     * Get a card subtask's attachments
     * @param param the request object
     */
    getCardSubtaskAttachments(param: CardSubtaskAttachmentsApiGetCardSubtaskAttachmentsRequest, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card subtask.
     * Update the details of an attachment for a card subtask
     * @param param the request object
     */
    updateCardSubtaskAttachment(param: CardSubtaskAttachmentsApiUpdateCardSubtaskAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export interface CardSubtasksApiAddCardSubtaskRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtasksApiaddCardSubtask
     */
    card_id: number;
    /**
     *
     * @type SubtaskCreateRequest
     * @memberof CardSubtasksApiaddCardSubtask
     */
    SubtaskCreateRequest?: SubtaskCreateRequest;
}
export interface CardSubtasksApiDeleteCardSubtaskRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtasksApideleteCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtasksApideleteCardSubtask
     */
    subtask_id: number;
}
export interface CardSubtasksApiGetCardSubtaskRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtasksApigetCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtasksApigetCardSubtask
     */
    subtask_id: number;
}
export interface CardSubtasksApiGetCardSubtasksRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtasksApigetCardSubtasks
     */
    card_id: number;
}
export interface CardSubtasksApiUpdateCardSubtaskRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardSubtasksApiupdateCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardSubtasksApiupdateCardSubtask
     */
    subtask_id: number;
    /**
     *
     * @type SubtaskUpdateRequest
     * @memberof CardSubtasksApiupdateCardSubtask
     */
    SubtaskUpdateRequest?: SubtaskUpdateRequest;
}
export declare class ObjectCardSubtasksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardSubtasksApiRequestFactory, responseProcessor?: CardSubtasksApiResponseProcessor);
    /**
     * Add a subtask to a card.
     * Add a subtask to a card
     * @param param the request object
     */
    addCardSubtask(param: CardSubtasksApiAddCardSubtaskRequest, options?: Configuration): Promise<InlineResponse200125>;
    /**
     * Delete a subtask for a card.
     * Delete a subtask for a card
     * @param param the request object
     */
    deleteCardSubtask(param: CardSubtasksApiDeleteCardSubtaskRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a subtask for a card.
     * Get the details of a subtask for a card
     * @param param the request object
     */
    getCardSubtask(param: CardSubtasksApiGetCardSubtaskRequest, options?: Configuration): Promise<InlineResponse200125>;
    /**
     * Get a card's subtasks.
     * Get a card's subtasks
     * @param param the request object
     */
    getCardSubtasks(param: CardSubtasksApiGetCardSubtasksRequest, options?: Configuration): Promise<InlineResponse200124>;
    /**
     * Update the details of a subtask for a card.
     * Update the details of a subtask for a card
     * @param param the request object
     */
    updateCardSubtask(param: CardSubtasksApiUpdateCardSubtaskRequest, options?: Configuration): Promise<void | InlineResponse200125>;
}
export interface CardTagsApiAddCardTagRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardTagsApiaddCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTagsApiaddCardTag
     */
    tag_id: number;
}
export interface CardTagsApiCheckCardTagRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardTagsApicheckCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTagsApicheckCardTag
     */
    tag_id: number;
}
export interface CardTagsApiGetCardTagsRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardTagsApigetCardTags
     */
    card_id: number;
}
export interface CardTagsApiRemoveCardTagRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardTagsApiremoveCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTagsApiremoveCardTag
     */
    tag_id: number;
}
export declare class ObjectCardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTagsApiRequestFactory, responseProcessor?: CardTagsApiResponseProcessor);
    /**
     * Add a tag to a card.
     * Add a tag to a card
     * @param param the request object
     */
    addCardTag(param: CardTagsApiAddCardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is added to a card.
     * Check if a tag is added to a card
     * @param param the request object
     */
    checkCardTag(param: CardTagsApiCheckCardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the tags added to a card. The tags are listed in the order in which they were added.
     * Get a list of card tags
     * @param param the request object
     */
    getCardTags(param: CardTagsApiGetCardTagsRequest, options?: Configuration): Promise<InlineResponse200127>;
    /**
     * Remove a tag from a card.
     * Remove a tag from a card
     * @param param the request object
     */
    removeCardTag(param: CardTagsApiRemoveCardTagRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardAttachmentsApiAddCardTemplateCardAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApiaddCardTemplateCardAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApiaddCardTemplateCardAttachment
     */
    card_id: number;
    /**
     *
     * @type CardTemplateAttachmentCreateRequest
     * @memberof CardTemplateCardAttachmentsApiaddCardTemplateCardAttachment
     */
    CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest;
}
export interface CardTemplateCardAttachmentsApiDeleteCardTemplateCardAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApideleteCardTemplateCardAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApideleteCardTemplateCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApideleteCardTemplateCardAttachment
     */
    attachment_id: number;
}
export interface CardTemplateCardAttachmentsApiGetCardTemplateCardAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApigetCardTemplateCardAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApigetCardTemplateCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApigetCardTemplateCardAttachment
     */
    attachment_id: number;
}
export interface CardTemplateCardAttachmentsApiGetCardTemplateCardAttachmentsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApigetCardTemplateCardAttachments
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApigetCardTemplateCardAttachments
     */
    card_id: number;
}
export interface CardTemplateCardAttachmentsApiUpdateCardTemplateCardAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApiupdateCardTemplateCardAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApiupdateCardTemplateCardAttachment
     */
    card_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardAttachmentsApiupdateCardTemplateCardAttachment
     */
    attachment_id: number;
    /**
     *
     * @type CardTemplateAttachmentUpdateRequest
     * @memberof CardTemplateCardAttachmentsApiupdateCardTemplateCardAttachment
     */
    CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest;
}
export declare class ObjectCardTemplateCardAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a card for the card template.
     * Add an attachment of a card for the card template
     * @param param the request object
     */
    addCardTemplateCardAttachment(param: CardTemplateCardAttachmentsApiAddCardTemplateCardAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment of a card for the card template.
     * Delete an attachment of a card for the card template
     * @param param the request object
     */
    deleteCardTemplateCardAttachment(param: CardTemplateCardAttachmentsApiDeleteCardTemplateCardAttachmentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment of a card for the card template.
     * Get the details of an attachment of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardAttachment(param: CardTemplateCardAttachmentsApiGetCardTemplateCardAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a list of attachments of a card for the card template.
     * Get a list of attachments of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardAttachments(param: CardTemplateCardAttachmentsApiGetCardTemplateCardAttachmentsRequest, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment of a card for the card template.
     * Update the details of an attachment of a card for the card template
     * @param param the request object
     */
    updateCardTemplateCardAttachment(param: CardTemplateCardAttachmentsApiUpdateCardTemplateCardAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export interface CardTemplateCardChildCardsApiAddCardTemplateCardChildCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiaddCardTemplateCardChildCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiaddCardTemplateCardChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiaddCardTemplateCardChildCard
     */
    child_card_id: number;
    /**
     *
     * @type InlineObject26
     * @memberof CardTemplateCardChildCardsApiaddCardTemplateCardChildCard
     */
    InlineObject26?: InlineObject26;
}
export interface CardTemplateCardChildCardsApiCheckCardTemplateCardChildCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardChildCardsApicheckCardTemplateCardChildCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApicheckCardTemplateCardChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApicheckCardTemplateCardChildCard
     */
    child_card_id: number;
}
export interface CardTemplateCardChildCardsApiGetCardTemplateCardChildCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardChildCardsApigetCardTemplateCardChildCards
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApigetCardTemplateCardChildCards
     */
    card_id: number;
}
export interface CardTemplateCardChildCardsApiRemoveCardTemplateCardChildCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiremoveCardTemplateCardChildCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiremoveCardTemplateCardChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof CardTemplateCardChildCardsApiremoveCardTemplateCardChildCard
     */
    child_card_id: number;
}
export declare class ObjectCardTemplateCardChildCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardChildCardsApiRequestFactory, responseProcessor?: CardTemplateCardChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card for the card template.
     * Make a card a child of a given card for the card template
     * @param param the request object
     */
    addCardTemplateCardChildCard(param: CardTemplateCardChildCardsApiAddCardTemplateCardChildCardRequest, options?: Configuration): Promise<InlineResponse20065>;
    /**
     * Check if a card is a child of a given card for the card template and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card for the card template
     * @param param the request object
     */
    checkCardTemplateCardChildCard(param: CardTemplateCardChildCardsApiCheckCardTemplateCardChildCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of child cards of a card for the card template.
     * Get a list of child cards of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardChildCards(param: CardTemplateCardChildCardsApiGetCardTemplateCardChildCardsRequest, options?: Configuration): Promise<InlineResponse20063>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param param the request object
     */
    removeCardTemplateCardChildCard(param: CardTemplateCardChildCardsApiRemoveCardTemplateCardChildCardRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardCoOwnersApiAddCardTemplateCardCoOwnerRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiaddCardTemplateCardCoOwner
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiaddCardTemplateCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiaddCardTemplateCardCoOwner
     */
    user_id: number;
}
export interface CardTemplateCardCoOwnersApiCheckCardTemplateCardCoOwnerRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApicheckCardTemplateCardCoOwner
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApicheckCardTemplateCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApicheckCardTemplateCardCoOwner
     */
    user_id: number;
}
export interface CardTemplateCardCoOwnersApiGetCardTemplateCardCoOwnersRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApigetCardTemplateCardCoOwners
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApigetCardTemplateCardCoOwners
     */
    card_id: number;
}
export interface CardTemplateCardCoOwnersApiRemoveCardTemplateCardCoOwnerRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiremoveCardTemplateCardCoOwner
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiremoveCardTemplateCardCoOwner
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCoOwnersApiremoveCardTemplateCardCoOwner
     */
    user_id: number;
}
export declare class ObjectCardTemplateCardCoOwnersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCoOwnersApiRequestFactory, responseProcessor?: CardTemplateCardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card for the card template.
     * Add a user as a co-owner for a card for the card template
     * @param param the request object
     */
    addCardTemplateCardCoOwner(param: CardTemplateCardCoOwnersApiAddCardTemplateCardCoOwnerRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a co-owner is one for the card for the card template.
     * Check if a co-owner is one for the card for the card template
     * @param param the request object
     */
    checkCardTemplateCardCoOwner(param: CardTemplateCardCoOwnersApiCheckCardTemplateCardCoOwnerRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of co-owners of a card for the card template.
     * Get a list of co-owners of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCoOwners(param: CardTemplateCardCoOwnersApiGetCardTemplateCardCoOwnersRequest, options?: Configuration): Promise<InlineResponse20066>;
    /**
     * Remove a user as a co-owner for the card for the card template.
     * Remove a user as a co-owner for the card for the card template
     * @param param the request object
     */
    removeCardTemplateCardCoOwner(param: CardTemplateCardCoOwnersApiRemoveCardTemplateCardCoOwnerRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardCustomFieldContributorsApiAddCardTemplateCardCustomFieldContributorRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiaddCardTemplateCardCustomFieldContributor
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiaddCardTemplateCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiaddCardTemplateCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiaddCardTemplateCardCustomFieldContributor
     */
    user_id: number;
}
export interface CardTemplateCardCustomFieldContributorsApiCheckCardTemplateCardCustomFieldContributorRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApicheckCardTemplateCardCustomFieldContributor
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApicheckCardTemplateCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApicheckCardTemplateCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApicheckCardTemplateCardCustomFieldContributor
     */
    user_id: number;
}
export interface CardTemplateCardCustomFieldContributorsApiGetCardTemplateCardCustomFieldContributorsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApigetCardTemplateCardCustomFieldContributors
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApigetCardTemplateCardCustomFieldContributors
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApigetCardTemplateCardCustomFieldContributors
     */
    field_id: number;
}
export interface CardTemplateCardCustomFieldContributorsApiRemoveCardTemplateCardCustomFieldContributorRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiremoveCardTemplateCardCustomFieldContributor
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiremoveCardTemplateCardCustomFieldContributor
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiremoveCardTemplateCardCustomFieldContributor
     */
    field_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardCustomFieldContributorsApiremoveCardTemplateCardCustomFieldContributor
     */
    user_id: number;
}
export declare class ObjectCardTemplateCardCustomFieldContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card for the card template.
     * Add a user as a contributor for a custom field for a card for the card template
     * @param param the request object
     */
    addCardTemplateCardCustomFieldContributor(param: CardTemplateCardCustomFieldContributorsApiAddCardTemplateCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a contributor for a custom field for a card for the card template.
     * Check if a user is a contributor for a custom field for a card for the card template
     * @param param the request object
     */
    checkCardTemplateCardCustomFieldContributor(param: CardTemplateCardCustomFieldContributorsApiCheckCardTemplateCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a card for the card template.
     * Get a list of the default contributors for a custom field for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCustomFieldContributors(param: CardTemplateCardCustomFieldContributorsApiGetCardTemplateCardCustomFieldContributorsRequest, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card  for the card template.
     * Remove a user as a contributor for a custom field for a card for the card template
     * @param param the request object
     */
    removeCardTemplateCardCustomFieldContributor(param: CardTemplateCardCustomFieldContributorsApiRemoveCardTemplateCardCustomFieldContributorRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardCustomFieldFilesApiAddCardTemplateCardCustomFieldFileRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiaddCardTemplateCardCustomFieldFile
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiaddCardTemplateCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiaddCardTemplateCardCustomFieldFile
     */
    field_id: number;
    /**
     *
     * @type CardTemplateCustomFieldFileCreateRequest
     * @memberof CardTemplateCardCustomFieldFilesApiaddCardTemplateCardCustomFieldFile
     */
    CardTemplateCustomFieldFileCreateRequest?: CardTemplateCustomFieldFileCreateRequest;
}
export interface CardTemplateCardCustomFieldFilesApiDeleteCardTemplateCardCustomFieldFileRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApideleteCardTemplateCardCustomFieldFile
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApideleteCardTemplateCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApideleteCardTemplateCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApideleteCardTemplateCardCustomFieldFile
     */
    id: number;
}
export interface CardTemplateCardCustomFieldFilesApiGetCardTemplateCardCustomFieldFileRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFile
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFile
     */
    id: number;
}
export interface CardTemplateCardCustomFieldFilesApiGetCardTemplateCardCustomFieldFilesRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFiles
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFiles
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApigetCardTemplateCardCustomFieldFiles
     */
    field_id: number;
}
export interface CardTemplateCardCustomFieldFilesApiUpdateCardTemplateCardCustomFieldFileRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiupdateCardTemplateCardCustomFieldFile
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiupdateCardTemplateCardCustomFieldFile
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiupdateCardTemplateCardCustomFieldFile
     */
    field_id: number;
    /**
     * A file id.
     * @type number
     * @memberof CardTemplateCardCustomFieldFilesApiupdateCardTemplateCardCustomFieldFile
     */
    id: number;
    /**
     *
     * @type CardTemplateCustomFieldFileUpdateRequest
     * @memberof CardTemplateCardCustomFieldFilesApiupdateCardTemplateCardCustomFieldFile
     */
    CardTemplateCustomFieldFileUpdateRequest?: CardTemplateCustomFieldFileUpdateRequest;
}
export declare class ObjectCardTemplateCardCustomFieldFilesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldFilesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card for the card template.
     * Add a file for a custom field for a card for the card template
     * @param param the request object
     */
    addCardTemplateCardCustomFieldFile(param: CardTemplateCardCustomFieldFilesApiAddCardTemplateCardCustomFieldFileRequest, options?: Configuration): Promise<InlineResponse20068>;
    /**
     * Delete a file for a custom field for a card for the card template.
     * Delete a file for a custom field for a card for the card template
     * @param param the request object
     */
    deleteCardTemplateCardCustomFieldFile(param: CardTemplateCardCustomFieldFilesApiDeleteCardTemplateCardCustomFieldFileRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single file for a custom field for a card for the card template.
     * Get the details of a single file for a custom field for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCustomFieldFile(param: CardTemplateCardCustomFieldFilesApiGetCardTemplateCardCustomFieldFileRequest, options?: Configuration): Promise<InlineResponse20068>;
    /**
     * Get a list of the files for a custom field for a card for the card template.
     * Get a list of the files for a custom field for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCustomFieldFiles(param: CardTemplateCardCustomFieldFilesApiGetCardTemplateCardCustomFieldFilesRequest, options?: Configuration): Promise<InlineResponse20067>;
    /**
     * Update a file for a custom field for a card for the card template.
     * Update a file for a custom field for a card for the card template
     * @param param the request object
     */
    updateCardTemplateCardCustomFieldFile(param: CardTemplateCardCustomFieldFilesApiUpdateCardTemplateCardCustomFieldFileRequest, options?: Configuration): Promise<InlineResponse20068>;
}
export interface CardTemplateCardCustomFieldSelectedValuesApiAddCardTemplateCardCustomFieldSelectedValuesRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddCardTemplateCardCustomFieldSelectedValues
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddCardTemplateCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddCardTemplateCardCustomFieldSelectedValues
     */
    field_id: number;
    /**
     *
     * @type CardTemplateCustomFieldSelectedValueAddOrUpdateRequest
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddCardTemplateCardCustomFieldSelectedValues
     */
    CardTemplateCustomFieldSelectedValueAddOrUpdateRequest?: CardTemplateCustomFieldSelectedValueAddOrUpdateRequest;
}
export interface CardTemplateCardCustomFieldSelectedValuesApiAddOrUpdateCardTemplateCardCustomFieldSelectedValuesRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddOrUpdateCardTemplateCardCustomFieldSelectedValues
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddOrUpdateCardTemplateCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddOrUpdateCardTemplateCardCustomFieldSelectedValues
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddOrUpdateCardTemplateCardCustomFieldSelectedValues
     */
    value_id: number;
    /**
     *
     * @type InlineObject27
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiaddOrUpdateCardTemplateCardCustomFieldSelectedValues
     */
    InlineObject27?: InlineObject27;
}
export interface CardTemplateCardCustomFieldSelectedValuesApiGetCardTemplateCardCustomFieldSelectedValueRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValue
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValue
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValue
     */
    value_id: number;
}
export interface CardTemplateCardCustomFieldSelectedValuesApiGetCardTemplateCardCustomFieldSelectedValuesRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValues
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApigetCardTemplateCardCustomFieldSelectedValues
     */
    field_id: number;
}
export interface CardTemplateCardCustomFieldSelectedValuesApiRemoveCardTemplateCardCustomFieldSelectedValuesRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiremoveCardTemplateCardCustomFieldSelectedValues
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiremoveCardTemplateCardCustomFieldSelectedValues
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiremoveCardTemplateCardCustomFieldSelectedValues
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CardTemplateCardCustomFieldSelectedValuesApiremoveCardTemplateCardCustomFieldSelectedValues
     */
    value_id: number;
}
export declare class ObjectCardTemplateCardCustomFieldSelectedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add a selected value for a custom field for a card for the card template
     * @param param the request object
     */
    addCardTemplateCardCustomFieldSelectedValues(param: CardTemplateCardCustomFieldSelectedValuesApiAddCardTemplateCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<InlineResponse20070>;
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add or update a selected value for a custom field for a card for the card template
     * @param param the request object
     */
    addOrUpdateCardTemplateCardCustomFieldSelectedValues(param: CardTemplateCardCustomFieldSelectedValuesApiAddOrUpdateCardTemplateCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get the details of a selected value for a custom field for a card for the card template.
     * Get the details of a selected value for a custom field for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCustomFieldSelectedValue(param: CardTemplateCardCustomFieldSelectedValuesApiGetCardTemplateCardCustomFieldSelectedValueRequest, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template.
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardCustomFieldSelectedValues(param: CardTemplateCardCustomFieldSelectedValuesApiGetCardTemplateCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<InlineResponse20069>;
    /**
     * Remove a selected value for a custom field for a card for the card template.
     * Remove a selected value for a custom field for a card for the card template
     * @param param the request object
     */
    removeCardTemplateCardCustomFieldSelectedValues(param: CardTemplateCardCustomFieldSelectedValuesApiRemoveCardTemplateCardCustomFieldSelectedValuesRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardCustomFieldsApiAddCardTemplateCardCustomFieldRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiaddCardTemplateCardCustomField
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiaddCardTemplateCardCustomField
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiaddCardTemplateCardCustomField
     */
    field_id: number;
    /**
     *
     * @type CardTemplateCustomFieldAddOrUpdateRequest
     * @memberof CardTemplateCardCustomFieldsApiaddCardTemplateCardCustomField
     */
    CardTemplateCustomFieldAddOrUpdateRequest?: CardTemplateCustomFieldAddOrUpdateRequest;
}
export interface CardTemplateCardCustomFieldsApiRemoveCardTemplateCardCustomFieldRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiremoveCardTemplateCardCustomField
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiremoveCardTemplateCardCustomField
     */
    card_id: number;
    /**
     * A custom field id.
     * @type number
     * @memberof CardTemplateCardCustomFieldsApiremoveCardTemplateCardCustomField
     */
    field_id: number;
}
export declare class ObjectCardTemplateCardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card for the card template.
     * Add a custom field to a card for the card template
     * @param param the request object
     */
    addCardTemplateCardCustomField(param: CardTemplateCardCustomFieldsApiAddCardTemplateCardCustomFieldRequest, options?: Configuration): Promise<void>;
    /**
     * Remove a custom field from a card for the card template.
     * Remove a custom field from a card for the card template
     * @param param the request object
     */
    removeCardTemplateCardCustomField(param: CardTemplateCardCustomFieldsApiRemoveCardTemplateCardCustomFieldRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardParentCardsApiAddCardTemplateCardParentCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiaddCardTemplateCardParentCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiaddCardTemplateCardParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiaddCardTemplateCardParentCard
     */
    parent_card_id: number;
    /**
     *
     * @type InlineObject28
     * @memberof CardTemplateCardParentCardsApiaddCardTemplateCardParentCard
     */
    InlineObject28?: InlineObject28;
}
export interface CardTemplateCardParentCardsApiCheckCardTemplateCardParentCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardParentCardsApicheckCardTemplateCardParentCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApicheckCardTemplateCardParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApicheckCardTemplateCardParentCard
     */
    parent_card_id: number;
}
export interface CardTemplateCardParentCardsApiGetCardTemplateCardParentCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardParentCardsApigetCardTemplateCardParentCards
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApigetCardTemplateCardParentCards
     */
    card_id: number;
}
export interface CardTemplateCardParentCardsApiRemoveCardTemplateCardParentCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiremoveCardTemplateCardParentCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiremoveCardTemplateCardParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof CardTemplateCardParentCardsApiremoveCardTemplateCardParentCard
     */
    parent_card_id: number;
}
export declare class ObjectCardTemplateCardParentCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardParentCardsApiRequestFactory, responseProcessor?: CardTemplateCardParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card for the card template.
     * Make a card a parent of a given card for the card template
     * @param param the request object
     */
    addCardTemplateCardParentCard(param: CardTemplateCardParentCardsApiAddCardTemplateCardParentCardRequest, options?: Configuration): Promise<InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card for the card template and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card for the card template
     * @param param the request object
     */
    checkCardTemplateCardParentCard(param: CardTemplateCardParentCardsApiCheckCardTemplateCardParentCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of parent cards of a card for the card template.
     * Get a list of parent cards of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardParentCards(param: CardTemplateCardParentCardsApiGetCardTemplateCardParentCardsRequest, options?: Configuration): Promise<InlineResponse20072>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param param the request object
     */
    removeCardTemplateCardParentCard(param: CardTemplateCardParentCardsApiRemoveCardTemplateCardParentCardRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardPredecessorCardsApiAddCardTemplateCardPredecessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiaddCardTemplateCardPredecessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiaddCardTemplateCardPredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiaddCardTemplateCardPredecessorCard
     */
    predecessor_card_id: number;
    /**
     *
     * @type InlineObject29
     * @memberof CardTemplateCardPredecessorCardsApiaddCardTemplateCardPredecessorCard
     */
    InlineObject29?: InlineObject29;
}
export interface CardTemplateCardPredecessorCardsApiCheckCardTemplateCardPredecessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApicheckCardTemplateCardPredecessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApicheckCardTemplateCardPredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApicheckCardTemplateCardPredecessorCard
     */
    predecessor_card_id: number;
}
export interface CardTemplateCardPredecessorCardsApiGetCardTemplateCardPredecessorCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApigetCardTemplateCardPredecessorCards
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApigetCardTemplateCardPredecessorCards
     */
    card_id: number;
}
export interface CardTemplateCardPredecessorCardsApiRemoveCardTemplateCardPredecessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiremoveCardTemplateCardPredecessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiremoveCardTemplateCardPredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof CardTemplateCardPredecessorCardsApiremoveCardTemplateCardPredecessorCard
     */
    predecessor_card_id: number;
}
export declare class ObjectCardTemplateCardPredecessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardPredecessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardPredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card for the card template.
     * Make a card a predecessor of a given card for the card template
     * @param param the request object
     */
    addCardTemplateCardPredecessorCard(param: CardTemplateCardPredecessorCardsApiAddCardTemplateCardPredecessorCardRequest, options?: Configuration): Promise<InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card for the card template and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card for the card template
     * @param param the request object
     */
    checkCardTemplateCardPredecessorCard(param: CardTemplateCardPredecessorCardsApiCheckCardTemplateCardPredecessorCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of predecessor cards of a card for the card template.
     * Get a list of predecessor cards of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardPredecessorCards(param: CardTemplateCardPredecessorCardsApiGetCardTemplateCardPredecessorCardsRequest, options?: Configuration): Promise<InlineResponse20074>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param param the request object
     */
    removeCardTemplateCardPredecessorCard(param: CardTemplateCardPredecessorCardsApiRemoveCardTemplateCardPredecessorCardRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardRelativeCardsApiAddCardTemplateCardRelatedCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiaddCardTemplateCardRelatedCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiaddCardTemplateCardRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiaddCardTemplateCardRelatedCard
     */
    related_card_id: number;
    /**
     *
     * @type InlineObject30
     * @memberof CardTemplateCardRelativeCardsApiaddCardTemplateCardRelatedCard
     */
    InlineObject30?: InlineObject30;
}
export interface CardTemplateCardRelativeCardsApiCheckCardTemplateCardRelatedCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApicheckCardTemplateCardRelatedCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApicheckCardTemplateCardRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApicheckCardTemplateCardRelatedCard
     */
    related_card_id: number;
}
export interface CardTemplateCardRelativeCardsApiGetCardTemplateCardRelativeCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApigetCardTemplateCardRelativeCards
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApigetCardTemplateCardRelativeCards
     */
    card_id: number;
}
export interface CardTemplateCardRelativeCardsApiRemoveCardTemplateCardRelatedCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiremoveCardTemplateCardRelatedCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiremoveCardTemplateCardRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof CardTemplateCardRelativeCardsApiremoveCardTemplateCardRelatedCard
     */
    related_card_id: number;
}
export declare class ObjectCardTemplateCardRelativeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardRelativeCardsApiRequestFactory, responseProcessor?: CardTemplateCardRelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card for the card template.
     * Make a card a relative of a given card for the card template
     * @param param the request object
     */
    addCardTemplateCardRelatedCard(param: CardTemplateCardRelativeCardsApiAddCardTemplateCardRelatedCardRequest, options?: Configuration): Promise<InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card for the card template and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card for the card template
     * @param param the request object
     */
    checkCardTemplateCardRelatedCard(param: CardTemplateCardRelativeCardsApiCheckCardTemplateCardRelatedCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of relative cards of a card for the card template.
     * Get a list of relative cards of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardRelativeCards(param: CardTemplateCardRelativeCardsApiGetCardTemplateCardRelativeCardsRequest, options?: Configuration): Promise<InlineResponse20076>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param param the request object
     */
    removeCardTemplateCardRelatedCard(param: CardTemplateCardRelativeCardsApiRemoveCardTemplateCardRelatedCardRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardStickersApiAddCardTemplateCardStickerRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardStickersApiaddCardTemplateCardSticker
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardStickersApiaddCardTemplateCardSticker
     */
    card_id: number;
    /**
     *
     * @type InlineObject31
     * @memberof CardTemplateCardStickersApiaddCardTemplateCardSticker
     */
    InlineObject31?: InlineObject31;
}
export interface CardTemplateCardStickersApiGetCardTemplateCardStickersRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardStickersApigetCardTemplateCardStickers
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardStickersApigetCardTemplateCardStickers
     */
    card_id: number;
}
export interface CardTemplateCardStickersApiRemoveCardTemplateCardStickerRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardStickersApiremoveCardTemplateCardSticker
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardStickersApiremoveCardTemplateCardSticker
     */
    card_id: number;
    /**
     * A sticker id.
     * @type number
     * @memberof CardTemplateCardStickersApiremoveCardTemplateCardSticker
     */
    sticker_id: number;
}
export declare class ObjectCardTemplateCardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardStickersApiRequestFactory, responseProcessor?: CardTemplateCardStickersApiResponseProcessor);
    /**
     * Add a sticker of a card for the card template.
     * Add a sticker of a card for the card template
     * @param param the request object
     */
    addCardTemplateCardSticker(param: CardTemplateCardStickersApiAddCardTemplateCardStickerRequest, options?: Configuration): Promise<InlineResponse20079>;
    /**
     * Get a list of stickers of a card for the card template. The stickers are listed in the order in which they were added.
     * Get a list of stickers of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardStickers(param: CardTemplateCardStickersApiGetCardTemplateCardStickersRequest, options?: Configuration): Promise<InlineResponse20078>;
    /**
     * Remove a sticker from a card for the card template.
     * Remove a sticker from a card for the card template
     * @param param the request object
     */
    removeCardTemplateCardSticker(param: CardTemplateCardStickersApiRemoveCardTemplateCardStickerRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardSubtaskAttachmentsApiAddCardTemplateCarSubtaskAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiaddCardTemplateCarSubtaskAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiaddCardTemplateCarSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiaddCardTemplateCarSubtaskAttachment
     */
    subtask_id: number;
    /**
     *
     * @type CardTemplateAttachmentCreateRequest
     * @memberof CardTemplateCardSubtaskAttachmentsApiaddCardTemplateCarSubtaskAttachment
     */
    CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest;
}
export interface CardTemplateCardSubtaskAttachmentsApiDeleteCardTemplateCardSubtaskAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApideleteCardTemplateCardSubtaskAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApideleteCardTemplateCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApideleteCardTemplateCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApideleteCardTemplateCardSubtaskAttachment
     */
    attachment_id: number;
}
export interface CardTemplateCardSubtaskAttachmentsApiGetCardTemplateCardSubtaskAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachment
     */
    attachment_id: number;
}
export interface CardTemplateCardSubtaskAttachmentsApiGetCardTemplateCardSubtaskAttachmentsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachments
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachments
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApigetCardTemplateCardSubtaskAttachments
     */
    subtask_id: number;
}
export interface CardTemplateCardSubtaskAttachmentsApiUpdateCardTemplateCardSubtaskAttachmentRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiupdateCardTemplateCardSubtaskAttachment
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiupdateCardTemplateCardSubtaskAttachment
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiupdateCardTemplateCardSubtaskAttachment
     */
    subtask_id: number;
    /**
     * A attachment id.
     * @type number
     * @memberof CardTemplateCardSubtaskAttachmentsApiupdateCardTemplateCardSubtaskAttachment
     */
    attachment_id: number;
    /**
     *
     * @type CardTemplateAttachmentUpdateRequest
     * @memberof CardTemplateCardSubtaskAttachmentsApiupdateCardTemplateCardSubtaskAttachment
     */
    CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest;
}
export declare class ObjectCardTemplateCardSubtaskAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a subtask of a card for the card template.
     * Add an attachment of a subtask of a card for the card template
     * @param param the request object
     */
    addCardTemplateCarSubtaskAttachment(param: CardTemplateCardSubtaskAttachmentsApiAddCardTemplateCarSubtaskAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment of a subtask for a card for the card template.
     * Delete an attachment of a subtask for a card for the card template
     * @param param the request object
     */
    deleteCardTemplateCardSubtaskAttachment(param: CardTemplateCardSubtaskAttachmentsApiDeleteCardTemplateCardSubtaskAttachmentRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment of a subtask for a card for the card template.
     * Get the details of an attachment of a subtask for a card for the card template
     * @param param the request object
     */
    getCardTemplateCardSubtaskAttachment(param: CardTemplateCardSubtaskAttachmentsApiGetCardTemplateCardSubtaskAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a list of attachments of a subtask of a card for the card template.
     * Get a list of attachments of a subtask of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardSubtaskAttachments(param: CardTemplateCardSubtaskAttachmentsApiGetCardTemplateCardSubtaskAttachmentsRequest, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment of a subtask for a card for the card template.
     * Update the details of an attachment of a subtask for a card for the card template
     * @param param the request object
     */
    updateCardTemplateCardSubtaskAttachment(param: CardTemplateCardSubtaskAttachmentsApiUpdateCardTemplateCardSubtaskAttachmentRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export interface CardTemplateCardSubtasksApiAddCardTemplateCardSubtaskRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtasksApiaddCardTemplateCardSubtask
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtasksApiaddCardTemplateCardSubtask
     */
    card_id: number;
    /**
     *
     * @type CardTemplateSubtaskCreateRequest
     * @memberof CardTemplateCardSubtasksApiaddCardTemplateCardSubtask
     */
    CardTemplateSubtaskCreateRequest?: CardTemplateSubtaskCreateRequest;
}
export interface CardTemplateCardSubtasksApiDeleteCardTemplateCardSubtaskRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtasksApideleteCardTemplateCardSubtask
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtasksApideleteCardTemplateCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtasksApideleteCardTemplateCardSubtask
     */
    subtask_id: number;
}
export interface CardTemplateCardSubtasksApiGetCardTemplateCardSubtaskRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtasksApigetCardTemplateCardSubtask
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtasksApigetCardTemplateCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtasksApigetCardTemplateCardSubtask
     */
    subtask_id: number;
}
export interface CardTemplateCardSubtasksApiGetCardTemplateCardSubtasksRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtasksApigetCardTemplateCardSubtasks
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtasksApigetCardTemplateCardSubtasks
     */
    card_id: number;
}
export interface CardTemplateCardSubtasksApiUpdateCardTemplateCardSubtaskRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSubtasksApiupdateCardTemplateCardSubtask
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSubtasksApiupdateCardTemplateCardSubtask
     */
    card_id: number;
    /**
     * A subtask id.
     * @type number
     * @memberof CardTemplateCardSubtasksApiupdateCardTemplateCardSubtask
     */
    subtask_id: number;
    /**
     *
     * @type CardTemplateSubtaskUpdateRequest
     * @memberof CardTemplateCardSubtasksApiupdateCardTemplateCardSubtask
     */
    CardTemplateSubtaskUpdateRequest?: CardTemplateSubtaskUpdateRequest;
}
export declare class ObjectCardTemplateCardSubtasksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtasksApiRequestFactory, responseProcessor?: CardTemplateCardSubtasksApiResponseProcessor);
    /**
     * Add a subtask of a card for the card template.
     * Add a subtask of a card for the card template
     * @param param the request object
     */
    addCardTemplateCardSubtask(param: CardTemplateCardSubtasksApiAddCardTemplateCardSubtaskRequest, options?: Configuration): Promise<InlineResponse20081>;
    /**
     * Delete a subtask for a card for the card template.
     * Delete a subtask for a card for the card template
     * @param param the request object
     */
    deleteCardTemplateCardSubtask(param: CardTemplateCardSubtasksApiDeleteCardTemplateCardSubtaskRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a subtask of a card for the card template.
     * Get the details of a subtask of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardSubtask(param: CardTemplateCardSubtasksApiGetCardTemplateCardSubtaskRequest, options?: Configuration): Promise<InlineResponse20081>;
    /**
     * Get a list of subtasks of a card for the card template.
     * Get a list of subtasks of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardSubtasks(param: CardTemplateCardSubtasksApiGetCardTemplateCardSubtasksRequest, options?: Configuration): Promise<InlineResponse20080>;
    /**
     * Update the details of a subtask of a card for the card template.
     * Update the details of a subtask of a card for the card template
     * @param param the request object
     */
    updateCardTemplateCardSubtask(param: CardTemplateCardSubtasksApiUpdateCardTemplateCardSubtaskRequest, options?: Configuration): Promise<InlineResponse20081>;
}
export interface CardTemplateCardSuccessorCardsApiAddCardTemplateCardSuccessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiaddCardTemplateCardSuccessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiaddCardTemplateCardSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiaddCardTemplateCardSuccessorCard
     */
    successor_card_id: number;
    /**
     *
     * @type InlineObject32
     * @memberof CardTemplateCardSuccessorCardsApiaddCardTemplateCardSuccessorCard
     */
    InlineObject32?: InlineObject32;
}
export interface CardTemplateCardSuccessorCardsApiCheckCardTemplateCardSuccessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApicheckCardTemplateCardSuccessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApicheckCardTemplateCardSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApicheckCardTemplateCardSuccessorCard
     */
    successor_card_id: number;
}
export interface CardTemplateCardSuccessorCardsApiGetCardTemplateCardSuccessorCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApigetCardTemplateCardSuccessorCards
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApigetCardTemplateCardSuccessorCards
     */
    card_id: number;
}
export interface CardTemplateCardSuccessorCardsApiRemoveCardTemplateCardSuccessorCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiremoveCardTemplateCardSuccessorCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiremoveCardTemplateCardSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof CardTemplateCardSuccessorCardsApiremoveCardTemplateCardSuccessorCard
     */
    successor_card_id: number;
}
export declare class ObjectCardTemplateCardSuccessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSuccessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardSuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card for the card template.
     * Make a card a successor of a given card for the card template
     * @param param the request object
     */
    addCardTemplateCardSuccessorCard(param: CardTemplateCardSuccessorCardsApiAddCardTemplateCardSuccessorCardRequest, options?: Configuration): Promise<InlineResponse20083>;
    /**
     * Check if a card is a successor of a given card for the card template and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card for the card template
     * @param param the request object
     */
    checkCardTemplateCardSuccessorCard(param: CardTemplateCardSuccessorCardsApiCheckCardTemplateCardSuccessorCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of successor cards of a card for the card template.
     * Get a list of successor cards of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardSuccessorCards(param: CardTemplateCardSuccessorCardsApiGetCardTemplateCardSuccessorCardsRequest, options?: Configuration): Promise<InlineResponse20082>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param param the request object
     */
    removeCardTemplateCardSuccessorCard(param: CardTemplateCardSuccessorCardsApiRemoveCardTemplateCardSuccessorCardRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardTagsApiAddCardTemplateCardTagRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardTagsApiaddCardTemplateCardTag
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardTagsApiaddCardTemplateCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTemplateCardTagsApiaddCardTemplateCardTag
     */
    tag_id: number;
}
export interface CardTemplateCardTagsApiCheckCardTemplateCardTagRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardTagsApicheckCardTemplateCardTag
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardTagsApicheckCardTemplateCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTemplateCardTagsApicheckCardTemplateCardTag
     */
    tag_id: number;
}
export interface CardTemplateCardTagsApiGetCardTemplateCardTagsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardTagsApigetCardTemplateCardTags
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardTagsApigetCardTemplateCardTags
     */
    card_id: number;
}
export interface CardTemplateCardTagsApiRemoveCardTemplateCardTagRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardTagsApiremoveCardTemplateCardTag
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardTagsApiremoveCardTemplateCardTag
     */
    card_id: number;
    /**
     * A tag id.
     * @type number
     * @memberof CardTemplateCardTagsApiremoveCardTemplateCardTag
     */
    tag_id: number;
}
export declare class ObjectCardTemplateCardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardTagsApiRequestFactory, responseProcessor?: CardTemplateCardTagsApiResponseProcessor);
    /**
     * Add a tag to a card for the card template.
     * Add a tag to a card for the card template
     * @param param the request object
     */
    addCardTemplateCardTag(param: CardTemplateCardTagsApiAddCardTemplateCardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is added to a card for the card template.
     * Check if a tag is added to a card for the card template
     * @param param the request object
     */
    checkCardTemplateCardTag(param: CardTemplateCardTagsApiCheckCardTemplateCardTagRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of tags of a card for the card template. The tags are listed in the order in which they were added.
     * Get a list of tags of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardTags(param: CardTemplateCardTagsApiGetCardTemplateCardTagsRequest, options?: Configuration): Promise<InlineResponse20084>;
    /**
     * Remove a tag from a card for the card template.
     * Remove a tag from a card for the card template
     * @param param the request object
     */
    removeCardTemplateCardTag(param: CardTemplateCardTagsApiRemoveCardTemplateCardTagRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardWatchersApiAddCardTemplateCardWatcherRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardWatchersApiaddCardTemplateCardWatcher
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardWatchersApiaddCardTemplateCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardWatchersApiaddCardTemplateCardWatcher
     */
    user_id: number;
}
export interface CardTemplateCardWatchersApiCheckUserIsCardTemplateCardWatcherRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardWatchersApicheckUserIsCardTemplateCardWatcher
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardWatchersApicheckUserIsCardTemplateCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardWatchersApicheckUserIsCardTemplateCardWatcher
     */
    user_id: number;
}
export interface CardTemplateCardWatchersApiGetCardTemplateCardWatchersRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardWatchersApigetCardTemplateCardWatchers
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardWatchersApigetCardTemplateCardWatchers
     */
    card_id: number;
}
export interface CardTemplateCardWatchersApiRemoveCardTemplateCardWatcherRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardWatchersApiremoveCardTemplateCardWatcher
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardWatchersApiremoveCardTemplateCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardTemplateCardWatchersApiremoveCardTemplateCardWatcher
     */
    user_id: number;
}
export declare class ObjectCardTemplateCardWatchersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardWatchersApiRequestFactory, responseProcessor?: CardTemplateCardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for a card for the card for the card template.
     * Make a user a watcher for a card for the card for the card template
     * @param param the request object
     */
    addCardTemplateCardWatcher(param: CardTemplateCardWatchersApiAddCardTemplateCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Check the user with a user id is a watcher for the card for the card template
     * Check the user with a user id is a watcher for the card for the card template
     * @param param the request object
     */
    checkUserIsCardTemplateCardWatcher(param: CardTemplateCardWatchersApiCheckUserIsCardTemplateCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of watchers of a card for the card template.
     * Get a list of watchers of a card for the card template
     * @param param the request object
     */
    getCardTemplateCardWatchers(param: CardTemplateCardWatchersApiGetCardTemplateCardWatchersRequest, options?: Configuration): Promise<InlineResponse20085>;
    /**
     * Make a user not a watcher for the card for the card template.
     * Make a user not a watcher for the card for the card template
     * @param param the request object
     */
    removeCardTemplateCardWatcher(param: CardTemplateCardWatchersApiRemoveCardTemplateCardWatcherRequest, options?: Configuration): Promise<void>;
}
export interface CardTemplateCardsApiAddCardTemplateCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardsApiaddCardTemplateCard
     */
    template_id: number;
    /**
     *
     * @type CardTemplateCardInExistingTemplateCreateRequest
     * @memberof CardTemplateCardsApiaddCardTemplateCard
     */
    CardTemplateCardInExistingTemplateCreateRequest?: CardTemplateCardInExistingTemplateCreateRequest;
}
export interface CardTemplateCardsApiDeleteCardTemplateCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardsApideleteCardTemplateCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardsApideleteCardTemplateCard
     */
    card_id: number;
}
export interface CardTemplateCardsApiGetCardTemplateCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardsApigetCardTemplateCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardsApigetCardTemplateCard
     */
    card_id: number;
}
export interface CardTemplateCardsApiGetCardTemplateCardsRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardsApigetCardTemplateCards
     */
    template_id: number;
}
export interface CardTemplateCardsApiUpdateCardTemplateCardRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplateCardsApiupdateCardTemplateCard
     */
    template_id: number;
    /**
     * A card id.
     * @type number
     * @memberof CardTemplateCardsApiupdateCardTemplateCard
     */
    card_id: number;
    /**
     *
     * @type CardTemplateCardUpdateRequest
     * @memberof CardTemplateCardsApiupdateCardTemplateCard
     */
    CardTemplateCardUpdateRequest?: CardTemplateCardUpdateRequest;
}
export declare class ObjectCardTemplateCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardsApiRequestFactory, responseProcessor?: CardTemplateCardsApiResponseProcessor);
    /**
     * Add a card to the card template.
     * Add a card to the card template
     * @param param the request object
     */
    addCardTemplateCard(param: CardTemplateCardsApiAddCardTemplateCardRequest, options?: Configuration): Promise<InlineResponse20060>;
    /**
     * Delete a card for the card template
     * Delete a card for the card template
     * @param param the request object
     */
    deleteCardTemplateCard(param: CardTemplateCardsApiDeleteCardTemplateCardRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card for the card template.
     * Get the details of a single card for the card template
     * @param param the request object
     */
    getCardTemplateCard(param: CardTemplateCardsApiGetCardTemplateCardRequest, options?: Configuration): Promise<InlineResponse20060>;
    /**
     * Get a list of cards for the card template.
     * Get a list of cards for the card template
     * @param param the request object
     */
    getCardTemplateCards(param: CardTemplateCardsApiGetCardTemplateCardsRequest, options?: Configuration): Promise<InlineResponse20059>;
    /**
     * Update a card of the card template.
     * Update a card of the card template
     * @param param the request object
     */
    updateCardTemplateCard(param: CardTemplateCardsApiUpdateCardTemplateCardRequest, options?: Configuration): Promise<InlineResponse20060>;
}
export interface CardTemplateHistoryApiGetCardTemplatesHistoryRequest {
    /**
     * A list of the template ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    template_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the card template.
     * @type Array&lt;&#39;template_created&#39; | &#39;template_updated&#39; | &#39;template_disabled&#39; | &#39;template_enabled&#39; | &#39;template_deleted&#39; | &#39;template_added_to_board&#39; | &#39;template_updated_for_board&#39; | &#39;template_removed_from_board&#39;&gt;
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof CardTemplateHistoryApigetCardTemplatesHistory
     */
    per_page?: number;
}
export declare class ObjectCardTemplateHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateHistoryApiRequestFactory, responseProcessor?: CardTemplateHistoryApiResponseProcessor);
    /**
     * Get a list of card templates creation, deletion, update events matching some optional criteria.
     * Get a list of card templates creation, deletion, update events
     * @param param the request object
     */
    getCardTemplatesHistory(param: CardTemplateHistoryApiGetCardTemplatesHistoryRequest, options?: Configuration): Promise<InlineResponse20058>;
}
export interface CardTemplatesApiCreateCardTemplateRequest {
    /**
     *
     * @type CardTemplateCreateRequest
     * @memberof CardTemplatesApicreateCardTemplate
     */
    CardTemplateCreateRequest?: CardTemplateCreateRequest;
}
export interface CardTemplatesApiDeleteCardTemplateRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplatesApideleteCardTemplate
     */
    template_id: number;
}
export interface CardTemplatesApiGetCardTemplateRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplatesApigetCardTemplate
     */
    template_id: number;
}
export interface CardTemplatesApiGetCardTemplatesRequest {
    /**
     * A list of the card template ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof CardTemplatesApigetCardTemplates
     */
    template_ids?: Array<number>;
    /**
     * Find a card template by its full name.
     * @type string
     * @memberof CardTemplatesApigetCardTemplates
     */
    name?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof CardTemplatesApigetCardTemplates
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled card templates. When set to 0 you will only get disabled card templates.
     * @type 0 | 1
     * @memberof CardTemplatesApigetCardTemplates
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: template_id, name, description, primary_template_card_id, availability and is_enabled.
     * @type Array&lt;&#39;template_id&#39; | &#39;name&#39; | &#39;description&#39; | &#39;primary_template_card_id&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof CardTemplatesApigetCardTemplates
     */
    fields?: Array<'template_id' | 'name' | 'description' | 'primary_template_card_id' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count and template_cards.
     * @type Array&lt;&#39;board_ids&#39; | &#39;board_count&#39; | &#39;template_cards&#39;&gt;
     * @memberof CardTemplatesApigetCardTemplates
     */
    expand?: Array<'board_ids' | 'board_count' | 'template_cards'>;
}
export interface CardTemplatesApiUpdateCardTemplateRequest {
    /**
     * A template id.
     * @type number
     * @memberof CardTemplatesApiupdateCardTemplate
     */
    template_id: number;
    /**
     *
     * @type CardTemplateUpdateRequest
     * @memberof CardTemplatesApiupdateCardTemplate
     */
    CardTemplateUpdateRequest?: CardTemplateUpdateRequest;
}
export declare class ObjectCardTemplatesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplatesApiRequestFactory, responseProcessor?: CardTemplatesApiResponseProcessor);
    /**
     * Create a new card template.
     * Create a new card template
     * @param param the request object
     */
    createCardTemplate(param: CardTemplatesApiCreateCardTemplateRequest, options?: Configuration): Promise<InlineResponse20057>;
    /**
     * Delete a card template.
     * Delete a card template
     * @param param the request object
     */
    deleteCardTemplate(param: CardTemplatesApiDeleteCardTemplateRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card template.
     * Get the details of a single card template
     * @param param the request object
     */
    getCardTemplate(param: CardTemplatesApiGetCardTemplateRequest, options?: Configuration): Promise<InlineResponse20057>;
    /**
     * Get a list of card templates matching some optional criteria.
     * Get a list of card templates
     * @param param the request object
     */
    getCardTemplates(param: CardTemplatesApiGetCardTemplatesRequest, options?: Configuration): Promise<InlineResponse20056>;
    /**
     * Update a card template.
     * Update a card template
     * @param param the request object
     */
    updateCardTemplate(param: CardTemplatesApiUpdateCardTemplateRequest, options?: Configuration): Promise<InlineResponse20057>;
}
export interface CardTypeBoardsApiGetCardTypeBoardsRequest {
    /**
     * A type id.
     * @type number
     * @memberof CardTypeBoardsApigetCardTypeBoards
     */
    type_id: number;
}
export declare class ObjectCardTypeBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeBoardsApiRequestFactory, responseProcessor?: CardTypeBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the card type is available.
     * Get a list of boards where the card type is available
     * @param param the request object
     */
    getCardTypeBoards(param: CardTypeBoardsApiGetCardTypeBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
}
export interface CardTypeCardsApiGetCardTypeCardsRequest {
    /**
     * A type id.
     * @type number
     * @memberof CardTypeCardsApigetCardTypeCards
     */
    type_id: number;
}
export declare class ObjectCardTypeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeCardsApiRequestFactory, responseProcessor?: CardTypeCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the card type is available.
     * Get a list of cards where the card type is available
     * @param param the request object
     */
    getCardTypeCards(param: CardTypeCardsApiGetCardTypeCardsRequest, options?: Configuration): Promise<InlineResponse20012>;
}
export interface CardTypeHistoryApiGetCardTypesHistoryRequest {
    /**
     * A list of the card type ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    type_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the card type.
     * @type Array&lt;&#39;type_created&#39; | &#39;type_updated&#39; | &#39;type_disabled&#39; | &#39;type_enabled&#39; | &#39;type_deleted&#39; | &#39;type_added_to_board&#39; | &#39;type_updated_for_board&#39; | &#39;type_removed_from_board&#39;&gt;
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof CardTypeHistoryApigetCardTypesHistory
     */
    per_page?: number;
}
export declare class ObjectCardTypeHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeHistoryApiRequestFactory, responseProcessor?: CardTypeHistoryApiResponseProcessor);
    /**
     * Get a list of card types creation, deletion, update events matching some optional criteria.
     * Get a list of card types creation, deletion, update events
     * @param param the request object
     */
    getCardTypesHistory(param: CardTypeHistoryApiGetCardTypesHistoryRequest, options?: Configuration): Promise<InlineResponse20088>;
}
export interface CardTypesApiCreateCardTypeRequest {
    /**
     *
     * @type InlineObject33
     * @memberof CardTypesApicreateCardType
     */
    InlineObject33?: InlineObject33;
}
export interface CardTypesApiDeleteCardTypeRequest {
    /**
     * A type id.
     * @type number
     * @memberof CardTypesApideleteCardType
     */
    type_id: number;
    /**
     * The id of a card type with which to replace the one to be deleted on the cards using it.
     * @type number
     * @memberof CardTypesApideleteCardType
     */
    replace_with_type_id?: number;
}
export interface CardTypesApiGetCardTypeRequest {
    /**
     * A type id.
     * @type number
     * @memberof CardTypesApigetCardType
     */
    type_id: number;
}
export interface CardTypesApiGetCardTypesRequest {
    /**
     * A list of the card type ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof CardTypesApigetCardTypes
     */
    type_ids?: Array<number>;
    /**
     * Find a card type by its full name.
     * @type string
     * @memberof CardTypesApigetCardTypes
     */
    name?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof CardTypesApigetCardTypes
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled card types. When set to 0 you will only get disabled card types.
     * @type 0 | 1
     * @memberof CardTypesApigetCardTypes
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: type_id, icon_type, icon_id, name, description, color, card_color_sync, all_properties_are_locked, availability and is_enabled.
     * @type Array&lt;&#39;type_id&#39; | &#39;icon_type&#39; | &#39;icon_id&#39; | &#39;name&#39; | &#39;description&#39; | &#39;color&#39; | &#39;card_color_sync&#39; | &#39;all_properties_are_locked&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof CardTypesApigetCardTypes
     */
    fields?: Array<'type_id' | 'icon_type' | 'icon_id' | 'name' | 'description' | 'color' | 'card_color_sync' | 'all_properties_are_locked' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: boards, board_count, card_ids, card_count and business_rules.
     * @type Array&lt;&#39;boards&#39; | &#39;board_count&#39; | &#39;card_ids&#39; | &#39;card_count&#39; | &#39;business_rules&#39;&gt;
     * @memberof CardTypesApigetCardTypes
     */
    expand?: Array<'boards' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>;
}
export interface CardTypesApiUpdateCardTypeRequest {
    /**
     * A type id.
     * @type number
     * @memberof CardTypesApiupdateCardType
     */
    type_id: number;
    /**
     *
     * @type InlineObject34
     * @memberof CardTypesApiupdateCardType
     */
    InlineObject34?: InlineObject34;
}
export declare class ObjectCardTypesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypesApiRequestFactory, responseProcessor?: CardTypesApiResponseProcessor);
    /**
     * Create a new card type.
     * Create a card type
     * @param param the request object
     */
    createCardType(param: CardTypesApiCreateCardTypeRequest, options?: Configuration): Promise<InlineResponse20087>;
    /**
     * Delete a card type.
     * Delete a card type
     * @param param the request object
     */
    deleteCardType(param: CardTypesApiDeleteCardTypeRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card type.
     * Get the details of a single card type
     * @param param the request object
     */
    getCardType(param: CardTypesApiGetCardTypeRequest, options?: Configuration): Promise<InlineResponse20087>;
    /**
     * Get a list of card types matching some optional criteria.
     * Get a list of card types
     * @param param the request object
     */
    getCardTypes(param: CardTypesApiGetCardTypesRequest, options?: Configuration): Promise<InlineResponse20086>;
    /**
     * Update a card type.
     * Update a card type
     * @param param the request object
     */
    updateCardType(param: CardTypesApiUpdateCardTypeRequest, options?: Configuration): Promise<InlineResponse20087>;
}
export interface CardWatchedApiAddCurrentUserForCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchedApiaddCurrentUserForCardWatcher
     */
    card_id: number;
}
export interface CardWatchedApiCheckCurrentUserIsCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchedApicheckCurrentUserIsCardWatcher
     */
    card_id: number;
}
export interface CardWatchedApiRemoveCurrentUserCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchedApiremoveCurrentUserCardWatcher
     */
    card_id: number;
}
export declare class ObjectCardWatchedApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardWatchedApiRequestFactory, responseProcessor?: CardWatchedApiResponseProcessor);
    /**
     * Make a current user a watcher for the card.
     * Make a current user a watcher for the card
     * @param param the request object
     */
    addCurrentUserForCardWatcher(param: CardWatchedApiAddCurrentUserForCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Check current user is a watcher for the card
     * Check current user is a watcher for the card
     * @param param the request object
     */
    checkCurrentUserIsCardWatcher(param: CardWatchedApiCheckCurrentUserIsCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Make a current user not a watcher for the card.
     * Make a current user not a watcher for the card
     * @param param the request object
     */
    removeCurrentUserCardWatcher(param: CardWatchedApiRemoveCurrentUserCardWatcherRequest, options?: Configuration): Promise<void>;
}
export interface CardWatchersApiAddCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchersApiaddCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardWatchersApiaddCardWatcher
     */
    user_id: number;
}
export interface CardWatchersApiCheckUserIsCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchersApicheckUserIsCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardWatchersApicheckUserIsCardWatcher
     */
    user_id: number;
}
export interface CardWatchersApiGetCardWatchersRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchersApigetCardWatchers
     */
    card_id: number;
}
export interface CardWatchersApiRemoveCardWatcherRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardWatchersApiremoveCardWatcher
     */
    card_id: number;
    /**
     * A user id.
     * @type number
     * @memberof CardWatchersApiremoveCardWatcher
     */
    user_id: number;
}
export declare class ObjectCardWatchersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardWatchersApiRequestFactory, responseProcessor?: CardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for the card.
     * Make a user a watcher for the card
     * @param param the request object
     */
    addCardWatcher(param: CardWatchersApiAddCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Check the user with a user id is a watcher for the card
     * Check the user with a user id is a watcher for the card
     * @param param the request object
     */
    checkUserIsCardWatcher(param: CardWatchersApiCheckUserIsCardWatcherRequest, options?: Configuration): Promise<void>;
    /**
     * Get a card's watchers.
     * Get a card's watchers
     * @param param the request object
     */
    getCardWatchers(param: CardWatchersApiGetCardWatchersRequest, options?: Configuration): Promise<InlineResponse200128>;
    /**
     * Make a user not a watcher for the card.
     * Make a user not a watcher for the card
     * @param param the request object
     */
    removeCardWatcher(param: CardWatchersApiRemoveCardWatcherRequest, options?: Configuration): Promise<void>;
}
export interface CardsApiDeleteCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardsApideleteCard
     */
    card_id: number;
    /**
     * Exceeding reason.
     * @type string
     * @memberof CardsApideleteCard
     */
    exceeding_reason?: string;
}
export interface CardsApiGetCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof CardsApigetCard
     */
    card_id: number;
}
export interface CardsApiGetCardsRequest {
    /**
     * A list of the card ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    card_ids?: Array<number>;
    /**
     * A list of the board ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    board_ids?: Array<number>;
    /**
     * A list of the workflows ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    workflow_ids?: Array<number>;
    /**
     * The state value of cards that you want to get. By default it&#39;s the active state.
     * @type &#39;active&#39; | &#39;archived&#39; | &#39;discarded&#39;
     * @memberof CardsApigetCards
     */
    state?: 'active' | 'archived' | 'discarded';
    /**
     * The first date and time of created cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    created_from?: Date;
    /**
     * The first date of created cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    created_from_date?: Date;
    /**
     * The last date and time of created cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    created_to?: Date;
    /**
     * The last date of created cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    created_to_date?: Date;
    /**
     * The first date and time of last modified cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    last_modified_from?: Date;
    /**
     * The first date of last modified cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    last_modified_from_date?: Date;
    /**
     * The last date and time of last modified cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    last_modified_to?: Date;
    /**
     * The last date of last modified cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    last_modified_to_date?: Date;
    /**
     * The first date and time of in current position since cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    in_current_position_since_from?: Date;
    /**
     * The first date of in current position since cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    in_current_position_since_from_date?: Date;
    /**
     * The last date and time of in current position since cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    in_current_position_since_to?: Date;
    /**
     * The last date of in current position since cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    in_current_position_since_to_date?: Date;
    /**
     * When set to 1 you will only get blocked cards. When set to 0 you will only get non blocked cards.
     * @type 0 | 1
     * @memberof CardsApigetCards
     */
    is_blocked?: 0 | 1;
    /**
     * A list of the custom ids for which you want to get the results.
     * @type Array&lt;string&gt;
     * @memberof CardsApigetCards
     */
    custom_ids?: Array<string>;
    /**
     * A list of the user ids of assignees for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    owner_user_ids?: Array<number>;
    /**
     * A list of the type ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    type_ids?: Array<number>;
    /**
     * A list of the sizes for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    sizes?: Array<number>;
    /**
     * A list of the priorities for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    priorities?: Array<number>;
    /**
     * A list of the colors for which you want to get the results.
     * @type Array&lt;string&gt;
     * @memberof CardsApigetCards
     */
    colors?: Array<string>;
    /**
     * The first date and time of deadline cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    deadline_from?: Date;
    /**
     * The first date of deadline cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    deadline_from_date?: Date;
    /**
     * The last date and time of deadline cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    deadline_to?: Date;
    /**
     * The last date of deadline cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    deadline_to_date?: Date;
    /**
     * A list of the column ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    column_ids?: Array<number>;
    /**
     * A list of the lane ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    lane_ids?: Array<number>;
    /**
     * A list of the sections for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    sections?: Array<number>;
    /**
     * A list of the last column ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    last_column_ids?: Array<number>;
    /**
     * A list of the last lane ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    last_lane_ids?: Array<number>;
    /**
     * A list of the version ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    version_ids?: Array<number>;
    /**
     * The first date and time of archived cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    archived_from?: Date;
    /**
     * The first date of archived cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    archived_from_date?: Date;
    /**
     * The last date and time of archived cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    archived_to?: Date;
    /**
     * The last date of archived cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    archived_to_date?: Date;
    /**
     * A list of the reasons ids for which you want to get the results.
     * @type Array&lt;number&gt;
     * @memberof CardsApigetCards
     */
    reason_ids?: Array<number>;
    /**
     * The first date and time of discarded cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    discarded_from?: Date;
    /**
     * The first date of discarded cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    discarded_from_date?: Date;
    /**
     * The last date and time of discarded cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    discarded_to?: Date;
    /**
     * The last date of discarded cards for which you want results.
     * @type Date
     * @memberof CardsApigetCards
     */
    discarded_to_date?: Date;
    /**
     * Controls whether this include logged times for subtasks.
     * @type 0 | 1
     * @memberof CardsApigetCards
     */
    include_logged_time_for_subtasks?: 0 | 1;
    /**
     * Controls whether this include logged times for child cards.
     * @type 0 | 1
     * @memberof CardsApigetCards
     */
    include_logged_time_for_child_cards?: 0 | 1;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof CardsApigetCards
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     * @type number
     * @memberof CardsApigetCards
     */
    per_page?: number;
    /**
     * A list of fields that you want in the response. The allowed fields are: card_id, title, description, custom_id, owner_user_id, type_id, size, priority, color, deadline, reporter, created_at, revision, last_modified, in_current_position_since, board_id, workflow_id, column_id, lane_id, section, position, last_column_id, last_lane_id, version_id, archived_at, reason_id, discard_comment, discarded_at, is_blocked, block_reason, current_block_time, current_logged_time, current_cycle_time, child_card_stats, finished_subtask_count, unfinished_subtask_count and comment_count.
     * @type Array&lt;&#39;card_id&#39; | &#39;title&#39; | &#39;description&#39; | &#39;custom_id&#39; | &#39;owner_user_id&#39; | &#39;type_id&#39; | &#39;size&#39; | &#39;priority&#39; | &#39;color&#39; | &#39;deadline&#39; | &#39;reporter&#39; | &#39;created_at&#39; | &#39;revision&#39; | &#39;last_modified&#39; | &#39;in_current_position_since&#39; | &#39;board_id&#39; | &#39;workflow_id&#39; | &#39;column_id&#39; | &#39;lane_id&#39; | &#39;section&#39; | &#39;position&#39; | &#39;last_column_id&#39; | &#39;last_lane_id&#39; | &#39;version_id&#39; | &#39;archived_at&#39; | &#39;reason_id&#39; | &#39;discard_comment&#39; | &#39;discarded_at&#39; | &#39;is_blocked&#39; | &#39;block_reason&#39; | &#39;current_block_time&#39; | &#39;current_logged_time&#39; | &#39;current_cycle_time&#39; | &#39;child_card_stats&#39; | &#39;finished_subtask_count&#39; | &#39;unfinished_subtask_count&#39; | &#39;comment_count&#39;&gt;
     * @memberof CardsApigetCards
     */
    fields?: Array<'card_id' | 'title' | 'description' | 'custom_id' | 'owner_user_id' | 'type_id' | 'size' | 'priority' | 'color' | 'deadline' | 'reporter' | 'created_at' | 'revision' | 'last_modified' | 'in_current_position_since' | 'board_id' | 'workflow_id' | 'column_id' | 'lane_id' | 'section' | 'position' | 'last_column_id' | 'last_lane_id' | 'version_id' | 'archived_at' | 'reason_id' | 'discard_comment' | 'discarded_at' | 'is_blocked' | 'block_reason' | 'current_block_time' | 'current_logged_time' | 'current_cycle_time' | 'child_card_stats' | 'finished_subtask_count' | 'unfinished_subtask_count' | 'comment_count'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.
     * @type Array&lt;&#39;custom_fields&#39; | &#39;stickers&#39; | &#39;tag_ids&#39; | &#39;co_owner_ids&#39; | &#39;watcher_ids&#39; | &#39;attachments&#39; | &#39;checked_column_checklist_items&#39; | &#39;initiative_details&#39; | &#39;annotations&#39; | &#39;subtasks&#39; | &#39;linked_cards&#39; | &#39;transitions&#39; | &#39;block_times&#39; | &#39;logged_times&#39; | &#39;logged_times_for_child_cards&#39; | &#39;lead_time_per_column&#39; | &#39;outcomes&#39; | &#39;outcome_current_values&#39;&gt;
     * @memberof CardsApigetCards
     */
    expand?: Array<'custom_fields' | 'stickers' | 'tag_ids' | 'co_owner_ids' | 'watcher_ids' | 'attachments' | 'checked_column_checklist_items' | 'initiative_details' | 'annotations' | 'subtasks' | 'linked_cards' | 'transitions' | 'block_times' | 'logged_times' | 'logged_times_for_child_cards' | 'lead_time_per_column' | 'outcomes' | 'outcome_current_values'>;
}
export declare class ObjectCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsApiRequestFactory, responseProcessor?: CardsApiResponseProcessor);
    /**
     * Delete a card.
     * Delete a card
     * @param param the request object
     */
    deleteCard(param: CardsApiDeleteCardRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card.
     * Get the details of a single card
     * @param param the request object
     */
    getCard(param: CardsApiGetCardRequest, options?: Configuration): Promise<InlineResponse20091>;
    /**
     * Get a list of cards matching some optional criteria.
     * Get a list of cards
     * @param param the request object
     */
    getCards(param: CardsApiGetCardsRequest, options?: Configuration): Promise<InlineResponse20089>;
}
export interface CardsCreateManyApiCreateManyCardsRequest {
    /**
     *
     * @type InlineObject35
     * @memberof CardsCreateManyApicreateManyCards
     */
    InlineObject35?: InlineObject35;
}
export declare class ObjectCardsCreateManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsCreateManyApiRequestFactory, responseProcessor?: CardsCreateManyApiResponseProcessor);
    /**
     * Create many cards.
     * Create many cards
     * @param param the request object
     */
    createManyCards(param: CardsCreateManyApiCreateManyCardsRequest, options?: Configuration): Promise<InlineResponse20090>;
}
export interface CardsDeleteManyApiDeleteManyCardsRequest {
    /**
     *
     * @type InlineObject36
     * @memberof CardsDeleteManyApideleteManyCards
     */
    InlineObject36?: InlineObject36;
}
export declare class ObjectCardsDeleteManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsDeleteManyApiRequestFactory, responseProcessor?: CardsDeleteManyApiResponseProcessor);
    /**
     * Delete many cards.
     * Delete many cards
     * @param param the request object
     */
    deleteManyCards(param: CardsDeleteManyApiDeleteManyCardsRequest, options?: Configuration): Promise<void>;
}
export interface CardsUpdateManyApiUpdateManyCardsRequest {
    /**
     *
     * @type InlineObject37
     * @memberof CardsUpdateManyApiupdateManyCards
     */
    InlineObject37?: InlineObject37;
}
export declare class ObjectCardsUpdateManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsUpdateManyApiRequestFactory, responseProcessor?: CardsUpdateManyApiResponseProcessor);
    /**
     * Update many cards.
     * Update many cards
     * @param param the request object
     */
    updateManyCards(param: CardsUpdateManyApiUpdateManyCardsRequest, options?: Configuration): Promise<InlineResponse20090>;
}
export interface CellLimitsApiGetCellLimitsRequest {
    /**
     * A board id.
     * @type number
     * @memberof CellLimitsApigetCellLimits
     */
    board_id: number;
}
export interface CellLimitsApiSetCellLimitRequest {
    /**
     * A board id.
     * @type number
     * @memberof CellLimitsApisetCellLimit
     */
    board_id: number;
    /**
     *
     * @type InlineObject7
     * @memberof CellLimitsApisetCellLimit
     */
    InlineObject7?: InlineObject7;
}
export declare class ObjectCellLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CellLimitsApiRequestFactory, responseProcessor?: CellLimitsApiResponseProcessor);
    /**
     * Get a list of the cell limits for a specified board.
     * Get a list of cell limits
     * @param param the request object
     */
    getCellLimits(param: CellLimitsApiGetCellLimitsRequest, options?: Configuration): Promise<InlineResponse20020>;
    /**
     * Set a cell limit.
     * Set a cell limit
     * @param param the request object
     */
    setCellLimit(param: CellLimitsApiSetCellLimitRequest, options?: Configuration): Promise<InlineResponse20021>;
}
export interface CheckSPFRecordApiCheckSPFRecordRequest {
    /**
     *
     * @type InlineObject49
     * @memberof CheckSPFRecordApicheckSPFRecord
     */
    InlineObject49?: InlineObject49;
}
export declare class ObjectCheckSPFRecordApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CheckSPFRecordApiRequestFactory, responseProcessor?: CheckSPFRecordApiResponseProcessor);
    /**
     * Check if a domain has a valid SPF record including mail.kanbanize.com.
     * Check if the SPF record of a domain includes mail.kanbanize.com
     * @param param the request object
     */
    checkSPFRecord(param: CheckSPFRecordApiCheckSPFRecordRequest, options?: Configuration): Promise<InlineResponse200129>;
}
export interface ChildCardsApiAddChildCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ChildCardsApiaddChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof ChildCardsApiaddChildCard
     */
    child_card_id: number;
    /**
     *
     * @type InlineObject39
     * @memberof ChildCardsApiaddChildCard
     */
    InlineObject39?: InlineObject39;
}
export interface ChildCardsApiCheckChildCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ChildCardsApicheckChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof ChildCardsApicheckChildCard
     */
    child_card_id: number;
}
export interface ChildCardsApiGetChildCardGraphRequest {
    /**
     * A card id.
     * @type number
     * @memberof ChildCardsApigetChildCardGraph
     */
    card_id: number;
}
export interface ChildCardsApiGetChildCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof ChildCardsApigetChildCards
     */
    card_id: number;
}
export interface ChildCardsApiRemoveChildCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ChildCardsApiremoveChildCard
     */
    card_id: number;
    /**
     * A child card id.
     * @type number
     * @memberof ChildCardsApiremoveChildCard
     */
    child_card_id: number;
    /**
     * Exceeding reason.
     * @type string
     * @memberof ChildCardsApiremoveChildCard
     */
    exceeding_reason?: string;
}
export declare class ObjectChildCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ChildCardsApiRequestFactory, responseProcessor?: ChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card.
     * Make a card a child of a given card
     * @param param the request object
     */
    addChildCard(param: ChildCardsApiAddChildCardRequest, options?: Configuration): Promise<void | InlineResponse20065>;
    /**
     * Check if a card is a child of a given card and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card
     * @param param the request object
     */
    checkChildCard(param: ChildCardsApiCheckChildCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of child cards of a given card and the child cards of those cards too.
     * Get a list of child cards including their child cards too
     * @param param the request object
     */
    getChildCardGraph(param: ChildCardsApiGetChildCardGraphRequest, options?: Configuration): Promise<InlineResponse20093>;
    /**
     * Get a list of the child cards of a given card.
     * Get a list of child cards
     * @param param the request object
     */
    getChildCards(param: ChildCardsApiGetChildCardsRequest, options?: Configuration): Promise<InlineResponse20094>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param param the request object
     */
    removeChildCard(param: ChildCardsApiRemoveChildCardRequest, options?: Configuration): Promise<void>;
}
export interface ColumnsApiCreateColumnRequest {
    /**
     * A board id.
     * @type number
     * @memberof ColumnsApicreateColumn
     */
    board_id: number;
    /**
     *
     * @type InlineObject8
     * @memberof ColumnsApicreateColumn
     */
    InlineObject8?: InlineObject8;
}
export interface ColumnsApiDeleteColumnRequest {
    /**
     * A board id.
     * @type number
     * @memberof ColumnsApideleteColumn
     */
    board_id: number;
    /**
     * A column id.
     * @type number
     * @memberof ColumnsApideleteColumn
     */
    column_id: number;
    /**
     * The id of a column to which to move the cards from the deleted column, if there are any.
     * @type number
     * @memberof ColumnsApideleteColumn
     */
    move_cards_to_column_id?: number;
    /**
     * The id of a column to which to move the cycle time data associated with the deleted column, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     * @type number
     * @memberof ColumnsApideleteColumn
     */
    move_metrics_to_column_id?: number;
}
export interface ColumnsApiGetColumnRequest {
    /**
     * A board id.
     * @type number
     * @memberof ColumnsApigetColumn
     */
    board_id: number;
    /**
     * A column id.
     * @type number
     * @memberof ColumnsApigetColumn
     */
    column_id: number;
}
export interface ColumnsApiGetColumnsRequest {
    /**
     * A board id.
     * @type number
     * @memberof ColumnsApigetColumns
     */
    board_id: number;
    /**
     * A list of fields that you want in the response. The allowed fields are: column_id, workflow, section, parent_column_id, position, name, description, color, limit, cards_per_row and flow_type.
     * @type Array&lt;&#39;column_id&#39; | &#39;workflow_id&#39; | &#39;section&#39; | &#39;parent_column_id&#39; | &#39;position&#39; | &#39;name&#39; | &#39;description&#39; | &#39;color&#39; | &#39;limit&#39; | &#39;cards_per_row&#39; | &#39;flow_type&#39;&gt;
     * @memberof ColumnsApigetColumns
     */
    fields?: Array<'column_id' | 'workflow_id' | 'section' | 'parent_column_id' | 'position' | 'name' | 'description' | 'color' | 'limit' | 'cards_per_row' | 'flow_type'>;
}
export interface ColumnsApiUpdateColumnRequest {
    /**
     * A board id.
     * @type number
     * @memberof ColumnsApiupdateColumn
     */
    board_id: number;
    /**
     * A column id.
     * @type number
     * @memberof ColumnsApiupdateColumn
     */
    column_id: number;
    /**
     *
     * @type InlineObject9
     * @memberof ColumnsApiupdateColumn
     */
    InlineObject9?: InlineObject9;
}
export declare class ObjectColumnsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ColumnsApiRequestFactory, responseProcessor?: ColumnsApiResponseProcessor);
    /**
     * Create a new column.
     * Create a column
     * @param param the request object
     */
    createColumn(param: ColumnsApiCreateColumnRequest, options?: Configuration): Promise<InlineResponse20023>;
    /**
     * Delete a column.
     * Delete a column
     * @param param the request object
     */
    deleteColumn(param: ColumnsApiDeleteColumnRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single column.
     * Get the details of a single column
     * @param param the request object
     */
    getColumn(param: ColumnsApiGetColumnRequest, options?: Configuration): Promise<InlineResponse20024>;
    /**
     * Get a list of the columns in a specified board.
     * Get a list of columns
     * @param param the request object
     */
    getColumns(param: ColumnsApiGetColumnsRequest, options?: Configuration): Promise<InlineResponse20022>;
    /**
     * Update a column.
     * Update a column
     * @param param the request object
     */
    updateColumn(param: ColumnsApiUpdateColumnRequest, options?: Configuration): Promise<InlineResponse20024>;
}
export interface CompanyAddonTrialsApiGetAddonTrialRequest {
    /**
     * A feature id.
     * @type number
     * @memberof CompanyAddonTrialsApigetAddonTrial
     */
    feature_id: number;
}
export interface CompanyAddonTrialsApiGetAddonsTrialsRequest {
}
export interface CompanyAddonTrialsApiPutAddonTrialRequest {
    /**
     * A feature id.
     * @type number
     * @memberof CompanyAddonTrialsApiputAddonTrial
     */
    feature_id: number;
}
export declare class ObjectCompanyAddonTrialsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonTrialsApiRequestFactory, responseProcessor?: CompanyAddonTrialsApiResponseProcessor);
    /**
     * Get a possible addon trial status
     * Get a possible addon trial status
     * @param param the request object
     */
    getAddonTrial(param: CompanyAddonTrialsApiGetAddonTrialRequest, options?: Configuration): Promise<InlineResponse2002>;
    /**
     * Get a list of all possible addon trial statuses
     * Get a list of all possible addon trial statuses
     * @param param the request object
     */
    getAddonsTrials(param: CompanyAddonTrialsApiGetAddonsTrialsRequest, options?: Configuration): Promise<InlineResponse2001>;
    /**
     * Start an addon trial
     * Start an addon trial
     * @param param the request object
     */
    putAddonTrial(param: CompanyAddonTrialsApiPutAddonTrialRequest, options?: Configuration): Promise<void>;
}
export interface CompanyAddonsApiGetAddonsRequest {
}
export declare class ObjectCompanyAddonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonsApiRequestFactory, responseProcessor?: CompanyAddonsApiResponseProcessor);
    /**
     * Get a list of all possible addon
     * Get a list of all possible addons
     * @param param the request object
     */
    getAddons(param: CompanyAddonsApiGetAddonsRequest, options?: Configuration): Promise<InlineResponse200>;
}
export interface CompanyPlanTrialsApiGetPlanTrialRequest {
    /**
     * A plan id.
     * @type number
     * @memberof CompanyPlanTrialsApigetPlanTrial
     */
    plan_id: number;
}
export interface CompanyPlanTrialsApiGetPlansTrialsRequest {
}
export interface CompanyPlanTrialsApiPutPlanTrialRequest {
    /**
     * A plan id.
     * @type number
     * @memberof CompanyPlanTrialsApiputPlanTrial
     */
    plan_id: number;
}
export declare class ObjectCompanyPlanTrialsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyPlanTrialsApiRequestFactory, responseProcessor?: CompanyPlanTrialsApiResponseProcessor);
    /**
     * Get a possible plan trial status
     * Get a possible plan trial status
     * @param param the request object
     */
    getPlanTrial(param: CompanyPlanTrialsApiGetPlanTrialRequest, options?: Configuration): Promise<InlineResponse200162>;
    /**
     * Get a list of all possible plan trial statuses
     * Get a list of all possible plan trial statuses
     * @param param the request object
     */
    getPlansTrials(param: CompanyPlanTrialsApiGetPlansTrialsRequest, options?: Configuration): Promise<InlineResponse200161>;
    /**
     * Start a plan trial
     * Start a plan trial
     * @param param the request object
     */
    putPlanTrial(param: CompanyPlanTrialsApiPutPlanTrialRequest, options?: Configuration): Promise<void>;
}
export interface CompanyPlansApiGetPlansRequest {
}
export declare class ObjectCompanyPlansApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyPlansApiRequestFactory, responseProcessor?: CompanyPlansApiResponseProcessor);
    /**
     * Get a list of all possible plan statuses
     * Get a list of all possible plan statuses
     * @param param the request object
     */
    getPlans(param: CompanyPlansApiGetPlansRequest, options?: Configuration): Promise<InlineResponse200160>;
}
export interface CompanySettingsApiGetCompanySettingRequest {
    /**
     * A setting name.
     * @type string
     * @memberof CompanySettingsApigetCompanySetting
     */
    setting_name: string;
}
export interface CompanySettingsApiGetCompanySettingsRequest {
}
export interface CompanySettingsApiRemoveCompanySettingRequest {
    /**
     * A setting name.
     * @type string
     * @memberof CompanySettingsApiremoveCompanySetting
     */
    setting_name: string;
}
export declare class ObjectCompanySettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanySettingsApiRequestFactory, responseProcessor?: CompanySettingsApiResponseProcessor);
    /**
     * Get the details of a company setting and its value.
     * Get the details of a company setting and its value
     * @param param the request object
     */
    getCompanySetting(param: CompanySettingsApiGetCompanySettingRequest, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all company settings and their values.
     * Get a list of all company settings and their values
     * @param param the request object
     */
    getCompanySettings(param: CompanySettingsApiGetCompanySettingsRequest, options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of a company setting.
     * Remove the value of a company setting
     * @param param the request object
     */
    removeCompanySetting(param: CompanySettingsApiRemoveCompanySettingRequest, options?: Configuration): Promise<void>;
}
export interface CustomFieldAllowedValuesApiCreateCustomFieldAllowedValueRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldAllowedValuesApicreateCustomFieldAllowedValue
     */
    field_id: number;
    /**
     *
     * @type InlineObject50
     * @memberof CustomFieldAllowedValuesApicreateCustomFieldAllowedValue
     */
    InlineObject50?: InlineObject50;
}
export interface CustomFieldAllowedValuesApiDeleteCustomFieldAllowedValueRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldAllowedValuesApideleteCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CustomFieldAllowedValuesApideleteCustomFieldAllowedValue
     */
    value_id: number;
    /**
     * The id of a value with which to replace the one to be deleted on the cards using it.
     * @type number
     * @memberof CustomFieldAllowedValuesApideleteCustomFieldAllowedValue
     */
    replace_with_value_id?: number;
}
export interface CustomFieldAllowedValuesApiGetCustomFieldAllowedValueRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldAllowedValuesApigetCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CustomFieldAllowedValuesApigetCustomFieldAllowedValue
     */
    value_id: number;
}
export interface CustomFieldAllowedValuesApiGetCustomFieldAllowedValuesRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldAllowedValuesApigetCustomFieldAllowedValues
     */
    field_id: number;
}
export interface CustomFieldAllowedValuesApiUpdateCustomFieldAllowedValueRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldAllowedValuesApiupdateCustomFieldAllowedValue
     */
    field_id: number;
    /**
     * A value id.
     * @type number
     * @memberof CustomFieldAllowedValuesApiupdateCustomFieldAllowedValue
     */
    value_id: number;
    /**
     *
     * @type InlineObject51
     * @memberof CustomFieldAllowedValuesApiupdateCustomFieldAllowedValue
     */
    InlineObject51?: InlineObject51;
}
export declare class ObjectCustomFieldAllowedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldAllowedValuesApiRequestFactory, responseProcessor?: CustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Create a new allowed value.
     * Create an allowed value
     * @param param the request object
     */
    createCustomFieldAllowedValue(param: CustomFieldAllowedValuesApiCreateCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse200132>;
    /**
     * Delete an allowed value.
     * Delete an allowed value
     * @param param the request object
     */
    deleteCustomFieldAllowedValue(param: CustomFieldAllowedValuesApiDeleteCustomFieldAllowedValueRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single allowed value.
     * Get the details of a single allowed value
     * @param param the request object
     */
    getCustomFieldAllowedValue(param: CustomFieldAllowedValuesApiGetCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse200132>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown.
     * Get a list of the allowed values of a custom field of type dropdown
     * @param param the request object
     */
    getCustomFieldAllowedValues(param: CustomFieldAllowedValuesApiGetCustomFieldAllowedValuesRequest, options?: Configuration): Promise<InlineResponse200131>;
    /**
     * Update an allowed value.
     * Update an allowed value
     * @param param the request object
     */
    updateCustomFieldAllowedValue(param: CustomFieldAllowedValuesApiUpdateCustomFieldAllowedValueRequest, options?: Configuration): Promise<InlineResponse200132>;
}
export interface CustomFieldHistoryApiGetCustomFieldHistoryRequest {
    /**
     * A list of ids of the custom fields that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    field_ids?: Array<number>;
    /**
     * Type of action executed on the custom field.
     * @type Array&lt;&#39;custom_field_created&#39; | &#39;custom_field_updated&#39; | &#39;custom_field_deleted&#39; | &#39;custom_field_shared&#39; | &#39;custom_field_unshared&#39; | &#39;custom_field_added_to_board&#39; | &#39;custom_field_removed_from_board&#39; | &#39;custom_field_board_properties_updated&#39;&gt;
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    user_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof CustomFieldHistoryApigetCustomFieldHistory
     */
    per_page?: number;
}
export declare class ObjectCustomFieldHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldHistoryApiRequestFactory, responseProcessor?: CustomFieldHistoryApiResponseProcessor);
    /**
     * Get a list of custom field management history events.
     * Get a list of custom field management history events.
     * @param param the request object
     */
    getCustomFieldHistory(param: CustomFieldHistoryApiGetCustomFieldHistoryRequest, options?: Configuration): Promise<InlineResponse200130>;
}
export interface CustomFieldsApiDeleteCustomFieldRequest {
    /**
     * A custom field id.
     * @type number
     * @memberof CustomFieldsApideleteCustomField
     */
    field_id: number;
}
export declare class ObjectCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldsApiRequestFactory, responseProcessor?: CustomFieldsApiResponseProcessor);
    /**
     * Delete a custom field.
     * Delete a custom field
     * @param param the request object
     */
    deleteCustomField(param: CustomFieldsApiDeleteCustomFieldRequest, options?: Configuration): Promise<void>;
}
export interface DashboardPageTeamsApiCheckDashboardPageTeamRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageTeamsApicheckDashboardPageTeam
     */
    dashboard_page_id: number;
    /**
     * A team id.
     * @type number
     * @memberof DashboardPageTeamsApicheckDashboardPageTeam
     */
    team_id: number;
}
export interface DashboardPageTeamsApiGetDashboardPageTeamsRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageTeamsApigetDashboardPageTeams
     */
    dashboard_page_id: number;
}
export interface DashboardPageTeamsApiRemoveDashboardPageTeamRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageTeamsApiremoveDashboardPageTeam
     */
    dashboard_page_id: number;
    /**
     * A team id.
     * @type number
     * @memberof DashboardPageTeamsApiremoveDashboardPageTeam
     */
    team_id: number;
}
export declare class ObjectDashboardPageTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageTeamsApiRequestFactory, responseProcessor?: DashboardPageTeamsApiResponseProcessor);
    /**
     * Check if a team is added to a dashboard page.
     * Check if a team is added to a dashboard page
     * @param param the request object
     */
    checkDashboardPageTeam(param: DashboardPageTeamsApiCheckDashboardPageTeamRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the teams having access to a dashboard page.
     * Get a list of teams having access to a dashboard page
     * @param param the request object
     */
    getDashboardPageTeams(param: DashboardPageTeamsApiGetDashboardPageTeamsRequest, options?: Configuration): Promise<InlineResponse200135>;
    /**
     * Deny a team access to a dashboard page.
     * Deny a team access to a dashboard page
     * @param param the request object
     */
    removeDashboardPageTeam(param: DashboardPageTeamsApiRemoveDashboardPageTeamRequest, options?: Configuration): Promise<void>;
}
export interface DashboardPageUsersApiCheckDashboardPageUserRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageUsersApicheckDashboardPageUser
     */
    dashboard_page_id: number;
    /**
     * A user id.
     * @type number
     * @memberof DashboardPageUsersApicheckDashboardPageUser
     */
    user_id: number;
}
export interface DashboardPageUsersApiGetDashboardPageUsersRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageUsersApigetDashboardPageUsers
     */
    dashboard_page_id: number;
}
export interface DashboardPageUsersApiRemoveDashboardPageUserRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageUsersApiremoveDashboardPageUser
     */
    dashboard_page_id: number;
    /**
     * A user id.
     * @type number
     * @memberof DashboardPageUsersApiremoveDashboardPageUser
     */
    user_id: number;
}
export declare class ObjectDashboardPageUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageUsersApiRequestFactory, responseProcessor?: DashboardPageUsersApiResponseProcessor);
    /**
     * Check if a user is added to a dashboard page.
     * Check if a user is added to a dashboard page
     * @param param the request object
     */
    checkDashboardPageUser(param: DashboardPageUsersApiCheckDashboardPageUserRequest, options?: Configuration): Promise<InlineResponse200137>;
    /**
     * Get a list of the users having access to a dashboard page.
     * Get a list of users having access to a dashboard page
     * @param param the request object
     */
    getDashboardPageUsers(param: DashboardPageUsersApiGetDashboardPageUsersRequest, options?: Configuration): Promise<InlineResponse200136>;
    /**
     * Deny a user access to a dashboard page.
     * Deny a user access to a dashboard page
     * @param param the request object
     */
    removeDashboardPageUser(param: DashboardPageUsersApiRemoveDashboardPageUserRequest, options?: Configuration): Promise<void>;
}
export interface DashboardPageWorkspacesApiAddDashboardPageWorkspaceRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageWorkspacesApiaddDashboardPageWorkspace
     */
    dashboard_page_id: number;
    /**
     * A workspace id.
     * @type number
     * @memberof DashboardPageWorkspacesApiaddDashboardPageWorkspace
     */
    workspace_id: number;
}
export interface DashboardPageWorkspacesApiCheckDashboardPageWorkspaceRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageWorkspacesApicheckDashboardPageWorkspace
     */
    dashboard_page_id: number;
    /**
     * A workspace id.
     * @type number
     * @memberof DashboardPageWorkspacesApicheckDashboardPageWorkspace
     */
    workspace_id: number;
}
export interface DashboardPageWorkspacesApiGetDashboardPageWorkspacesRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageWorkspacesApigetDashboardPageWorkspaces
     */
    dashboard_page_id: number;
}
export interface DashboardPageWorkspacesApiRemoveDashboardPageWorkspaceRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPageWorkspacesApiremoveDashboardPageWorkspace
     */
    dashboard_page_id: number;
    /**
     * A workspace id.
     * @type number
     * @memberof DashboardPageWorkspacesApiremoveDashboardPageWorkspace
     */
    workspace_id: number;
}
export declare class ObjectDashboardPageWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageWorkspacesApiRequestFactory, responseProcessor?: DashboardPageWorkspacesApiResponseProcessor);
    /**
     * Make a workspace available on a dashboard page.
     * Make a workspace available on a dashboard page
     * @param param the request object
     */
    addDashboardPageWorkspace(param: DashboardPageWorkspacesApiAddDashboardPageWorkspaceRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a workspaces is added to a dashboard page.
     * Check if a workspace is added to a dashboard page
     * @param param the request object
     */
    checkDashboardPageWorkspace(param: DashboardPageWorkspacesApiCheckDashboardPageWorkspaceRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the workspaces added to a dashboard page.
     * Get a list of workspaces added to a dashboard page
     * @param param the request object
     */
    getDashboardPageWorkspaces(param: DashboardPageWorkspacesApiGetDashboardPageWorkspacesRequest, options?: Configuration): Promise<InlineResponse200138>;
    /**
     * Remove a workspace from a dashboard page.
     * Remove a workspace from a dashboard page
     * @param param the request object
     */
    removeDashboardPageWorkspace(param: DashboardPageWorkspacesApiRemoveDashboardPageWorkspaceRequest, options?: Configuration): Promise<void>;
}
export interface DashboardPagesApiCreateDashBoardPageRequest {
    /**
     *
     * @type InlineObject52
     * @memberof DashboardPagesApicreateDashBoardPage
     */
    InlineObject52?: InlineObject52;
}
export interface DashboardPagesApiDeleteDashboardPageRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPagesApideleteDashboardPage
     */
    dashboard_page_id: number;
}
export interface DashboardPagesApiGetDashboardPageRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPagesApigetDashboardPage
     */
    dashboard_page_id: number;
}
export interface DashboardPagesApiGetDashboardPagesRequest {
    /**
     * A list of the dashboard page ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof DashboardPagesApigetDashboardPages
     */
    dashboard_page_ids?: Array<number>;
    /**
     * A list of fields that you want in the response. The allowed fields are: dashboard_page_id and name.
     * @type Array&lt;&#39;dashboard_page_id&#39; | &#39;name&#39;&gt;
     * @memberof DashboardPagesApigetDashboardPages
     */
    fields?: Array<'dashboard_page_id' | 'name'>;
}
export interface DashboardPagesApiUpdateDashboardPageRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof DashboardPagesApiupdateDashboardPage
     */
    dashboard_page_id: number;
    /**
     *
     * @type InlineObject53
     * @memberof DashboardPagesApiupdateDashboardPage
     */
    InlineObject53?: InlineObject53;
}
export declare class ObjectDashboardPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPagesApiRequestFactory, responseProcessor?: DashboardPagesApiResponseProcessor);
    /**
     * Create a new dashboard page.
     * Create a dashboard page
     * @param param the request object
     */
    createDashBoardPage(param: DashboardPagesApiCreateDashBoardPageRequest, options?: Configuration): Promise<InlineResponse200134>;
    /**
     * Delete a dashboard page.
     * Delete a dashboard page
     * @param param the request object
     */
    deleteDashboardPage(param: DashboardPagesApiDeleteDashboardPageRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single dashboard page.
     * Get the details of a single dashboard page
     * @param param the request object
     */
    getDashboardPage(param: DashboardPagesApiGetDashboardPageRequest, options?: Configuration): Promise<InlineResponse200134>;
    /**
     * Get a list of dashboard pages matching some optional criteria.
     * Get a list of dashboard pages
     * @param param the request object
     */
    getDashboardPages(param: DashboardPagesApiGetDashboardPagesRequest, options?: Configuration): Promise<InlineResponse200133>;
    /**
     * Update a dashboard page.
     * Update a dashboard page
     * @param param the request object
     */
    updateDashboardPage(param: DashboardPagesApiUpdateDashboardPageRequest, options?: Configuration): Promise<InlineResponse200134>;
}
export interface DiscardReasonBoardsApiGetDiscardReasonBoardsRequest {
    /**
     * A discard reason id.
     * @type number
     * @memberof DiscardReasonBoardsApigetDiscardReasonBoards
     */
    reason_id: number;
}
export declare class ObjectDiscardReasonBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonBoardsApiRequestFactory, responseProcessor?: DiscardReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the discard reason is available.
     * Get a list of boards where the discard reason is available
     * @param param the request object
     */
    getDiscardReasonBoards(param: DiscardReasonBoardsApiGetDiscardReasonBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
}
export interface DiscardReasonCardsApiGetDiscardReasonCardsRequest {
    /**
     * A discard reason id.
     * @type number
     * @memberof DiscardReasonCardsApigetDiscardReasonCards
     */
    reason_id: number;
}
export declare class ObjectDiscardReasonCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonCardsApiRequestFactory, responseProcessor?: DiscardReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the discard reason is available.
     * Get a list of cards where the discard reason is available
     * @param param the request object
     */
    getDiscardReasonCards(param: DiscardReasonCardsApiGetDiscardReasonCardsRequest, options?: Configuration): Promise<InlineResponse20012>;
}
export interface DiscardReasonHistoryApiGetDiscardReasonsHistoryRequest {
    /**
     * A list of the discard reason ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    reason_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the discard reason.
     * @type Array&lt;&#39;reason_created&#39; | &#39;reason_updated&#39; | &#39;reason_disabled&#39; | &#39;reason_enabled&#39; | &#39;reason_deleted&#39; | &#39;reason_added_to_board&#39; | &#39;reason_removed_from_board&#39;&gt;
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof DiscardReasonHistoryApigetDiscardReasonsHistory
     */
    per_page?: number;
}
export declare class ObjectDiscardReasonHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonHistoryApiRequestFactory, responseProcessor?: DiscardReasonHistoryApiResponseProcessor);
    /**
     * Get a list of discard reasons creation, deletion, update events matching some optional criteria.
     * Get a list of discard reasons creation, deletion, update events
     * @param param the request object
     */
    getDiscardReasonsHistory(param: DiscardReasonHistoryApiGetDiscardReasonsHistoryRequest, options?: Configuration): Promise<InlineResponse200141>;
}
export interface DiscardReasonsApiCreateDiscardReasonRequest {
    /**
     *
     * @type InlineObject54
     * @memberof DiscardReasonsApicreateDiscardReason
     */
    InlineObject54?: InlineObject54;
}
export interface DiscardReasonsApiDeleteDiscardReasonRequest {
    /**
     * A discard reason id.
     * @type number
     * @memberof DiscardReasonsApideleteDiscardReason
     */
    reason_id: number;
    /**
     * The id of a discard reason with which to discard the cards which are currently discarded with the discard reason which is about to be deleted.
     * @type number
     * @memberof DiscardReasonsApideleteDiscardReason
     */
    replace_with_reason_id?: number;
}
export interface DiscardReasonsApiGetDiscardReasonRequest {
    /**
     * A discard reason id.
     * @type number
     * @memberof DiscardReasonsApigetDiscardReason
     */
    reason_id: number;
}
export interface DiscardReasonsApiGetDiscardReasonsRequest {
    /**
     * A list of the discard reason ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    reason_ids?: Array<number>;
    /**
     * Find a discard reason by its full label.
     * @type string
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    label?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled discard reasons. When set to 0 you will only get disabled discard reasons.
     * @type 0 | 1
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: reason_id, label, availability and is_enabled.
     * @type Array&lt;&#39;reason_id&#39; | &#39;label&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    fields?: Array<'reason_id' | 'label' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids and card_count.
     * @type Array&lt;&#39;board_ids&#39; | &#39;board_count&#39; | &#39;card_ids&#39; | &#39;card_count&#39;&gt;
     * @memberof DiscardReasonsApigetDiscardReasons
     */
    expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count'>;
}
export interface DiscardReasonsApiUpdateDiscardReasonRequest {
    /**
     * A discard reason id.
     * @type number
     * @memberof DiscardReasonsApiupdateDiscardReason
     */
    reason_id: number;
    /**
     *
     * @type InlineObject55
     * @memberof DiscardReasonsApiupdateDiscardReason
     */
    InlineObject55?: InlineObject55;
}
export declare class ObjectDiscardReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonsApiRequestFactory, responseProcessor?: DiscardReasonsApiResponseProcessor);
    /**
     * Create a new discard reason.
     * Create a discard reason
     * @param param the request object
     */
    createDiscardReason(param: DiscardReasonsApiCreateDiscardReasonRequest, options?: Configuration): Promise<InlineResponse200140>;
    /**
     * Delete a discard reason.
     * Delete a discard reason
     * @param param the request object
     */
    deleteDiscardReason(param: DiscardReasonsApiDeleteDiscardReasonRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single discard reason.
     * Get the details of a single discard reason
     * @param param the request object
     */
    getDiscardReason(param: DiscardReasonsApiGetDiscardReasonRequest, options?: Configuration): Promise<InlineResponse200140>;
    /**
     * Get a list of discard reasons matching some optional criteria.
     * Get a list of discard reasons
     * @param param the request object
     */
    getDiscardReasons(param: DiscardReasonsApiGetDiscardReasonsRequest, options?: Configuration): Promise<InlineResponse200139>;
    /**
     * Update a discard reason.
     * Update a discard reason
     * @param param the request object
     */
    updateDiscardReason(param: DiscardReasonsApiUpdateDiscardReasonRequest, options?: Configuration): Promise<InlineResponse200140>;
}
export interface EmailIntegrationErrorsApiGetEmailIntegrationErrorsRequest {
    /**
     * The email address of the sender.
     * @type string
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    sender?: string;
    /**
     * The email address of a recipent.
     * @type string
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    receiver?: string;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof EmailIntegrationErrorsApigetEmailIntegrationErrors
     */
    per_page?: number;
}
export declare class ObjectEmailIntegrationErrorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationErrorsApiRequestFactory, responseProcessor?: EmailIntegrationErrorsApiResponseProcessor);
    /**
     * Get a list of errors which occurred while emails were being processed
     * Get a list of errors from the email integration.
     * @param param the request object
     */
    getEmailIntegrationErrors(param: EmailIntegrationErrorsApiGetEmailIntegrationErrorsRequest, options?: Configuration): Promise<InlineResponse200142>;
}
export interface EmailIntegrationHistoryApiGetEmailIntegrationHistoryRequest {
    /**
     * Sender of the email.
     * @type string
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    sender?: string;
    /**
     * Receiver of the email.
     * @type string
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    receiver?: string;
    /**
     * Status of the email.
     * @type string
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    status?: string;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof EmailIntegrationHistoryApigetEmailIntegrationHistory
     */
    per_page?: number;
}
export declare class ObjectEmailIntegrationHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationHistoryApiRequestFactory, responseProcessor?: EmailIntegrationHistoryApiResponseProcessor);
    /**
     * Get a list of the emails received by the email integration and their status.
     * Get a list of the emails received by the email integration and their status.
     * @param param the request object
     */
    getEmailIntegrationHistory(param: EmailIntegrationHistoryApiGetEmailIntegrationHistoryRequest, options?: Configuration): Promise<InlineResponse200143>;
}
export interface ExportsApiGetApiRequestHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    format?: string;
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * A list of the methods that you have used while executing the request.
     * @type Array&lt;&#39;get&#39; | &#39;put&#39; | &#39;post&#39; | &#39;patch&#39; | &#39;delete&#39;&gt;
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>;
    /**
     * A list of the status codes that you have received when executing the request.
     * @type Array&lt;200 | 400 | 401 | 403 | 429 | 500 | 503&gt;
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetApiRequestHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetBlockReasonsHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    format?: string;
    /**
     * A list of the block reason ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    reason_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the block reason.
     * @type Array&lt;&#39;reason_created&#39; | &#39;reason_updated&#39; | &#39;reason_disabled&#39; | &#39;reason_enabled&#39; | &#39;reason_deleted&#39; | &#39;reason_added_to_board&#39; | &#39;reason_removed_from_board&#39;&gt;
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetBlockReasonsHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetBusinessRulesExecutionHistoryExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    format?: string;
    /**
     * A list of the business_rule_ids that you want to get the executions for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    business_rule_ids?: Array<number>;
    /**
     * A list of the card ids on which the business rules were executed on.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    executed_on_card_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetBusinessRulesExecutionHistoryExport
     */
    per_page?: number;
}
export interface ExportsApiGetCardTemplatesHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    format?: string;
    /**
     * A list of the card template ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    template_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the card type.
     * @type Array&lt;&#39;template_created&#39; | &#39;template_updated&#39; | &#39;template_disabled&#39; | &#39;template_enabled&#39; | &#39;template_deleted&#39; | &#39;template_added_to_board&#39; | &#39;template_updated_for_board&#39; | &#39;template_removed_from_board&#39; | &#39;template_structure_updated&#39;&gt;
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board' | 'template_structure_updated'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetCardTemplatesHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetCardTypesHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    format?: string;
    /**
     * A list of the card type ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    type_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the card type.
     * @type Array&lt;&#39;type_created&#39; | &#39;type_updated&#39; | &#39;type_disabled&#39; | &#39;type_enabled&#39; | &#39;type_deleted&#39; | &#39;type_added_to_board&#39; | &#39;type_updated_for_board&#39; | &#39;type_removed_from_board&#39;&gt;
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetCardTypesHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetCustomFieldHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    format?: string;
    /**
     * A list of ids of the custom fields that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    field_ids?: Array<number>;
    /**
     * Type of action executed on the custom field.
     * @type Array&lt;&#39;custom_field_created&#39; | &#39;custom_field_updated&#39; | &#39;custom_field_deleted&#39; | &#39;custom_field_shared&#39; | &#39;custom_field_unshared&#39; | &#39;custom_field_added_to_board&#39; | &#39;custom_field_removed_from_board&#39; | &#39;custom_field_board_properties_updated&#39;&gt;
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetCustomFieldHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetDiscardReasonsHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    format?: string;
    /**
     * A list of the block reason ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    reason_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the block reason.
     * @type Array&lt;&#39;reason_created&#39; | &#39;reason_updated&#39; | &#39;reason_disabled&#39; | &#39;reason_enabled&#39; | &#39;reason_deleted&#39; | &#39;reason_added_to_board&#39; | &#39;reason_removed_from_board&#39;&gt;
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetDiscardReasonsHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetEmailIntegrationErrorsExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    format?: string;
    /**
     * The email address of the sender.
     * @type string
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    sender?: string;
    /**
     * The email address of a recipent.
     * @type string
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    receiver?: string;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetEmailIntegrationErrorsExport
     */
    per_page?: number;
}
export interface ExportsApiGetEmailIntegrationHistoryExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    format?: string;
    /**
     * Sender of the email.
     * @type string
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    sender?: string;
    /**
     * Receiver of the email.
     * @type string
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    receiver?: string;
    /**
     * Status of the email.
     * @type string
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    status?: string;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetEmailIntegrationHistoryExport
     */
    per_page?: number;
}
export interface ExportsApiGetLoggedTimesHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    format?: string;
    /**
     * A list of the logged time ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    logged_time_ids?: Array<number>;
    /**
     * A list of card ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    card_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the logged time.
     * @type Array&lt;&#39;logged_time_created&#39; | &#39;logged_time_updated&#39; | &#39;logged_time_deleted&#39; | &#39;logged_time_transferred_to_card_after_subtask_deleted&#39; | &#39;logged_time_updated_after_subtask_converted_to_card&#39;&gt;
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetLoggedTimesHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetOldApiRequestHistoryExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    format?: string;
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    user_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetOldApiRequestHistoryExport
     */
    per_page?: number;
}
export interface ExportsApiGetStickersHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetStickersHistoryExports
     */
    format?: string;
    /**
     * A list of the sticker ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetStickersHistoryExports
     */
    sticker_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetStickersHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the sticker.
     * @type Array&lt;&#39;sticker_created&#39; | &#39;sticker_updated&#39; | &#39;sticker_disabled&#39; | &#39;sticker_enabled&#39; | &#39;sticker_deleted&#39; | &#39;sticker_added_to_board&#39; | &#39;sticker_removed_from_board&#39;&gt;
     * @memberof ExportsApigetStickersHistoryExports
     */
    event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetStickersHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetStickersHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetStickersHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetStickersHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetStickersHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetTagsHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetTagsHistoryExports
     */
    format?: string;
    /**
     * A list of the tag ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetTagsHistoryExports
     */
    tag_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetTagsHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the tag.
     * @type Array&lt;&#39;tag_created&#39; | &#39;tag_updated&#39; | &#39;tag_disabled&#39; | &#39;tag_enabled&#39; | &#39;tag_deleted&#39; | &#39;tag_added_to_board&#39; | &#39;tag_removed_from_board&#39;&gt;
     * @memberof ExportsApigetTagsHistoryExports
     */
    event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetTagsHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetTagsHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetTagsHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetTagsHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetTagsHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetTeamsHistoryExportsRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetTeamsHistoryExports
     */
    format?: string;
    /**
     * A list of the team ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetTeamsHistoryExports
     */
    team_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetTeamsHistoryExports
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the team.
     * @type Array&lt;&#39;team_created&#39; | &#39;team_updated&#39; | &#39;team_deleted&#39; | &#39;team_added_to_board&#39; | &#39;team_change_role_for_board&#39; | &#39;team_removed_from_board&#39; | &#39;user_added_to_team&#39; | &#39;user_removed_from_team&#39; | &#39;user_added_to_team_managers&#39; | &#39;user_removed_from_team_managers&#39;&gt;
     * @memberof ExportsApigetTeamsHistoryExports
     */
    event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetTeamsHistoryExports
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetTeamsHistoryExports
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetTeamsHistoryExports
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetTeamsHistoryExports
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetTeamsHistoryExports
     */
    per_page?: number;
}
export interface ExportsApiGetUsersHistoryExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetUsersHistoryExport
     */
    format?: string;
    /**
     * A list of the user ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetUsersHistoryExport
     */
    affected_user_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetUsersHistoryExport
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the webhook.
     * @type Array&lt;&#39;user_confirmed&#39; | &#39;user_deleted&#39; | &#39;email_changed&#39; | &#39;username_changed&#39; | &#39;realname_changed&#39; | &#39;avatar_changed&#39; | &#39;tfa_changed&#39; | &#39;tfa_enabled&#39; | &#39;tfa_disabled&#39; | &#39;tfa_key_changed&#39; | &#39;tfa_key_reset&#39; | &#39;api_key_changed&#39; | &#39;timezone_changed&#39; | &#39;language_changed&#39; | &#39;password_changed&#39; | &#39;user_disabled&#39; | &#39;user_enabled&#39; | &#39;wip_limits_changed&#39; | &#39;global_privilege_added&#39; | &#39;global_privilege_removed&#39; | &#39;made_wm&#39; | &#39;made_non_wm&#39; | &#39;assigned_to_board&#39; | &#39;unassigned_from_board&#39; | &#39;board_role_changed&#39; | &#39;invitation_sent&#39; | &#39;invitation_code_changed&#39;&gt;
     * @memberof ExportsApigetUsersHistoryExport
     */
    event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetUsersHistoryExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetUsersHistoryExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetUsersHistoryExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetUsersHistoryExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetUsersHistoryExport
     */
    per_page?: number;
}
export interface ExportsApiGetUsersLastActivityExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetUsersLastActivityExport
     */
    format?: string;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetUsersLastActivityExport
     */
    user_ids?: Array<number>;
    /**
     * When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @type 0 | 1
     * @memberof ExportsApigetUsersLastActivityExport
     */
    is_enabled?: 0 | 1;
    /**
     * When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @type 0 | 1
     * @memberof ExportsApigetUsersLastActivityExport
     */
    is_confirmed?: 0 | 1;
    /**
     * When set to 1 you will only get users which are assigned to the boards you are assigned to.
     * @type 0 | 1
     * @memberof ExportsApigetUsersLastActivityExport
     */
    if_assigned_where_i_am?: 0 | 1;
}
export interface ExportsApiGetWebhooksHistoryExportRequest {
    /**
     * The allowed values are excel and json
     * @type string
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    format?: string;
    /**
     * A list of the webhook ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    webhook_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the webhook.
     * @type Array&lt;&#39;created&#39; | &#39;updated&#39; | &#39;deleted&#39;&gt;
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    event_types?: Array<'created' | 'updated' | 'deleted'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof ExportsApigetWebhooksHistoryExport
     */
    per_page?: number;
}
export declare class ObjectExportsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ExportsApiRequestFactory, responseProcessor?: ExportsApiResponseProcessor);
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v2 requests
     * @param param the request object
     */
    getApiRequestHistoryExports(param: ExportsApiGetApiRequestHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of block reasons management history events.
     * Export a list of block reasons management history events.
     * @param param the request object
     */
    getBlockReasonsHistoryExports(param: ExportsApiGetBlockReasonsHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of business rule executions matching some optional criteria.
     * Export a list of business rule executions
     * @param param the request object
     */
    getBusinessRulesExecutionHistoryExport(param: ExportsApiGetBusinessRulesExecutionHistoryExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of card templates management history events.
     * Export a list of card templates management history events.
     * @param param the request object
     */
    getCardTemplatesHistoryExports(param: ExportsApiGetCardTemplatesHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of card types management history events.
     * Export a list of card types management history events.
     * @param param the request object
     */
    getCardTypesHistoryExports(param: ExportsApiGetCardTypesHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of custom field management history events.
     * Export a list of custom field management history events.
     * @param param the request object
     */
    getCustomFieldHistoryExports(param: ExportsApiGetCustomFieldHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of discard reasons management history events.
     * Export a list of discard reasons management history events.
     * @param param the request object
     */
    getDiscardReasonsHistoryExports(param: ExportsApiGetDiscardReasonsHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of error logs from the email integration.
     * Export a list of error logs from the email integration.
     * @param param the request object
     */
    getEmailIntegrationErrorsExport(param: ExportsApiGetEmailIntegrationErrorsExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of the emails received by the email integration and their status.
     * Export a list of the emails received by the email integration and their status.
     * @param param the request object
     */
    getEmailIntegrationHistoryExport(param: ExportsApiGetEmailIntegrationHistoryExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of logged times management history events.
     * Export a list of logged times management history events.
     * @param param the request object
     */
    getLoggedTimesHistoryExports(param: ExportsApiGetLoggedTimesHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v1 requests
     * @param param the request object
     */
    getOldApiRequestHistoryExport(param: ExportsApiGetOldApiRequestHistoryExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of stickers management history events.
     * Export a list of stickers management history events.
     * @param param the request object
     */
    getStickersHistoryExports(param: ExportsApiGetStickersHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of tags management history events.
     * Export a list of tags management history events.
     * @param param the request object
     */
    getTagsHistoryExports(param: ExportsApiGetTagsHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of teams management history events.
     * Export a list of teams management history events.
     * @param param the request object
     */
    getTeamsHistoryExports(param: ExportsApiGetTeamsHistoryExportsRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of user management history events.
     * Export a list of user management history events.
     * @param param the request object
     */
    getUsersHistoryExport(param: ExportsApiGetUsersHistoryExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of users last activity.
     * Export a list of users last activity.
     * @param param the request object
     */
    getUsersLastActivityExport(param: ExportsApiGetUsersLastActivityExportRequest, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of webhooks creation, deletion, update events matching some optional criteria.
     * Export a list of webhooks creation, deletion, update events
     * @param param the request object
     */
    getWebhooksHistoryExport(param: ExportsApiGetWebhooksHistoryExportRequest, options?: Configuration): Promise<JsonExport>;
}
export interface GlobalUserPrivilegesApiGetGlobalUserPrivilegeRequest {
    /**
     * A user id.
     * @type number
     * @memberof GlobalUserPrivilegesApigetGlobalUserPrivilege
     */
    user_id: number;
    /**
     * A privilege name.
     * @type string
     * @memberof GlobalUserPrivilegesApigetGlobalUserPrivilege
     */
    privilege_name: string;
}
export interface GlobalUserPrivilegesApiGetGlobalUserPrivilegesRequest {
    /**
     * A user id.
     * @type number
     * @memberof GlobalUserPrivilegesApigetGlobalUserPrivileges
     */
    user_id: number;
}
export interface GlobalUserPrivilegesApiRemoveGlobalUserPrivilegeRequest {
    /**
     * A user id.
     * @type number
     * @memberof GlobalUserPrivilegesApiremoveGlobalUserPrivilege
     */
    user_id: number;
    /**
     * A privilege name.
     * @type string
     * @memberof GlobalUserPrivilegesApiremoveGlobalUserPrivilege
     */
    privilege_name: string;
}
export interface GlobalUserPrivilegesApiSetGlobalUserPrivilegeRequest {
    /**
     * A user id.
     * @type number
     * @memberof GlobalUserPrivilegesApisetGlobalUserPrivilege
     */
    user_id: number;
    /**
     * A privilege name.
     * @type string
     * @memberof GlobalUserPrivilegesApisetGlobalUserPrivilege
     */
    privilege_name: string;
}
export declare class ObjectGlobalUserPrivilegesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: GlobalUserPrivilegesApiRequestFactory, responseProcessor?: GlobalUserPrivilegesApiResponseProcessor);
    /**
     * Check if a user has a global privilege.
     * Check if a user has a global privilege
     * @param param the request object
     */
    getGlobalUserPrivilege(param: GlobalUserPrivilegesApiGetGlobalUserPrivilegeRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of all possible global privileges and whether the user has them.
     * Get a list of all possible global privileges and whether the user has them
     * @param param the request object
     */
    getGlobalUserPrivileges(param: GlobalUserPrivilegesApiGetGlobalUserPrivilegesRequest, options?: Configuration): Promise<InlineResponse200183>;
    /**
     * Remove a global privilege from the user.
     * Remove a global privilege from the user
     * @param param the request object
     */
    removeGlobalUserPrivilege(param: GlobalUserPrivilegesApiRemoveGlobalUserPrivilegeRequest, options?: Configuration): Promise<void>;
    /**
     * Give the user a global privilege.
     * Give the user a global privilege
     * @param param the request object
     */
    setGlobalUserPrivilege(param: GlobalUserPrivilegesApiSetGlobalUserPrivilegeRequest, options?: Configuration): Promise<void>;
}
export interface LaneSectionLimitsApiGetLaneSectionLimitsRequest {
    /**
     * A board id.
     * @type number
     * @memberof LaneSectionLimitsApigetLaneSectionLimits
     */
    board_id: number;
}
export interface LaneSectionLimitsApiSetLaneSectionLimitRequest {
    /**
     * A board id.
     * @type number
     * @memberof LaneSectionLimitsApisetLaneSectionLimit
     */
    board_id: number;
    /**
     *
     * @type InlineObject12
     * @memberof LaneSectionLimitsApisetLaneSectionLimit
     */
    InlineObject12?: InlineObject12;
}
export declare class ObjectLaneSectionLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LaneSectionLimitsApiRequestFactory, responseProcessor?: LaneSectionLimitsApiResponseProcessor);
    /**
     * Get a list of the lane section limits for a specified board.
     * Get a list of lane section limits
     * @param param the request object
     */
    getLaneSectionLimits(param: LaneSectionLimitsApiGetLaneSectionLimitsRequest, options?: Configuration): Promise<InlineResponse20031>;
    /**
     * Set a lane section limit.
     * Set a lane section limit
     * @param param the request object
     */
    setLaneSectionLimit(param: LaneSectionLimitsApiSetLaneSectionLimitRequest, options?: Configuration): Promise<InlineResponse20032>;
}
export interface LanesApiCreateLaneRequest {
    /**
     * A board id.
     * @type number
     * @memberof LanesApicreateLane
     */
    board_id: number;
    /**
     *
     * @type InlineObject13
     * @memberof LanesApicreateLane
     */
    InlineObject13?: InlineObject13;
}
export interface LanesApiDeleteLaneRequest {
    /**
     * A board id.
     * @type number
     * @memberof LanesApideleteLane
     */
    board_id: number;
    /**
     * A lane id.
     * @type number
     * @memberof LanesApideleteLane
     */
    lane_id: number;
    /**
     * The id of a lane to which to move the cards from the deleted lane, if there are any.
     * @type number
     * @memberof LanesApideleteLane
     */
    move_cards_to_lane_id?: number;
    /**
     * The id of a lane to which to move the cycle time data associated with the deleted lane, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     * @type number
     * @memberof LanesApideleteLane
     */
    move_metrics_to_lane_id?: number;
}
export interface LanesApiGetLaneRequest {
    /**
     * A board id.
     * @type number
     * @memberof LanesApigetLane
     */
    board_id: number;
    /**
     * A lane id.
     * @type number
     * @memberof LanesApigetLane
     */
    lane_id: number;
}
export interface LanesApiGetLanesRequest {
    /**
     * A board id.
     * @type number
     * @memberof LanesApigetLanes
     */
    board_id: number;
    /**
     * A list of fields that you want in the response. The allowed fields are: lane_id, workflow, parent_lane_id, position, name, description and color.
     * @type Array&lt;&#39;lane_id&#39; | &#39;workflow_id&#39; | &#39;parent_lane_id&#39; | &#39;position&#39; | &#39;name&#39; | &#39;description&#39; | &#39;color&#39;&gt;
     * @memberof LanesApigetLanes
     */
    fields?: Array<'lane_id' | 'workflow_id' | 'parent_lane_id' | 'position' | 'name' | 'description' | 'color'>;
}
export interface LanesApiUpdateLaneRequest {
    /**
     * A board id.
     * @type number
     * @memberof LanesApiupdateLane
     */
    board_id: number;
    /**
     * A lane id.
     * @type number
     * @memberof LanesApiupdateLane
     */
    lane_id: number;
    /**
     *
     * @type InlineObject14
     * @memberof LanesApiupdateLane
     */
    InlineObject14?: InlineObject14;
}
export declare class ObjectLanesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LanesApiRequestFactory, responseProcessor?: LanesApiResponseProcessor);
    /**
     * Create a new lane.
     * Create a lane
     * @param param the request object
     */
    createLane(param: LanesApiCreateLaneRequest, options?: Configuration): Promise<InlineResponse20034>;
    /**
     * Delete a lane.
     * Delete a lane
     * @param param the request object
     */
    deleteLane(param: LanesApiDeleteLaneRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single lane.
     * Get the details of a single lane
     * @param param the request object
     */
    getLane(param: LanesApiGetLaneRequest, options?: Configuration): Promise<InlineResponse20035>;
    /**
     * Get a list of the lanes in a specified board.
     * Get a list of lanes
     * @param param the request object
     */
    getLanes(param: LanesApiGetLanesRequest, options?: Configuration): Promise<InlineResponse20033>;
    /**
     * Update a lane.
     * Update a lane
     * @param param the request object
     */
    updateLane(param: LanesApiUpdateLaneRequest, options?: Configuration): Promise<InlineResponse20035>;
}
export interface LinkedCardsApiGetLinkedCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof LinkedCardsApigetLinkedCards
     */
    card_id: number;
}
export declare class ObjectLinkedCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LinkedCardsApiRequestFactory, responseProcessor?: LinkedCardsApiResponseProcessor);
    /**
     * Get a list of the cards that are linked to a given card ordered by position.
     * Get a list of linked cards
     * @param param the request object
     */
    getLinkedCards(param: LinkedCardsApiGetLinkedCardsRequest, options?: Configuration): Promise<InlineResponse200108>;
}
export interface LoggedTimeApiAddCardLoggedTimeRequest {
    /**
     *
     * @type InlineObject56
     * @memberof LoggedTimeApiaddCardLoggedTime
     */
    InlineObject56?: InlineObject56;
}
export interface LoggedTimeApiGetLoggedTimeRequest {
    /**
     * A logged time id.
     * @type number
     * @memberof LoggedTimeApigetLoggedTime
     */
    logged_time_id: number;
}
export interface LoggedTimeApiGetLoggedTimesRequest {
    /**
     * Filter logged time by cards ids or id.
     * @type Array&lt;number&gt;
     * @memberof LoggedTimeApigetLoggedTimes
     */
    card_ids?: Array<number>;
    /**
     * Filter logged time by user ids or id.
     * @type Array&lt;number&gt;
     * @memberof LoggedTimeApigetLoggedTimes
     */
    user_ids?: Array<number>;
    /**
     * When set to 1 you will the get logged time for all tasks and subtasks.
     * @type number
     * @memberof LoggedTimeApigetLoggedTimes
     */
    include_logged_time_for_subtasks?: number;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    to_date?: Date;
    /**
     * The first date and time for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    logged_from?: Date;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    logged_to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    logged_from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof LoggedTimeApigetLoggedTimes
     */
    logged_to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof LoggedTimeApigetLoggedTimes
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     * @type number
     * @memberof LoggedTimeApigetLoggedTimes
     */
    per_page?: number;
}
export interface LoggedTimeApiRemoveLoggedTimeRequest {
    /**
     * A logged time id.
     * @type number
     * @memberof LoggedTimeApiremoveLoggedTime
     */
    logged_time_id: number;
}
export interface LoggedTimeApiUpdateLoggedTimeRequest {
    /**
     * A logged time id.
     * @type number
     * @memberof LoggedTimeApiupdateLoggedTime
     */
    logged_time_id: number;
    /**
     *
     * @type InlineObject57
     * @memberof LoggedTimeApiupdateLoggedTime
     */
    InlineObject57?: InlineObject57;
}
export declare class ObjectLoggedTimeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeApiRequestFactory, responseProcessor?: LoggedTimeApiResponseProcessor);
    /**
     * Add a logged time to a card
     * Add a logged time to a card
     * @param param the request object
     */
    addCardLoggedTime(param: LoggedTimeApiAddCardLoggedTimeRequest, options?: Configuration): Promise<InlineResponse200145>;
    /**
     * Get the details of a single logged time.
     * Get the details of a single logged time
     * @param param the request object
     */
    getLoggedTime(param: LoggedTimeApiGetLoggedTimeRequest, options?: Configuration): Promise<InlineResponse200145>;
    /**
     * Get a list of the logged times added to card or cards. The logged times are listed in the order in which they were added.
     * Get a list of logged times
     * @param param the request object
     */
    getLoggedTimes(param: LoggedTimeApiGetLoggedTimesRequest, options?: Configuration): Promise<InlineResponse200144>;
    /**
     * Remove a logged time from a card.
     * Remove a logged time from a card
     * @param param the request object
     */
    removeLoggedTime(param: LoggedTimeApiRemoveLoggedTimeRequest, options?: Configuration): Promise<void>;
    /**
     * Update card logged time.
     * Update card logged time.
     * @param param the request object
     */
    updateLoggedTime(param: LoggedTimeApiUpdateLoggedTimeRequest, options?: Configuration): Promise<void>;
}
export interface LoggedTimeHistoryApiGetLoggedTimeHistoryRequest {
    /**
     * A list of the logged time ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    logged_time_ids?: Array<number>;
    /**
     * A list of card ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    card_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the logged time.
     * @type Array&lt;&#39;logged_time_created&#39; | &#39;logged_time_updated&#39; | &#39;logged_time_deleted&#39; | &#39;logged_time_transferred_to_card_after_subtask_deleted&#39; | &#39;logged_time_updated_after_subtask_converted_to_card&#39;&gt;
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof LoggedTimeHistoryApigetLoggedTimeHistory
     */
    per_page?: number;
}
export declare class ObjectLoggedTimeHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeHistoryApiRequestFactory, responseProcessor?: LoggedTimeHistoryApiResponseProcessor);
    /**
     * Get a list of logged times creation, deletion, update events matching some optional criteria.
     * Get a list of logged times creation, deletion, update events
     * @param param the request object
     */
    getLoggedTimeHistory(param: LoggedTimeHistoryApiGetLoggedTimeHistoryRequest, options?: Configuration): Promise<InlineResponse200146>;
}
export interface ManagedWorkspacesApiGetManagedWorkspaceRequest {
    /**
     * A user id.
     * @type number
     * @memberof ManagedWorkspacesApigetManagedWorkspace
     */
    user_id: number;
}
export declare class ObjectManagedWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ManagedWorkspacesApiRequestFactory, responseProcessor?: ManagedWorkspacesApiResponseProcessor);
    /**
     * Get a list of the workspaces in which the user is a workspace manager.
     * Get a list of managed workspaces
     * @param param the request object
     */
    getManagedWorkspace(param: ManagedWorkspacesApiGetManagedWorkspaceRequest, options?: Configuration): Promise<InlineResponse200186>;
}
export interface MeApiGetActiveUserDataRequest {
}
export declare class ObjectMeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MeApiRequestFactory, responseProcessor?: MeApiResponseProcessor);
    /**
     * Get the data about the active user.
     * Get the data about the active user
     * @param param the request object
     */
    getActiveUserData(param: MeApiGetActiveUserDataRequest, options?: Configuration): Promise<InlineResponse200147>;
}
export interface MergedAreasApiCreateMergedAreaRequest {
    /**
     * A board id.
     * @type number
     * @memberof MergedAreasApicreateMergedArea
     */
    board_id: number;
    /**
     *
     * @type InlineObject15
     * @memberof MergedAreasApicreateMergedArea
     */
    InlineObject15?: InlineObject15;
}
export interface MergedAreasApiDeleteMergedAreaRequest {
    /**
     * A board id.
     * @type number
     * @memberof MergedAreasApideleteMergedArea
     */
    board_id: number;
    /**
     * A area id.
     * @type number
     * @memberof MergedAreasApideleteMergedArea
     */
    area_id: number;
}
export interface MergedAreasApiGetMergedAreaRequest {
    /**
     * A board id.
     * @type number
     * @memberof MergedAreasApigetMergedArea
     */
    board_id: number;
    /**
     * A area id.
     * @type number
     * @memberof MergedAreasApigetMergedArea
     */
    area_id: number;
}
export interface MergedAreasApiGetMergedAreasRequest {
    /**
     * A board id.
     * @type number
     * @memberof MergedAreasApigetMergedAreas
     */
    board_id: number;
}
export interface MergedAreasApiUpdateMergedAreaRequest {
    /**
     * A board id.
     * @type number
     * @memberof MergedAreasApiupdateMergedArea
     */
    board_id: number;
    /**
     * A area id.
     * @type number
     * @memberof MergedAreasApiupdateMergedArea
     */
    area_id: number;
    /**
     *
     * @type InlineObject16
     * @memberof MergedAreasApiupdateMergedArea
     */
    InlineObject16?: InlineObject16;
}
export declare class ObjectMergedAreasApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MergedAreasApiRequestFactory, responseProcessor?: MergedAreasApiResponseProcessor);
    /**
     * Create a new merged area.
     * Create a merged area
     * @param param the request object
     */
    createMergedArea(param: MergedAreasApiCreateMergedAreaRequest, options?: Configuration): Promise<InlineResponse20037>;
    /**
     * Split the merged area into its individual cells.
     * Delete a merged area
     * @param param the request object
     */
    deleteMergedArea(param: MergedAreasApiDeleteMergedAreaRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single merged area.
     * Get the details of a single merged area
     * @param param the request object
     */
    getMergedArea(param: MergedAreasApiGetMergedAreaRequest, options?: Configuration): Promise<InlineResponse20038>;
    /**
     * Get a list of the merged areas in a specified board.
     * Get a list of merged areas
     * @param param the request object
     */
    getMergedAreas(param: MergedAreasApiGetMergedAreasRequest, options?: Configuration): Promise<InlineResponse20036>;
    /**
     * Update a merged area.
     * Update a merged area
     * @param param the request object
     */
    updateMergedArea(param: MergedAreasApiUpdateMergedAreaRequest, options?: Configuration): Promise<InlineResponse20038>;
}
export interface MyApiKeyGenerateApiGenerateApiKeyRequest {
}
export declare class ObjectMyApiKeyGenerateApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyApiKeyGenerateApiRequestFactory, responseProcessor?: MyApiKeyGenerateApiResponseProcessor);
    /**
     * Generate an api key.
     * Generate an api key
     * @param param the request object
     */
    generateApiKey(param: MyApiKeyGenerateApiGenerateApiKeyRequest, options?: Configuration): Promise<InlineResponse200148>;
}
export interface MyAppSettingsApiGetMyAppSettingRequest {
    /**
     * A setting name.
     * @type string
     * @memberof MyAppSettingsApigetMyAppSetting
     */
    setting_name: string;
}
export interface MyAppSettingsApiGetMyAppSettingsRequest {
}
export interface MyAppSettingsApiRemoveMyAppSettingRequest {
    /**
     * A setting name.
     * @type string
     * @memberof MyAppSettingsApiremoveMyAppSetting
     */
    setting_name: string;
}
export declare class ObjectMyAppSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyAppSettingsApiRequestFactory, responseProcessor?: MyAppSettingsApiResponseProcessor);
    /**
     * Get the details of an app setting and the value you have set for it.
     * Get the details of an app setting and the value you have set for it
     * @param param the request object
     */
    getMyAppSetting(param: MyAppSettingsApiGetMyAppSettingRequest, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all app settings and the values you have selected.
     * Get a list of all app settings and the values you have selected
     * @param param the request object
     */
    getMyAppSettings(param: MyAppSettingsApiGetMyAppSettingsRequest, options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of an app setting.
     * Remove the value of an app setting
     * @param param the request object
     */
    removeMyAppSetting(param: MyAppSettingsApiRemoveMyAppSettingRequest, options?: Configuration): Promise<void>;
}
export interface MyBoardSettingsApiGetMyBoardSettingRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyBoardSettingsApigetMyBoardSetting
     */
    board_id: number;
    /**
     * A setting name.
     * @type string
     * @memberof MyBoardSettingsApigetMyBoardSetting
     */
    setting_name: string;
}
export interface MyBoardSettingsApiGetMyBoardSettingsRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyBoardSettingsApigetMyBoardSettings
     */
    board_id: number;
}
export interface MyBoardSettingsApiRemoveMyBoardSettingRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyBoardSettingsApiremoveMyBoardSetting
     */
    board_id: number;
    /**
     * A setting name.
     * @type string
     * @memberof MyBoardSettingsApiremoveMyBoardSetting
     */
    setting_name: string;
}
export declare class ObjectMyBoardSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyBoardSettingsApiRequestFactory, responseProcessor?: MyBoardSettingsApiResponseProcessor);
    /**
     * Get the details of an board setting and the value you have set for it.
     * Get the details of an board setting and the value you have set for it
     * @param param the request object
     */
    getMyBoardSetting(param: MyBoardSettingsApiGetMyBoardSettingRequest, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all board settings and the values you have selected.
     * Get a list of all board settings and the values you have selected
     * @param param the request object
     */
    getMyBoardSettings(param: MyBoardSettingsApiGetMyBoardSettingsRequest, options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of an board setting.
     * Remove the value of an board setting
     * @param param the request object
     */
    removeMyBoardSetting(param: MyBoardSettingsApiRemoveMyBoardSettingRequest, options?: Configuration): Promise<void>;
}
export interface MyBoardsSettingsApiSetMySettingsBoardsRequest {
    /**
     *
     * @type InlineObject58
     * @memberof MyBoardsSettingsApisetMySettingsBoards
     */
    InlineObject58?: InlineObject58;
}
export declare class ObjectMyBoardsSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyBoardsSettingsApiRequestFactory, responseProcessor?: MyBoardsSettingsApiResponseProcessor);
    /**
     * Set the values of board settings for a list of boards.
     * Set the values of board settings for a list of boards
     * @param param the request object
     */
    setMySettingsBoards(param: MyBoardsSettingsApiSetMySettingsBoardsRequest, options?: Configuration): Promise<void>;
}
export interface MyDashboardPageSettingsApiUnsetMyDashboardPageSingleSettingRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageSettingsApiunsetMyDashboardPageSingleSetting
     */
    dashboard_page_id: number;
    /**
     * A setting name.
     * @type string
     * @memberof MyDashboardPageSettingsApiunsetMyDashboardPageSingleSetting
     */
    setting_name: string;
}
export declare class ObjectMyDashboardPageSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageSettingsApiRequestFactory, responseProcessor?: MyDashboardPageSettingsApiResponseProcessor);
    /**
     * Unset a single setting added to one of mine dashboard pages.
     * Unset a single setting added to one of mine dashboard pages
     * @param param the request object
     */
    unsetMyDashboardPageSingleSetting(param: MyDashboardPageSettingsApiUnsetMyDashboardPageSingleSettingRequest, options?: Configuration): Promise<void>;
}
export interface MyDashboardPageWidgetsApiCheckMyDashboardPageWidgetRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWidgetsApicheckMyDashboardPageWidget
     */
    dashboard_page_id: number;
    /**
     * A widget id.
     * @type number
     * @memberof MyDashboardPageWidgetsApicheckMyDashboardPageWidget
     */
    widget_id: number;
}
export interface MyDashboardPageWidgetsApiGetMyDashboardPageWidgetsRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWidgetsApigetMyDashboardPageWidgets
     */
    dashboard_page_id: number;
}
export interface MyDashboardPageWidgetsApiUpdateMyDashboardPageWidgetPositionRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWidgetsApiupdateMyDashboardPageWidgetPosition
     */
    dashboard_page_id: number;
    /**
     * A widget id.
     * @type number
     * @memberof MyDashboardPageWidgetsApiupdateMyDashboardPageWidgetPosition
     */
    widget_id: number;
    /**
     *
     * @type InlineObject60
     * @memberof MyDashboardPageWidgetsApiupdateMyDashboardPageWidgetPosition
     */
    InlineObject60?: InlineObject60;
}
export declare class ObjectMyDashboardPageWidgetsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWidgetsApiRequestFactory, responseProcessor?: MyDashboardPageWidgetsApiResponseProcessor);
    /**
     * Check if a widget is added to one of mine dashboard pages.
     * Check if a widget is added to one of mine dashboard pages
     * @param param the request object
     */
    checkMyDashboardPageWidget(param: MyDashboardPageWidgetsApiCheckMyDashboardPageWidgetRequest, options?: Configuration): Promise<InlineResponse200152>;
    /**
     * Get a list of widgets added to one of mine dashboard pages.
     * Get a list of widgets added to one of mine dashboard pages
     * @param param the request object
     */
    getMyDashboardPageWidgets(param: MyDashboardPageWidgetsApiGetMyDashboardPageWidgetsRequest, options?: Configuration): Promise<InlineResponse200151>;
    /**
     * Update position of a single widget on one of mine dashboard pages.
     * Update position of a single widget on one of mine dashboard pages
     * @param param the request object
     */
    updateMyDashboardPageWidgetPosition(param: MyDashboardPageWidgetsApiUpdateMyDashboardPageWidgetPositionRequest, options?: Configuration): Promise<InlineResponse200150>;
}
export interface MyDashboardPageWorkspacesApiCheckMyDashboardPageWorkspaceRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWorkspacesApicheckMyDashboardPageWorkspace
     */
    dashboard_page_id: number;
    /**
     * A workspace id.
     * @type number
     * @memberof MyDashboardPageWorkspacesApicheckMyDashboardPageWorkspace
     */
    workspace_id: number;
}
export interface MyDashboardPageWorkspacesApiGetMyDashboardPageWorkspacesRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWorkspacesApigetMyDashboardPageWorkspaces
     */
    dashboard_page_id: number;
}
export interface MyDashboardPageWorkspacesApiUpdateMyDashboardPageWorkspacePositionRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPageWorkspacesApiupdateMyDashboardPageWorkspacePosition
     */
    dashboard_page_id: number;
    /**
     * A workspace id.
     * @type number
     * @memberof MyDashboardPageWorkspacesApiupdateMyDashboardPageWorkspacePosition
     */
    workspace_id: number;
    /**
     *
     * @type InlineObject61
     * @memberof MyDashboardPageWorkspacesApiupdateMyDashboardPageWorkspacePosition
     */
    InlineObject61?: InlineObject61;
}
export declare class ObjectMyDashboardPageWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWorkspacesApiRequestFactory, responseProcessor?: MyDashboardPageWorkspacesApiResponseProcessor);
    /**
     * Check if a workspace is added to one of mine dashboard pages.
     * Check if a workspace is added to one of mine dashboard pages
     * @param param the request object
     */
    checkMyDashboardPageWorkspace(param: MyDashboardPageWorkspacesApiCheckMyDashboardPageWorkspaceRequest, options?: Configuration): Promise<InlineResponse200154>;
    /**
     * Get a list of workspaces added to one of mine dashboard pages.
     * Get a list of workspaces added to one of mine dashboard pages
     * @param param the request object
     */
    getMyDashboardPageWorkspaces(param: MyDashboardPageWorkspacesApiGetMyDashboardPageWorkspacesRequest, options?: Configuration): Promise<InlineResponse200153>;
    /**
     * Update position of a single workspace on one of mine dashboard pages.
     * Update position of a single workspace on one of mine dashboard pages
     * @param param the request object
     */
    updateMyDashboardPageWorkspacePosition(param: MyDashboardPageWorkspacesApiUpdateMyDashboardPageWorkspacePositionRequest, options?: Configuration): Promise<InlineResponse200150>;
}
export interface MyDashboardPagesApiGetMyDashboardPageRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPagesApigetMyDashboardPage
     */
    dashboard_page_id: number;
}
export interface MyDashboardPagesApiGetMyDashboardPagesRequest {
}
export interface MyDashboardPagesApiUpdateMyDashboardPagePositionRequest {
    /**
     * A dashboard page id.
     * @type number
     * @memberof MyDashboardPagesApiupdateMyDashboardPagePosition
     */
    dashboard_page_id: number;
    /**
     *
     * @type InlineObject59
     * @memberof MyDashboardPagesApiupdateMyDashboardPagePosition
     */
    InlineObject59?: InlineObject59;
}
export declare class ObjectMyDashboardPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPagesApiRequestFactory, responseProcessor?: MyDashboardPagesApiResponseProcessor);
    /**
     * Get the details of one of mine dashboard pages.
     * Get the details of one of mine dashboard pages
     * @param param the request object
     */
    getMyDashboardPage(param: MyDashboardPagesApiGetMyDashboardPageRequest, options?: Configuration): Promise<InlineResponse200150>;
    /**
     * Get a list of my dashboard pages.
     * Get a list of my dashboard pages
     * @param param the request object
     */
    getMyDashboardPages(param: MyDashboardPagesApiGetMyDashboardPagesRequest, options?: Configuration): Promise<InlineResponse200149>;
    /**
     * Update position of one of mine dashboard pages.
     * Update position of one of mine dashboard pages
     * @param param the request object
     */
    updateMyDashboardPagePosition(param: MyDashboardPagesApiUpdateMyDashboardPagePositionRequest, options?: Configuration): Promise<InlineResponse200150>;
}
export interface MyFavoriteBoardsApiAddFavoriteBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyFavoriteBoardsApiaddFavoriteBoard
     */
    board_id: number;
    /**
     *
     * @type InlineObject62
     * @memberof MyFavoriteBoardsApiaddFavoriteBoard
     */
    InlineObject62?: InlineObject62;
}
export interface MyFavoriteBoardsApiCheckFavoriteBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyFavoriteBoardsApicheckFavoriteBoard
     */
    board_id: number;
}
export interface MyFavoriteBoardsApiGetFavoriteBoardsRequest {
}
export interface MyFavoriteBoardsApiRemoveFavoriteBoardRequest {
    /**
     * A board id.
     * @type number
     * @memberof MyFavoriteBoardsApiremoveFavoriteBoard
     */
    board_id: number;
}
export declare class ObjectMyFavoriteBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyFavoriteBoardsApiRequestFactory, responseProcessor?: MyFavoriteBoardsApiResponseProcessor);
    /**
     * Add a board to the list of your favorite boards or change its position within the list.
     * Add a board to your favorite
     * @param param the request object
     */
    addFavoriteBoard(param: MyFavoriteBoardsApiAddFavoriteBoardRequest, options?: Configuration): Promise<InlineResponse200156>;
    /**
     * Check if a board is one of your favorite boards.
     * Check if a board is one of your favorite
     * @param param the request object
     */
    checkFavoriteBoard(param: MyFavoriteBoardsApiCheckFavoriteBoardRequest, options?: Configuration): Promise<InlineResponse200155>;
    /**
     * Get a list of your favorite boards.
     * Get a list of your favorite boards
     * @param param the request object
     */
    getFavoriteBoards(param: MyFavoriteBoardsApiGetFavoriteBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Remove a board from the list of your favorite boards.
     * Remove a board from your favorite
     * @param param the request object
     */
    removeFavoriteBoard(param: MyFavoriteBoardsApiRemoveFavoriteBoardRequest, options?: Configuration): Promise<void>;
}
export interface OldApiLimitsApiGetOldApiLimitsRequest {
}
export declare class ObjectOldApiLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OldApiLimitsApiRequestFactory, responseProcessor?: OldApiLimitsApiResponseProcessor);
    /**
     * Get a list of the old api request limits.
     * Get the hourly limits for the old api requests
     * @param param the request object
     */
    getOldApiLimits(param: OldApiLimitsApiGetOldApiLimitsRequest, options?: Configuration): Promise<InlineResponse200157>;
}
export interface OldApiRequestHistoryApiGetOldApiRequestHistoryRequest {
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    user_ids?: Array<number>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistory
     */
    per_page?: number;
}
export interface OldApiRequestHistoryApiGetOldApiRequestHistoryAggregatedRequest {
    /**
     * A list of the user_ids that you have execututed the following requests.
     * @type Array&lt;number&gt;
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistoryAggregated
     */
    user_ids?: Array<number>;
    /**
     * An option regarding the aggregation period.
     * @type &#39;day&#39; | &#39;hour&#39;
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistoryAggregated
     */
    aggregation_period?: 'day' | 'hour';
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistoryAggregated
     */
    to?: Date;
    /**
     * The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistoryAggregated
     */
    from_date?: Date;
    /**
     * The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     * @type Date
     * @memberof OldApiRequestHistoryApigetOldApiRequestHistoryAggregated
     */
    to_date?: Date;
}
export declare class ObjectOldApiRequestHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OldApiRequestHistoryApiRequestFactory, responseProcessor?: OldApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param param the request object
     */
    getOldApiRequestHistory(param: OldApiRequestHistoryApiGetOldApiRequestHistoryRequest, options?: Configuration): Promise<InlineResponse200158>;
    /**
     * Get a list of old api requests aggregated by user matching some optional criteria.
     * Get a list of old api requests aggregated by user
     * @param param the request object
     */
    getOldApiRequestHistoryAggregated(param: OldApiRequestHistoryApiGetOldApiRequestHistoryAggregatedRequest, options?: Configuration): Promise<InlineResponse200159>;
}
export interface ParentCardsApiAddParentCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ParentCardsApiaddParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof ParentCardsApiaddParentCard
     */
    parent_card_id: number;
    /**
     *
     * @type InlineObject44
     * @memberof ParentCardsApiaddParentCard
     */
    InlineObject44?: InlineObject44;
}
export interface ParentCardsApiCheckParentCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ParentCardsApicheckParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof ParentCardsApicheckParentCard
     */
    parent_card_id: number;
}
export interface ParentCardsApiGetParentCardGraphRequest {
    /**
     * A card id.
     * @type number
     * @memberof ParentCardsApigetParentCardGraph
     */
    card_id: number;
}
export interface ParentCardsApiGetParentCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof ParentCardsApigetParentCards
     */
    card_id: number;
}
export interface ParentCardsApiRemoveParentCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof ParentCardsApiremoveParentCard
     */
    card_id: number;
    /**
     * A parent card id.
     * @type number
     * @memberof ParentCardsApiremoveParentCard
     */
    parent_card_id: number;
    /**
     * Exceeding reason.
     * @type string
     * @memberof ParentCardsApiremoveParentCard
     */
    exceeding_reason?: string;
}
export declare class ObjectParentCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ParentCardsApiRequestFactory, responseProcessor?: ParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card.
     * Make a card a parent of a given card
     * @param param the request object
     */
    addParentCard(param: ParentCardsApiAddParentCardRequest, options?: Configuration): Promise<void | InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card
     * @param param the request object
     */
    checkParentCard(param: ParentCardsApiCheckParentCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of parent cards of a given card and the parent cards of those cards too.
     * Get a list of parent cards including their parent cards too
     * @param param the request object
     */
    getParentCardGraph(param: ParentCardsApiGetParentCardGraphRequest, options?: Configuration): Promise<InlineResponse20093>;
    /**
     * Get a list of the parent cards of a given card.
     * Get a list of parent cards
     * @param param the request object
     */
    getParentCards(param: ParentCardsApiGetParentCardsRequest, options?: Configuration): Promise<InlineResponse200116>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param param the request object
     */
    removeParentCard(param: ParentCardsApiRemoveParentCardRequest, options?: Configuration): Promise<void>;
}
export interface PredecessorCardsApiAddPredecessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof PredecessorCardsApiaddPredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof PredecessorCardsApiaddPredecessorCard
     */
    predecessor_card_id: number;
    /**
     *
     * @type InlineObject45
     * @memberof PredecessorCardsApiaddPredecessorCard
     */
    InlineObject45?: InlineObject45;
}
export interface PredecessorCardsApiCheckPredecessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof PredecessorCardsApicheckPredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof PredecessorCardsApicheckPredecessorCard
     */
    predecessor_card_id: number;
}
export interface PredecessorCardsApiGetPredecessorCardGraphRequest {
    /**
     * A card id.
     * @type number
     * @memberof PredecessorCardsApigetPredecessorCardGraph
     */
    card_id: number;
}
export interface PredecessorCardsApiGetPredecessorCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof PredecessorCardsApigetPredecessorCards
     */
    card_id: number;
}
export interface PredecessorCardsApiRemovePredecessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof PredecessorCardsApiremovePredecessorCard
     */
    card_id: number;
    /**
     * A predecessor card id.
     * @type number
     * @memberof PredecessorCardsApiremovePredecessorCard
     */
    predecessor_card_id: number;
}
export declare class ObjectPredecessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: PredecessorCardsApiRequestFactory, responseProcessor?: PredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card.
     * Make a card a predecessor of a given card
     * @param param the request object
     */
    addPredecessorCard(param: PredecessorCardsApiAddPredecessorCardRequest, options?: Configuration): Promise<void | InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card
     * @param param the request object
     */
    checkPredecessorCard(param: PredecessorCardsApiCheckPredecessorCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of predecessor cards of a given card and the predecessor cards of those cards too.
     * Get a list of predecessor cards including their predecessor cards too
     * @param param the request object
     */
    getPredecessorCardGraph(param: PredecessorCardsApiGetPredecessorCardGraphRequest, options?: Configuration): Promise<InlineResponse200117>;
    /**
     * Get a list of the predecessor cards of a given card.
     * Get a list of predecessor cards
     * @param param the request object
     */
    getPredecessorCards(param: PredecessorCardsApiGetPredecessorCardsRequest, options?: Configuration): Promise<InlineResponse200118>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param param the request object
     */
    removePredecessorCard(param: PredecessorCardsApiRemovePredecessorCardRequest, options?: Configuration): Promise<void>;
}
export interface RelatedWorkflowsApiAddBoardRelatedWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof RelatedWorkflowsApiaddBoardRelatedWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof RelatedWorkflowsApiaddBoardRelatedWorkflow
     */
    workflow_id: number;
    /**
     *
     * @type InlineObject17
     * @memberof RelatedWorkflowsApiaddBoardRelatedWorkflow
     */
    InlineObject17?: InlineObject17;
}
export interface RelatedWorkflowsApiCheckBoardRelatedWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof RelatedWorkflowsApicheckBoardRelatedWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof RelatedWorkflowsApicheckBoardRelatedWorkflow
     */
    workflow_id: number;
}
export interface RelatedWorkflowsApiGetRelatedBoardsWorlflowsRequest {
    /**
     * A board id.
     * @type number
     * @memberof RelatedWorkflowsApigetRelatedBoardsWorlflows
     */
    board_id: number;
}
export interface RelatedWorkflowsApiRemoveBoardRelatedWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof RelatedWorkflowsApiremoveBoardRelatedWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof RelatedWorkflowsApiremoveBoardRelatedWorkflow
     */
    workflow_id: number;
}
export interface RelatedWorkflowsApiUpdateBoardRelatedWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof RelatedWorkflowsApiupdateBoardRelatedWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof RelatedWorkflowsApiupdateBoardRelatedWorkflow
     */
    workflow_id: number;
    /**
     *
     * @type InlineObject18
     * @memberof RelatedWorkflowsApiupdateBoardRelatedWorkflow
     */
    InlineObject18?: InlineObject18;
}
export declare class ObjectRelatedWorkflowsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RelatedWorkflowsApiRequestFactory, responseProcessor?: RelatedWorkflowsApiResponseProcessor);
    /**
     * Add a related workflow on a board.
     * Add a related workflow on a board
     * @param param the request object
     */
    addBoardRelatedWorkflow(param: RelatedWorkflowsApiAddBoardRelatedWorkflowRequest, options?: Configuration): Promise<InlineResponse20042>;
    /**
     * Check if a board is related to another board and workflow.
     * Check if a board is related to another board and workflow
     * @param param the request object
     */
    checkBoardRelatedWorkflow(param: RelatedWorkflowsApiCheckBoardRelatedWorkflowRequest, options?: Configuration): Promise<InlineResponse20042>;
    /**
     * Get a list of boards and workflows related to a specified board.
     * Get a list of related workflows
     * @param param the request object
     */
    getRelatedBoardsWorlflows(param: RelatedWorkflowsApiGetRelatedBoardsWorlflowsRequest, options?: Configuration): Promise<InlineResponse20041>;
    /**
     * Remove a related board workflow.
     * Remove a related board workflow
     * @param param the request object
     */
    removeBoardRelatedWorkflow(param: RelatedWorkflowsApiRemoveBoardRelatedWorkflowRequest, options?: Configuration): Promise<void>;
    /**
     * Update a related workflow on a board.
     * Update a related workflow on a board
     * @param param the request object
     */
    updateBoardRelatedWorkflow(param: RelatedWorkflowsApiUpdateBoardRelatedWorkflowRequest, options?: Configuration): Promise<InlineResponse20042>;
}
export interface RelativeCardsApiAddRelatedCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof RelativeCardsApiaddRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof RelativeCardsApiaddRelatedCard
     */
    related_card_id: number;
    /**
     *
     * @type InlineObject46
     * @memberof RelativeCardsApiaddRelatedCard
     */
    InlineObject46?: InlineObject46;
}
export interface RelativeCardsApiCheckRelatedCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof RelativeCardsApicheckRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof RelativeCardsApicheckRelatedCard
     */
    related_card_id: number;
}
export interface RelativeCardsApiGetRelatedCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof RelativeCardsApigetRelatedCards
     */
    card_id: number;
}
export interface RelativeCardsApiRemoveRelatedCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof RelativeCardsApiremoveRelatedCard
     */
    card_id: number;
    /**
     * A related card id.
     * @type number
     * @memberof RelativeCardsApiremoveRelatedCard
     */
    related_card_id: number;
}
export declare class ObjectRelativeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RelativeCardsApiRequestFactory, responseProcessor?: RelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card.
     * Make a card a relative of a given card
     * @param param the request object
     */
    addRelatedCard(param: RelativeCardsApiAddRelatedCardRequest, options?: Configuration): Promise<void | InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card
     * @param param the request object
     */
    checkRelatedCard(param: RelativeCardsApiCheckRelatedCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of the cards related to a given card.
     * Get a list of related cards
     * @param param the request object
     */
    getRelatedCards(param: RelativeCardsApiGetRelatedCardsRequest, options?: Configuration): Promise<InlineResponse200119>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param param the request object
     */
    removeRelatedCard(param: RelativeCardsApiRemoveRelatedCardRequest, options?: Configuration): Promise<void>;
}
export interface RolePermissionsApiGetRolePermissionRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolePermissionsApigetRolePermission
     */
    role_id: number;
    /**
     * A permission name.
     * @type string
     * @memberof RolePermissionsApigetRolePermission
     */
    permission_name: string;
}
export interface RolePermissionsApiGetRolePermissionsRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolePermissionsApigetRolePermissions
     */
    role_id: number;
}
export interface RolePermissionsApiRemoveRolePermissionRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolePermissionsApiremoveRolePermission
     */
    role_id: number;
    /**
     * A permission name.
     * @type string
     * @memberof RolePermissionsApiremoveRolePermission
     */
    permission_name: string;
}
export interface RolePermissionsApiSetRolePermissionRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolePermissionsApisetRolePermission
     */
    role_id: number;
    /**
     * A permission name.
     * @type string
     * @memberof RolePermissionsApisetRolePermission
     */
    permission_name: string;
}
export declare class ObjectRolePermissionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RolePermissionsApiRequestFactory, responseProcessor?: RolePermissionsApiResponseProcessor);
    /**
     * Check if a role has a permission.
     * Check if a role has a permission
     * @param param the request object
     */
    getRolePermission(param: RolePermissionsApiGetRolePermissionRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of all possible role permissions and whether the role has them.
     * Get a list of all possible role permissions and whether the role has them
     * @param param the request object
     */
    getRolePermissions(param: RolePermissionsApiGetRolePermissionsRequest, options?: Configuration): Promise<InlineResponse200166>;
    /**
     * Remove a permission from the role.
     * Remove a permission from the role
     * @param param the request object
     */
    removeRolePermission(param: RolePermissionsApiRemoveRolePermissionRequest, options?: Configuration): Promise<void>;
    /**
     * Give the role a permission.
     * Give the role a permission
     * @param param the request object
     */
    setRolePermission(param: RolePermissionsApiSetRolePermissionRequest, options?: Configuration): Promise<void>;
}
export interface RolesApiCreateRoleRequest {
    /**
     *
     * @type InlineObject63
     * @memberof RolesApicreateRole
     */
    InlineObject63?: InlineObject63;
}
export interface RolesApiDeleteRoleRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolesApideleteRole
     */
    role_id: number;
    /**
     * The id of a role which will be given to the users which currently have the role which is about to be deleted.
     * @type number
     * @memberof RolesApideleteRole
     */
    replace_with_role_id?: number;
}
export interface RolesApiGetRoleRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolesApigetRole
     */
    role_id: number;
}
export interface RolesApiGetRolesRequest {
    /**
     * A list of the role ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof RolesApigetRoles
     */
    role_ids?: Array<number>;
    /**
     * A list of properties for which you want to get additional details. The only allowed property at the moment is permissions.
     * @type Array&lt;string&gt;
     * @memberof RolesApigetRoles
     */
    expand?: Array<string>;
}
export interface RolesApiUpdateRoleRequest {
    /**
     * A role id.
     * @type number
     * @memberof RolesApiupdateRole
     */
    role_id: number;
    /**
     *
     * @type InlineObject64
     * @memberof RolesApiupdateRole
     */
    InlineObject64?: InlineObject64;
}
export declare class ObjectRolesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RolesApiRequestFactory, responseProcessor?: RolesApiResponseProcessor);
    /**
     * Create a new role.
     * Create a role
     * @param param the request object
     */
    createRole(param: RolesApiCreateRoleRequest, options?: Configuration): Promise<InlineResponse200164>;
    /**
     * Delete a role.
     * Delete a role
     * @param param the request object
     */
    deleteRole(param: RolesApiDeleteRoleRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single role.
     * Get the details of a single role
     * @param param the request object
     */
    getRole(param: RolesApiGetRoleRequest, options?: Configuration): Promise<InlineResponse200165>;
    /**
     * Get a list of roles matching some optional criteria.
     * Get a list of roles
     * @param param the request object
     */
    getRoles(param: RolesApiGetRolesRequest, options?: Configuration): Promise<InlineResponse200163>;
    /**
     * Update a role.
     * Update a role
     * @param param the request object
     */
    updateRole(param: RolesApiUpdateRoleRequest, options?: Configuration): Promise<InlineResponse200165>;
}
export interface StickerBoardsApiGetStickerBoardsRequest {
    /**
     * A sticker id.
     * @type number
     * @memberof StickerBoardsApigetStickerBoards
     */
    sticker_id: number;
}
export declare class ObjectStickerBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerBoardsApiRequestFactory, responseProcessor?: StickerBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the sticker is available.
     * Get a list of boards where the sticker is available
     * @param param the request object
     */
    getStickerBoards(param: StickerBoardsApiGetStickerBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
}
export interface StickerCardsApiGetStickerCardsRequest {
    /**
     * A sticker id.
     * @type number
     * @memberof StickerCardsApigetStickerCards
     */
    sticker_id: number;
}
export declare class ObjectStickerCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerCardsApiRequestFactory, responseProcessor?: StickerCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the sticker is available.
     * Get a list of cards where the sticker is available
     * @param param the request object
     */
    getStickerCards(param: StickerCardsApiGetStickerCardsRequest, options?: Configuration): Promise<InlineResponse20012>;
}
export interface StickerHistoryApiGetStickersHistoryRequest {
    /**
     * A list of the sticker ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof StickerHistoryApigetStickersHistory
     */
    sticker_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof StickerHistoryApigetStickersHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the sticker.
     * @type Array&lt;&#39;sticker_created&#39; | &#39;sticker_updated&#39; | &#39;sticker_disabled&#39; | &#39;sticker_enabled&#39; | &#39;sticker_deleted&#39; | &#39;sticker_added_to_board&#39; | &#39;sticker_removed_from_board&#39;&gt;
     * @memberof StickerHistoryApigetStickersHistory
     */
    event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof StickerHistoryApigetStickersHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof StickerHistoryApigetStickersHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof StickerHistoryApigetStickersHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof StickerHistoryApigetStickersHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof StickerHistoryApigetStickersHistory
     */
    per_page?: number;
}
export declare class ObjectStickerHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerHistoryApiRequestFactory, responseProcessor?: StickerHistoryApiResponseProcessor);
    /**
     * Get a list of stickers creation, deletion, update events matching some optional criteria.
     * Get a list of stickers creation, deletion, update events
     * @param param the request object
     */
    getStickersHistory(param: StickerHistoryApiGetStickersHistoryRequest, options?: Configuration): Promise<InlineResponse200169>;
}
export interface StickersApiCreateStickerRequest {
    /**
     *
     * @type InlineObject65
     * @memberof StickersApicreateSticker
     */
    InlineObject65?: InlineObject65;
}
export interface StickersApiDeleteStickerRequest {
    /**
     * A sticker id.
     * @type number
     * @memberof StickersApideleteSticker
     */
    sticker_id: number;
    /**
     * The id of a sticker with which to replace the one to be deleted on the cards using it.
     * @type number
     * @memberof StickersApideleteSticker
     */
    replace_with_sticker_id?: number;
}
export interface StickersApiGetStickerRequest {
    /**
     * A sticker id.
     * @type number
     * @memberof StickersApigetSticker
     */
    sticker_id: number;
}
export interface StickersApiGetStickersRequest {
    /**
     * A list of the sticker ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof StickersApigetStickers
     */
    sticker_ids?: Array<number>;
    /**
     * Find a sticker by its full label.
     * @type string
     * @memberof StickersApigetStickers
     */
    label?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof StickersApigetStickers
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled stickers. When set to 0 you will only get disabled stickers.
     * @type 0 | 1
     * @memberof StickersApigetStickers
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: sticker_id, icon_type, icon_id, label, color, availability and is_enabled.
     * @type Array&lt;&#39;sticker_id&#39; | &#39;icon_type&#39; | &#39;icon_id&#39; | &#39;label&#39; | &#39;color&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof StickersApigetStickers
     */
    fields?: Array<'sticker_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     * @type Array&lt;&#39;board_ids&#39; | &#39;board_count&#39; | &#39;card_ids&#39; | &#39;card_count&#39; | &#39;business_rules&#39;&gt;
     * @memberof StickersApigetStickers
     */
    expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>;
}
export interface StickersApiUpdateStickerRequest {
    /**
     * A sticker id.
     * @type number
     * @memberof StickersApiupdateSticker
     */
    sticker_id: number;
    /**
     *
     * @type InlineObject66
     * @memberof StickersApiupdateSticker
     */
    InlineObject66?: InlineObject66;
}
export declare class ObjectStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickersApiRequestFactory, responseProcessor?: StickersApiResponseProcessor);
    /**
     * Create a new sticker.
     * Create a sticker
     * @param param the request object
     */
    createSticker(param: StickersApiCreateStickerRequest, options?: Configuration): Promise<InlineResponse200168>;
    /**
     * Delete a sticker.
     * Delete a sticker
     * @param param the request object
     */
    deleteSticker(param: StickersApiDeleteStickerRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single sticker.
     * Get the details of a single sticker
     * @param param the request object
     */
    getSticker(param: StickersApiGetStickerRequest, options?: Configuration): Promise<InlineResponse200168>;
    /**
     * Get a list of stickers matching some optional criteria.
     * Get a list of stickers
     * @param param the request object
     */
    getStickers(param: StickersApiGetStickersRequest, options?: Configuration): Promise<InlineResponse200167>;
    /**
     * Update a sticker.
     * Update a sticker
     * @param param the request object
     */
    updateSticker(param: StickersApiUpdateStickerRequest, options?: Configuration): Promise<InlineResponse200168>;
}
export interface SuccessorCardsApiAddSuccessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof SuccessorCardsApiaddSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof SuccessorCardsApiaddSuccessorCard
     */
    successor_card_id: number;
    /**
     *
     * @type InlineObject48
     * @memberof SuccessorCardsApiaddSuccessorCard
     */
    InlineObject48?: InlineObject48;
}
export interface SuccessorCardsApiCheckSuccessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof SuccessorCardsApicheckSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof SuccessorCardsApicheckSuccessorCard
     */
    successor_card_id: number;
}
export interface SuccessorCardsApiGetSuccessorCardGraphRequest {
    /**
     * A card id.
     * @type number
     * @memberof SuccessorCardsApigetSuccessorCardGraph
     */
    card_id: number;
}
export interface SuccessorCardsApiGetSuccessorCardsRequest {
    /**
     * A card id.
     * @type number
     * @memberof SuccessorCardsApigetSuccessorCards
     */
    card_id: number;
}
export interface SuccessorCardsApiRemoveSuccessorCardRequest {
    /**
     * A card id.
     * @type number
     * @memberof SuccessorCardsApiremoveSuccessorCard
     */
    card_id: number;
    /**
     * A successor card id.
     * @type number
     * @memberof SuccessorCardsApiremoveSuccessorCard
     */
    successor_card_id: number;
}
export declare class ObjectSuccessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SuccessorCardsApiRequestFactory, responseProcessor?: SuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card.
     * Make a card a successor of a given card
     * @param param the request object
     */
    addSuccessorCard(param: SuccessorCardsApiAddSuccessorCardRequest, options?: Configuration): Promise<InlineResponse20083 | void>;
    /**
     * Check if a card is a successor of a given card and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card
     * @param param the request object
     */
    checkSuccessorCard(param: SuccessorCardsApiCheckSuccessorCardRequest, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of successor cards of a given card and the successor cards of those cards too.
     * Get a list of successor cards including their successor cards too
     * @param param the request object
     */
    getSuccessorCardGraph(param: SuccessorCardsApiGetSuccessorCardGraphRequest, options?: Configuration): Promise<InlineResponse200117>;
    /**
     * Get a list of the successor cards of a given card.
     * Get a list of successor cards
     * @param param the request object
     */
    getSuccessorCards(param: SuccessorCardsApiGetSuccessorCardsRequest, options?: Configuration): Promise<InlineResponse200126>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param param the request object
     */
    removeSuccessorCard(param: SuccessorCardsApiRemoveSuccessorCardRequest, options?: Configuration): Promise<void>;
}
export interface TagBoardsApiGetTagBoardsRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagBoardsApigetTagBoards
     */
    tag_id: number;
}
export interface TagBoardsApiUpdateTagBoardsRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagBoardsApiupdateTagBoards
     */
    tag_id: number;
    /**
     *
     * @type InlineObject69
     * @memberof TagBoardsApiupdateTagBoards
     */
    InlineObject69?: InlineObject69;
}
export declare class ObjectTagBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagBoardsApiRequestFactory, responseProcessor?: TagBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the tag is available.
     * Get a list of boards where the tag is available
     * @param param the request object
     */
    getTagBoards(param: TagBoardsApiGetTagBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Make a tag available or unavailable on several boards.
     * Make a tag available or unavailable on several boards
     * @param param the request object
     */
    updateTagBoards(param: TagBoardsApiUpdateTagBoardsRequest, options?: Configuration): Promise<void>;
}
export interface TagCardsApiGetTagCardsRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagCardsApigetTagCards
     */
    tag_id: number;
}
export declare class ObjectTagCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagCardsApiRequestFactory, responseProcessor?: TagCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the tag is available.
     * Get a list of cards where the tag is available
     * @param param the request object
     */
    getTagCards(param: TagCardsApiGetTagCardsRequest, options?: Configuration): Promise<InlineResponse20012>;
}
export interface TagHistoryApiGetTagsHistoryRequest {
    /**
     * A list of the tag ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof TagHistoryApigetTagsHistory
     */
    tag_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof TagHistoryApigetTagsHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the tag.
     * @type Array&lt;&#39;tag_created&#39; | &#39;tag_updated&#39; | &#39;tag_disabled&#39; | &#39;tag_enabled&#39; | &#39;tag_deleted&#39; | &#39;tag_added_to_board&#39; | &#39;tag_removed_from_board&#39;&gt;
     * @memberof TagHistoryApigetTagsHistory
     */
    event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof TagHistoryApigetTagsHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof TagHistoryApigetTagsHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof TagHistoryApigetTagsHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof TagHistoryApigetTagsHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof TagHistoryApigetTagsHistory
     */
    per_page?: number;
}
export declare class ObjectTagHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagHistoryApiRequestFactory, responseProcessor?: TagHistoryApiResponseProcessor);
    /**
     * Get a list of tags creation, deletion, update events matching some optional criteria.
     * Get a list of tags creation, deletion, update events
     * @param param the request object
     */
    getTagsHistory(param: TagHistoryApiGetTagsHistoryRequest, options?: Configuration): Promise<InlineResponse200172>;
}
export interface TagsApiCreateTagRequest {
    /**
     *
     * @type InlineObject67
     * @memberof TagsApicreateTag
     */
    InlineObject67?: InlineObject67;
}
export interface TagsApiDeleteTagRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagsApideleteTag
     */
    tag_id: number;
    /**
     * The id of a tag with which to replace the one to be deleted on the cards using it.
     * @type number
     * @memberof TagsApideleteTag
     */
    replace_with_tag_id?: number;
}
export interface TagsApiGetTagRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagsApigetTag
     */
    tag_id: number;
}
export interface TagsApiGetTagsRequest {
    /**
     * A list of the tag ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof TagsApigetTags
     */
    tag_ids?: Array<number>;
    /**
     * Find a tag by its full label.
     * @type string
     * @memberof TagsApigetTags
     */
    label?: string;
    /**
     * A list of the availability values that you want to get.
     * @type Array&lt;0 | 1 | 2&gt;
     * @memberof TagsApigetTags
     */
    availability?: Array<0 | 1 | 2>;
    /**
     * When set to 1 you will only get enabled tags. When set to 0 you will only get disabled tags.
     * @type 0 | 1
     * @memberof TagsApigetTags
     */
    is_enabled?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: tag_id, label, color, availability and is_enabled.
     * @type Array&lt;&#39;tag_id&#39; | &#39;label&#39; | &#39;color&#39; | &#39;availability&#39; | &#39;is_enabled&#39;&gt;
     * @memberof TagsApigetTags
     */
    fields?: Array<'tag_id' | 'label' | 'color' | 'availability' | 'is_enabled'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     * @type Array&lt;&#39;board_ids&#39; | &#39;board_count&#39; | &#39;card_ids&#39; | &#39;card_count&#39; | &#39;business_rules&#39;&gt;
     * @memberof TagsApigetTags
     */
    expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>;
}
export interface TagsApiUpdateTagRequest {
    /**
     * A tag id.
     * @type number
     * @memberof TagsApiupdateTag
     */
    tag_id: number;
    /**
     *
     * @type InlineObject68
     * @memberof TagsApiupdateTag
     */
    InlineObject68?: InlineObject68;
}
export declare class ObjectTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagsApiRequestFactory, responseProcessor?: TagsApiResponseProcessor);
    /**
     * Create a new tag.
     * Create a tag
     * @param param the request object
     */
    createTag(param: TagsApiCreateTagRequest, options?: Configuration): Promise<InlineResponse200171>;
    /**
     * Delete a tag.
     * Delete a tag
     * @param param the request object
     */
    deleteTag(param: TagsApiDeleteTagRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single tag.
     * Get the details of a single tag
     * @param param the request object
     */
    getTag(param: TagsApiGetTagRequest, options?: Configuration): Promise<InlineResponse200171>;
    /**
     * Get a list of tags matching some optional criteria.
     * Get a list of tags
     * @param param the request object
     */
    getTags(param: TagsApiGetTagsRequest, options?: Configuration): Promise<InlineResponse200170>;
    /**
     * Update a tag.
     * Update a tag
     * @param param the request object
     */
    updateTag(param: TagsApiUpdateTagRequest, options?: Configuration): Promise<InlineResponse200171>;
}
export interface TeamBoardsApiGetTeamBoardsRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamBoardsApigetTeamBoards
     */
    team_id: number;
}
export declare class ObjectTeamBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamBoardsApiRequestFactory, responseProcessor?: TeamBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the team is available.
     * Get a list of boards where the team is available
     * @param param the request object
     */
    getTeamBoards(param: TeamBoardsApiGetTeamBoardsRequest, options?: Configuration): Promise<InlineResponse20011>;
}
export interface TeamHistoryApiGetTeamsHistoryRequest {
    /**
     * A list of the team ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof TeamHistoryApigetTeamsHistory
     */
    team_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof TeamHistoryApigetTeamsHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the team.
     * @type Array&lt;&#39;team_created&#39; | &#39;team_updated&#39; | &#39;team_deleted&#39; | &#39;team_added_to_board&#39; | &#39;team_change_role_for_board&#39; | &#39;team_removed_from_board&#39; | &#39;user_added_to_team&#39; | &#39;user_removed_from_team&#39; | &#39;user_added_to_team_managers&#39; | &#39;user_removed_from_team_managers&#39;&gt;
     * @memberof TeamHistoryApigetTeamsHistory
     */
    event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof TeamHistoryApigetTeamsHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof TeamHistoryApigetTeamsHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof TeamHistoryApigetTeamsHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof TeamHistoryApigetTeamsHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof TeamHistoryApigetTeamsHistory
     */
    per_page?: number;
}
export declare class ObjectTeamHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamHistoryApiRequestFactory, responseProcessor?: TeamHistoryApiResponseProcessor);
    /**
     * Get a list of teams creation, deletion, update events matching some optional criteria.
     * Get a list of teams creation, deletion, update events
     * @param param the request object
     */
    getTeamsHistory(param: TeamHistoryApiGetTeamsHistoryRequest, options?: Configuration): Promise<InlineResponse200175>;
}
export interface TeamManagersApiAddTeamManagerRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamManagersApiaddTeamManager
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamManagersApiaddTeamManager
     */
    user_id: number;
}
export interface TeamManagersApiCheckTeamManagerRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamManagersApicheckTeamManager
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamManagersApicheckTeamManager
     */
    user_id: number;
}
export interface TeamManagersApiGetTeamManagersRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamManagersApigetTeamManagers
     */
    team_id: number;
}
export interface TeamManagersApiRemoveTeamManagerRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamManagersApiremoveTeamManager
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamManagersApiremoveTeamManager
     */
    user_id: number;
}
export declare class ObjectTeamManagersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamManagersApiRequestFactory, responseProcessor?: TeamManagersApiResponseProcessor);
    /**
     * Set a user as a manager of the team.
     * Set a user as a manager of the team
     * @param param the request object
     */
    addTeamManager(param: TeamManagersApiAddTeamManagerRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a user is added as a team manager to a team.
     * Check if a user is added as a team manager to a team
     * @param param the request object
     */
    checkTeamManager(param: TeamManagersApiCheckTeamManagerRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of users who can manage the team.
     * Get a list of users who can manage the team
     * @param param the request object
     */
    getTeamManagers(param: TeamManagersApiGetTeamManagersRequest, options?: Configuration): Promise<InlineResponse200176>;
    /**
     * Remove a user as a manager of the team.
     * Remove a user as a manager of the team
     * @param param the request object
     */
    removeTeamManager(param: TeamManagersApiRemoveTeamManagerRequest, options?: Configuration): Promise<void>;
}
export interface TeamUsersApiAddTeamUserRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamUsersApiaddTeamUser
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamUsersApiaddTeamUser
     */
    user_id: number;
}
export interface TeamUsersApiCheckTeamUserRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamUsersApicheckTeamUser
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamUsersApicheckTeamUser
     */
    user_id: number;
}
export interface TeamUsersApiGetTeamUsersRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamUsersApigetTeamUsers
     */
    team_id: number;
}
export interface TeamUsersApiRemoveTeamUserRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamUsersApiremoveTeamUser
     */
    team_id: number;
    /**
     * A user id.
     * @type number
     * @memberof TeamUsersApiremoveTeamUser
     */
    user_id: number;
}
export declare class ObjectTeamUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamUsersApiRequestFactory, responseProcessor?: TeamUsersApiResponseProcessor);
    /**
     * Add a user to the team.
     * Add a user to the team
     * @param param the request object
     */
    addTeamUser(param: TeamUsersApiAddTeamUserRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a user is added to a team.
     * Check if a user is added to a team
     * @param param the request object
     */
    checkTeamUser(param: TeamUsersApiCheckTeamUserRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of users added to the team.
     * Get a list of users added to the team
     * @param param the request object
     */
    getTeamUsers(param: TeamUsersApiGetTeamUsersRequest, options?: Configuration): Promise<InlineResponse200177>;
    /**
     * Remove a user from the team.
     * Remove a user from the team
     * @param param the request object
     */
    removeTeamUser(param: TeamUsersApiRemoveTeamUserRequest, options?: Configuration): Promise<void>;
}
export interface TeamsApiCreateTeamRequest {
    /**
     *
     * @type InlineObject70
     * @memberof TeamsApicreateTeam
     */
    InlineObject70?: InlineObject70;
}
export interface TeamsApiDeleteTeamRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamsApideleteTeam
     */
    team_id: number;
}
export interface TeamsApiGetTeamRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamsApigetTeam
     */
    team_id: number;
}
export interface TeamsApiGetTeamsRequest {
    /**
     * A list of the team ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof TeamsApigetTeams
     */
    team_ids?: Array<number>;
    /**
     * Find a team by its full name.
     * @type string
     * @memberof TeamsApigetTeams
     */
    name?: string;
    /**
     * A list of fields that you want in the response. The allowed fields are: team_id, name, description.
     * @type Array&lt;&#39;team_id&#39; | &#39;name&#39; | &#39;description&#39;&gt;
     * @memberof TeamsApigetTeams
     */
    fields?: Array<'team_id' | 'name' | 'description'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: boards and user_ids.
     * @type Array&lt;&#39;boards&#39; | &#39;user_ids&#39;&gt;
     * @memberof TeamsApigetTeams
     */
    expand?: Array<'boards' | 'user_ids'>;
}
export interface TeamsApiUpdateTeamRequest {
    /**
     * A team id.
     * @type number
     * @memberof TeamsApiupdateTeam
     */
    team_id: number;
    /**
     *
     * @type InlineObject71
     * @memberof TeamsApiupdateTeam
     */
    InlineObject71?: InlineObject71;
}
export declare class ObjectTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamsApiRequestFactory, responseProcessor?: TeamsApiResponseProcessor);
    /**
     * Create a new team.
     * Create a team
     * @param param the request object
     */
    createTeam(param: TeamsApiCreateTeamRequest, options?: Configuration): Promise<InlineResponse200174>;
    /**
     * Delete a team.
     * Delete a team
     * @param param the request object
     */
    deleteTeam(param: TeamsApiDeleteTeamRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single team.
     * Get the details of a single team
     * @param param the request object
     */
    getTeam(param: TeamsApiGetTeamRequest, options?: Configuration): Promise<InlineResponse200174>;
    /**
     * Get a list of teams matching some optional criteria.
     * Get a list of teams
     * @param param the request object
     */
    getTeams(param: TeamsApiGetTeamsRequest, options?: Configuration): Promise<InlineResponse200173>;
    /**
     * Update a team.
     * Update a team
     * @param param the request object
     */
    updateTeam(param: TeamsApiUpdateTeamRequest, options?: Configuration): Promise<InlineResponse200174>;
}
export interface UserActivityApiGetUserLastActivityRequest {
    /**
     * A user id.
     * @type number
     * @memberof UserActivityApigetUserLastActivity
     */
    user_id: number;
}
export declare class ObjectUserActivityApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserActivityApiRequestFactory, responseProcessor?: UserActivityApiResponseProcessor);
    /**
     * Get the last activity of a user.
     * Get the last activity of a user
     * @param param the request object
     */
    getUserLastActivity(param: UserActivityApiGetUserLastActivityRequest, options?: Configuration): Promise<InlineResponse200185>;
}
export interface UserBoardsApiGetUserBoardRolesRequest {
    /**
     * A user id.
     * @type number
     * @memberof UserBoardsApigetUserBoardRoles
     */
    user_id: number;
}
export declare class ObjectUserBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserBoardsApiRequestFactory, responseProcessor?: UserBoardsApiResponseProcessor);
    /**
     * Get a list of the boards to which the user is assigned and with what role.
     * Get a list of boards the user is assigned to
     * @param param the request object
     */
    getUserBoardRoles(param: UserBoardsApiGetUserBoardRolesRequest, options?: Configuration): Promise<InlineResponse200182>;
}
export interface UserHistoryApiGetUsersHistoryRequest {
    /**
     * A list of the user ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof UserHistoryApigetUsersHistory
     */
    affected_user_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof UserHistoryApigetUsersHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the webhook.
     * @type Array&lt;&#39;user_confirmed&#39; | &#39;user_deleted&#39; | &#39;email_changed&#39; | &#39;username_changed&#39; | &#39;realname_changed&#39; | &#39;avatar_changed&#39; | &#39;tfa_changed&#39; | &#39;tfa_enabled&#39; | &#39;tfa_disabled&#39; | &#39;tfa_key_changed&#39; | &#39;tfa_key_reset&#39; | &#39;api_key_changed&#39; | &#39;timezone_changed&#39; | &#39;language_changed&#39; | &#39;password_changed&#39; | &#39;user_disabled&#39; | &#39;user_enabled&#39; | &#39;wip_limits_changed&#39; | &#39;global_privilege_added&#39; | &#39;global_privilege_removed&#39; | &#39;made_wm&#39; | &#39;made_non_wm&#39; | &#39;assigned_to_board&#39; | &#39;unassigned_from_board&#39; | &#39;board_role_changed&#39; | &#39;invitation_sent&#39; | &#39;invitation_code_changed&#39;&gt;
     * @memberof UserHistoryApigetUsersHistory
     */
    event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof UserHistoryApigetUsersHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof UserHistoryApigetUsersHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof UserHistoryApigetUsersHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof UserHistoryApigetUsersHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof UserHistoryApigetUsersHistory
     */
    per_page?: number;
}
export declare class ObjectUserHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserHistoryApiRequestFactory, responseProcessor?: UserHistoryApiResponseProcessor);
    /**
     * Get a list of user management history events.
     * Get a list of user management history events.
     * @param param the request object
     */
    getUsersHistory(param: UserHistoryApiGetUsersHistoryRequest, options?: Configuration): Promise<InlineResponse200179>;
}
export interface UserInvolvedBusinessRulesApiGetUserInvolvedBusinessRulesRequest {
    /**
     * A user id.
     * @type number
     * @memberof UserInvolvedBusinessRulesApigetUserInvolvedBusinessRules
     */
    user_id: number;
}
export declare class ObjectUserInvolvedBusinessRulesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserInvolvedBusinessRulesApiRequestFactory, responseProcessor?: UserInvolvedBusinessRulesApiResponseProcessor);
    /**
     * Get a list of business rules where the user is involved.
     * Get a list of business rules where the user is involved
     * @param param the request object
     */
    getUserInvolvedBusinessRules(param: UserInvolvedBusinessRulesApiGetUserInvolvedBusinessRulesRequest, options?: Configuration): Promise<InlineResponse200184>;
}
export interface UserTeamsApiCheckUserTeamRequest {
    /**
     * A user id.
     * @type number
     * @memberof UserTeamsApicheckUserTeam
     */
    user_id: number;
    /**
     * A team id.
     * @type number
     * @memberof UserTeamsApicheckUserTeam
     */
    team_id: number;
}
export interface UserTeamsApiGetUserTeamsRequest {
    /**
     * A user id.
     * @type number
     * @memberof UserTeamsApigetUserTeams
     */
    user_id: number;
}
export declare class ObjectUserTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserTeamsApiRequestFactory, responseProcessor?: UserTeamsApiResponseProcessor);
    /**
     * Check if the users is a member of the team.
     * Check if the users is a member of the team
     * @param param the request object
     */
    checkUserTeam(param: UserTeamsApiCheckUserTeamRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of teams where the user is a member.
     * Get a list of teams where the user is a member
     * @param param the request object
     */
    getUserTeams(param: UserTeamsApiGetUserTeamsRequest, options?: Configuration): Promise<InlineResponse200187>;
}
export interface UsersApiDeleteUserRequest {
    /**
     * A user id.
     * @type number
     * @memberof UsersApideleteUser
     */
    user_id: number;
}
export interface UsersApiGetUserRequest {
    /**
     * A user id.
     * @type number
     * @memberof UsersApigetUser
     */
    user_id: number;
}
export interface UsersApiGetUsersRequest {
    /**
     * A list of the user ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof UsersApigetUsers
     */
    user_ids?: Array<number>;
    /**
     * When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @type 0 | 1
     * @memberof UsersApigetUsers
     */
    is_enabled?: 0 | 1;
    /**
     * When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @type 0 | 1
     * @memberof UsersApigetUsers
     */
    is_confirmed?: 0 | 1;
    /**
     * When set to 1 you will only get users which are assigned to the boards you are assigned to.
     * @type 0 | 1
     * @memberof UsersApigetUsers
     */
    if_assigned_where_i_am?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: user_id, email, username, realname, avatar, is_enabled, is_confirmed, is_tfa_enabled and registration_date.
     * @type Array&lt;&#39;user_id&#39; | &#39;email&#39; | &#39;username&#39; | &#39;realname&#39; | &#39;avatar&#39; | &#39;is_enabled&#39; | &#39;is_confirmed&#39; | &#39;is_tfa_enabled&#39; | &#39;registration_date&#39; | &#39;timezone&#39; | &#39;language&#39;&gt;
     * @memberof UsersApigetUsers
     */
    fields?: Array<'user_id' | 'email' | 'username' | 'realname' | 'avatar' | 'is_enabled' | 'is_confirmed' | 'is_tfa_enabled' | 'registration_date' | 'timezone' | 'language'>;
    /**
     * A list of properties for which you want to get additional details. The allowed properties at the moment are: invitation_status, global_privileges, board_roles, managed_workspaces and last_activity.
     * @type Array&lt;&#39;invitation_status&#39; | &#39;global_privileges&#39; | &#39;board_roles&#39; | &#39;managed_workspaces&#39; | &#39;last_activity&#39;&gt;
     * @memberof UsersApigetUsers
     */
    expand?: Array<'invitation_status' | 'global_privileges' | 'board_roles' | 'managed_workspaces' | 'last_activity'>;
}
export interface UsersApiInviteUserRequest {
    /**
     *
     * @type InlineObject72
     * @memberof UsersApiinviteUser
     */
    InlineObject72?: InlineObject72;
}
export interface UsersApiResendInvitationRequest {
    /**
     * A user id.
     * @type number
     * @memberof UsersApiresendInvitation
     */
    user_id: number;
}
export interface UsersApiUpdateUserRequest {
    /**
     * A user id.
     * @type number
     * @memberof UsersApiupdateUser
     */
    user_id: number;
    /**
     *
     * @type InlineObject73
     * @memberof UsersApiupdateUser
     */
    InlineObject73?: InlineObject73;
}
export declare class ObjectUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UsersApiRequestFactory, responseProcessor?: UsersApiResponseProcessor);
    /**
     * Delete a user.
     * Delete a user
     * @param param the request object
     */
    deleteUser(param: UsersApiDeleteUserRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single user.
     * Get the details of a single user
     * @param param the request object
     */
    getUser(param: UsersApiGetUserRequest, options?: Configuration): Promise<InlineResponse200181>;
    /**
     * Get a list of users matching some optional criteria.
     * Get a list of users
     * @param param the request object
     */
    getUsers(param: UsersApiGetUsersRequest, options?: Configuration): Promise<InlineResponse200178>;
    /**
     * Invite a new user.
     * Invite a user
     * @param param the request object
     */
    inviteUser(param: UsersApiInviteUserRequest, options?: Configuration): Promise<InlineResponse200180>;
    /**
     * Send a new invitation email to the user.
     * Resend an invitation
     * @param param the request object
     */
    resendInvitation(param: UsersApiResendInvitationRequest, options?: Configuration): Promise<void>;
    /**
     * Update a user.
     * Update a user
     * @param param the request object
     */
    updateUser(param: UsersApiUpdateUserRequest, options?: Configuration): Promise<InlineResponse200181>;
}
export interface WebhookHistoryApiGetWebhooksHistoryRequest {
    /**
     * A list of the webhook ids that you want to get the history for.
     * @type Array&lt;number&gt;
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    webhook_ids?: Array<number>;
    /**
     * A list of user ids that performed an action.
     * @type Array&lt;number&gt;
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    user_ids?: Array<number>;
    /**
     * Type of action executed on the webhook.
     * @type Array&lt;&#39;created&#39; | &#39;updated&#39; | &#39;deleted&#39;&gt;
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    event_types?: Array<'created' | 'updated' | 'deleted'>;
    /**
     * The last date and time for which you want results.
     * @type Date
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    to?: Date;
    /**
     * The first date for which you want results.
     * @type Date
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    from_date?: Date;
    /**
     * The last date for which you want results.
     * @type Date
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    to_date?: Date;
    /**
     * The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @type number
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    page?: number;
    /**
     * Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     * @type number
     * @memberof WebhookHistoryApigetWebhooksHistory
     */
    per_page?: number;
}
export declare class ObjectWebhookHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WebhookHistoryApiRequestFactory, responseProcessor?: WebhookHistoryApiResponseProcessor);
    /**
     * Get a list of webhooks creation, deletion, update events matching some optional criteria.
     * Get a list of webhooks creation, deletion, update events
     * @param param the request object
     */
    getWebhooksHistory(param: WebhookHistoryApiGetWebhooksHistoryRequest, options?: Configuration): Promise<InlineResponse200190>;
}
export interface WebhooksApiCreateWebhookRequest {
    /**
     *
     * @type InlineObject74
     * @memberof WebhooksApicreateWebhook
     */
    InlineObject74?: InlineObject74;
}
export interface WebhooksApiDeleteWebhookRequest {
    /**
     * A webhook id.
     * @type number
     * @memberof WebhooksApideleteWebhook
     */
    webhook_id: number;
}
export interface WebhooksApiGetWebhookRequest {
    /**
     * A webhook id.
     * @type number
     * @memberof WebhooksApigetWebhook
     */
    webhook_id: number;
}
export interface WebhooksApiGetWebhooksRequest {
    /**
     * A list of the board ids for which you want to get the webhooks.
     * @type Array&lt;number&gt;
     * @memberof WebhooksApigetWebhooks
     */
    board_ids?: Array<number>;
}
export interface WebhooksApiUpdateWebhookRequest {
    /**
     * A webhook id.
     * @type number
     * @memberof WebhooksApiupdateWebhook
     */
    webhook_id: number;
    /**
     *
     * @type InlineObject75
     * @memberof WebhooksApiupdateWebhook
     */
    InlineObject75?: InlineObject75;
}
export declare class ObjectWebhooksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WebhooksApiRequestFactory, responseProcessor?: WebhooksApiResponseProcessor);
    /**
     * Create a new webhook.
     * Create a webhook
     * @param param the request object
     */
    createWebhook(param: WebhooksApiCreateWebhookRequest, options?: Configuration): Promise<InlineResponse200189>;
    /**
     * Delete a webhook.
     * Delete a webhook
     * @param param the request object
     */
    deleteWebhook(param: WebhooksApiDeleteWebhookRequest, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single webhook.
     * Get the details of a single webhook
     * @param param the request object
     */
    getWebhook(param: WebhooksApiGetWebhookRequest, options?: Configuration): Promise<InlineResponse200191>;
    /**
     * Get a list of the currently defined webhooks optionally filtered by board id.
     * Get all webhooks
     * @param param the request object
     */
    getWebhooks(param: WebhooksApiGetWebhooksRequest, options?: Configuration): Promise<InlineResponse200188>;
    /**
     * Update a webhook.
     * Update a webhook
     * @param param the request object
     */
    updateWebhook(param: WebhooksApiUpdateWebhookRequest, options?: Configuration): Promise<InlineResponse200191>;
}
export interface WorkflowsApiCopyWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApicopyWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof WorkflowsApicopyWorkflow
     */
    workflow_id: number;
    /**
     *
     * @type InlineObject25
     * @memberof WorkflowsApicopyWorkflow
     */
    InlineObject25?: InlineObject25;
}
export interface WorkflowsApiCreateWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApicreateWorkflow
     */
    board_id: number;
    /**
     *
     * @type InlineObject23
     * @memberof WorkflowsApicreateWorkflow
     */
    InlineObject23?: InlineObject23;
}
export interface WorkflowsApiGetWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApigetWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof WorkflowsApigetWorkflow
     */
    workflow_id: number;
}
export interface WorkflowsApiGetWorkflowsRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApigetWorkflows
     */
    board_id: number;
}
export interface WorkflowsApiUpdateWorkflowRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApiupdateWorkflow
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof WorkflowsApiupdateWorkflow
     */
    workflow_id: number;
    /**
     *
     * @type InlineObject24
     * @memberof WorkflowsApiupdateWorkflow
     */
    InlineObject24?: InlineObject24;
}
export interface WorkflowsApiWorkflowDeleteRequest {
    /**
     * A board id.
     * @type number
     * @memberof WorkflowsApiworkflowDelete
     */
    board_id: number;
    /**
     * A workflow id.
     * @type number
     * @memberof WorkflowsApiworkflowDelete
     */
    workflow_id: number;
}
export declare class ObjectWorkflowsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkflowsApiRequestFactory, responseProcessor?: WorkflowsApiResponseProcessor);
    /**
     * Copy existing workflow.
     * Copy a workflow
     * @param param the request object
     */
    copyWorkflow(param: WorkflowsApiCopyWorkflowRequest, options?: Configuration): Promise<InlineResponse20054>;
    /**
     * Create a new workflow
     * Create workflow
     * @param param the request object
     */
    createWorkflow(param: WorkflowsApiCreateWorkflowRequest, options?: Configuration): Promise<InlineResponse20052>;
    /**
     * Check if a workflow exists and get its details.
     * Get workflow details
     * @param param the request object
     */
    getWorkflow(param: WorkflowsApiGetWorkflowRequest, options?: Configuration): Promise<InlineResponse20053>;
    /**
     * Check if board workflows exists and get their details.
     * Get workflow details
     * @param param the request object
     */
    getWorkflows(param: WorkflowsApiGetWorkflowsRequest, options?: Configuration): Promise<InlineResponse20052>;
    /**
     * Update workflow`s properties
     * Update workflow
     * @param param the request object
     */
    updateWorkflow(param: WorkflowsApiUpdateWorkflowRequest, options?: Configuration): Promise<InlineResponse20053>;
    /**
     * Delete a workflow.
     * Delete a workflow
     * @param param the request object
     */
    workflowDelete(param: WorkflowsApiWorkflowDeleteRequest, options?: Configuration): Promise<void>;
}
export interface WorkspaceManagersApiAddWorkspaceManagerRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspaceManagersApiaddWorkspaceManager
     */
    workspace_id: number;
    /**
     * A user id.
     * @type number
     * @memberof WorkspaceManagersApiaddWorkspaceManager
     */
    user_id: number;
}
export interface WorkspaceManagersApiCheckWorkspaceManagerRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspaceManagersApicheckWorkspaceManager
     */
    workspace_id: number;
    /**
     * A user id.
     * @type number
     * @memberof WorkspaceManagersApicheckWorkspaceManager
     */
    user_id: number;
}
export interface WorkspaceManagersApiGetWorkspaceManagersRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspaceManagersApigetWorkspaceManagers
     */
    workspace_id: number;
}
export interface WorkspaceManagersApiRemoveWorkspaceManagerRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspaceManagersApiremoveWorkspaceManager
     */
    workspace_id: number;
    /**
     * A user id.
     * @type number
     * @memberof WorkspaceManagersApiremoveWorkspaceManager
     */
    user_id: number;
}
export declare class ObjectWorkspaceManagersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkspaceManagersApiRequestFactory, responseProcessor?: WorkspaceManagersApiResponseProcessor);
    /**
     * Make a user a workspace manager.
     * Make a user a workspace manager
     * @param param the request object
     */
    addWorkspaceManager(param: WorkspaceManagersApiAddWorkspaceManagerRequest, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a workspace manager.
     * Check if a user is a workspace manager
     * @param param the request object
     */
    checkWorkspaceManager(param: WorkspaceManagersApiCheckWorkspaceManagerRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of the workspace managers for a workspace.
     * Get a list of workspace managers
     * @param param the request object
     */
    getWorkspaceManagers(param: WorkspaceManagersApiGetWorkspaceManagersRequest, options?: Configuration): Promise<InlineResponse200195>;
    /**
     * Make a user not a workspace manager.
     * Make a user not a workspace manager
     * @param param the request object
     */
    removeWorkspaceManager(param: WorkspaceManagersApiRemoveWorkspaceManagerRequest, options?: Configuration): Promise<void>;
}
export interface WorkspacesApiCreateWorkspaceRequest {
    /**
     *
     * @type InlineObject76
     * @memberof WorkspacesApicreateWorkspace
     */
    InlineObject76?: InlineObject76;
}
export interface WorkspacesApiGetWorkspaceRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspacesApigetWorkspace
     */
    workspace_id: number;
}
export interface WorkspacesApiGetWorkspacesRequest {
    /**
     * A list of the workspace ids that you want to get.
     * @type Array&lt;number&gt;
     * @memberof WorkspacesApigetWorkspaces
     */
    workspace_ids?: Array<number>;
    /**
     * When set to 1 you will only get team workspaces. When set to 2 you will only get management workspaces.
     * @type 1 | 2
     * @memberof WorkspacesApigetWorkspaces
     */
    type?: 1 | 2;
    /**
     * When set to 0 you will only get non-archived workspaces. When set to 1 you will only get archived workspaces.
     * @type 0 | 1
     * @memberof WorkspacesApigetWorkspaces
     */
    is_archived?: 0 | 1;
    /**
     * When set to 1 you will only get workspaces for which you are a workspace manager.
     * @type 0 | 1
     * @memberof WorkspacesApigetWorkspaces
     */
    if_workspace_manager?: 0 | 1;
    /**
     * When set to 1 you will only get workspaces in which you are assigned to at least one board.
     * @type 0 | 1
     * @memberof WorkspacesApigetWorkspaces
     */
    if_assigned_to_boards?: 0 | 1;
    /**
     * When set to 0 or 1 and the optional expand parameter includes boards, you will only get non archived / archived boards respectively.
     * @type 0 | 1
     * @memberof WorkspacesApigetWorkspaces
     */
    board_filter_is_archived?: 0 | 1;
    /**
     * When set to 1 and the optional expand parameter includes boards, you will only get boards you are assigned to.
     * @type 0 | 1
     * @memberof WorkspacesApigetWorkspaces
     */
    board_filter_if_assigned?: 0 | 1;
    /**
     * A list of fields that you want in the response. The allowed fields are: workspace_id, is_archived and name.
     * @type Array&lt;&#39;workspace_id&#39; | &#39;type&#39; | &#39;is_archived&#39; | &#39;name&#39;&gt;
     * @memberof WorkspacesApigetWorkspaces
     */
    fields?: Array<'workspace_id' | 'type' | 'is_archived' | 'name'>;
    /**
     * A list of properties for which you want to get additional details. The only allowed property at the moment is boards optionally followed by a list of fields inside square brackets. For boards the allowed fields are board_id, is_archived and name.
     * @type Array&lt;string&gt;
     * @memberof WorkspacesApigetWorkspaces
     */
    expand?: Array<string>;
}
export interface WorkspacesApiUpdateWorkspaceRequest {
    /**
     * A workspace id.
     * @type number
     * @memberof WorkspacesApiupdateWorkspace
     */
    workspace_id: number;
    /**
     *
     * @type InlineObject77
     * @memberof WorkspacesApiupdateWorkspace
     */
    InlineObject77?: InlineObject77;
}
export declare class ObjectWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkspacesApiRequestFactory, responseProcessor?: WorkspacesApiResponseProcessor);
    /**
     * Create a new workspace.
     * Create a workspace
     * @param param the request object
     */
    createWorkspace(param: WorkspacesApiCreateWorkspaceRequest, options?: Configuration): Promise<InlineResponse200193>;
    /**
     * Get the details of a single workspace.
     * Get the details of a single workspace
     * @param param the request object
     */
    getWorkspace(param: WorkspacesApiGetWorkspaceRequest, options?: Configuration): Promise<InlineResponse200194>;
    /**
     * Get a list of workspaces matching some optional criteria.
     * Get a list of workspaces
     * @param param the request object
     */
    getWorkspaces(param: WorkspacesApiGetWorkspacesRequest, options?: Configuration): Promise<InlineResponse200192>;
    /**
     * Update a workspace.
     * Update a workspace
     * @param param the request object
     */
    updateWorkspace(param: WorkspacesApiUpdateWorkspaceRequest, options?: Configuration): Promise<InlineResponse200194>;
}
export declare class ObservableApiLimitsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ApiLimitsApiRequestFactory, responseProcessor?: ApiLimitsApiResponseProcessor);
    /**
     * Get a list of the api request limits.
     * Get the hourly and minutely limits for the api requests
     */
    getApiLimits(options?: Configuration): Observable<InlineResponse2003>;
}
export declare class ObservableApiRequestHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ApiRequestHistoryApiRequestFactory, responseProcessor?: ApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistory(user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse2004>;
    /**
     * Get a list of api requests aggregated by user matching some optional criteria.
     * Get a list of api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option for choosing the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Observable<InlineResponse2005>;
}
export declare class ObservableArchivedCardVersionsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ArchivedCardVersionsApiRequestFactory, responseProcessor?: ArchivedCardVersionsApiResponseProcessor);
    /**
     * Create a new archived card version.
     * Create a archived card version
     * @param InlineObject
     */
    createArchiveCardVersion(InlineObject?: InlineObject, options?: Configuration): Observable<InlineResponse2007>;
    /**
     * Delete a archived card version.
     * Delete a archived card version
     * @param version_id A archived card version id.
     */
    deleteArchiveCardVersion(version_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single archived card version.
     * Get the details of a single archived card version
     * @param version_id A archived card version id.
     */
    getArchiveCardVersion(version_id: number, options?: Configuration): Observable<InlineResponse2007>;
    /**
     * Get a list of archived card versions.
     * Get a list of archived card versions
     */
    getArchivedCardVersions(options?: Configuration): Observable<InlineResponse2006>;
    /**
     * Update a archived card version.
     * Update a archived card version
     * @param version_id A archived card version id.
     * @param InlineObject1
     */
    updateArchiveCardVersion(version_id: number, InlineObject1?: InlineObject1, options?: Configuration): Observable<InlineResponse2007>;
}
export declare class ObservableBlockReasonBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BlockReasonBoardsApiRequestFactory, responseProcessor?: BlockReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the block reason is available.
     * Get a list of boards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonBoards(reason_id: number, options?: Configuration): Observable<InlineResponse20011>;
    /**
     * Make a block reason available or unavailable on several boards.
     * Make a block reason available or unavailable on several boards
     * @param reason_id A block reason id.
     * @param InlineObject4
     */
    updateBlockReasonBoards(reason_id: number, InlineObject4?: InlineObject4, options?: Configuration): Observable<void>;
}
export declare class ObservableBlockReasonCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BlockReasonCardsApiRequestFactory, responseProcessor?: BlockReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the block reason is available.
     * Get a list of cards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonCards(reason_id: number, options?: Configuration): Observable<InlineResponse20012>;
}
export declare class ObservableBlockReasonHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BlockReasonHistoryApiRequestFactory, responseProcessor?: BlockReasonHistoryApiResponseProcessor);
    /**
     * Get a list of block reasons creation, deletion, update events matching some optional criteria.
     * Get a list of block reasons creation, deletion, update events
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse20010>;
}
export declare class ObservableBlockReasonsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BlockReasonsApiRequestFactory, responseProcessor?: BlockReasonsApiResponseProcessor);
    /**
     * Create a new block reason.
     * Create a block reason
     * @param InlineObject2
     */
    createBlockReason(InlineObject2?: InlineObject2, options?: Configuration): Observable<InlineResponse2009>;
    /**
     * Delete a block reason.
     * Delete a block reason
     * @param reason_id A block reason id.
     * @param replace_with_reason_id The id of a block reason with which to block the cards which are currently blocked with the block reason which is about to be deleted.
     */
    deleteBlockReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single block reason.
     * Get the details of a single block reason
     * @param reason_id A block reason id.
     */
    getBlockReason(reason_id: number, options?: Configuration): Observable<InlineResponse2009>;
    /**
     * Get a list of block reasons matching some optional criteria.
     * Get a list of block reasons
     * @param reason_ids A list of the block reason ids that you want to get.
     * @param label Find a block reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled block reasons. When set to 0 you will only get disabled block reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, icon_type, icon_id, label, color, with_cards, with_date, with_users, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getBlockReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'with_cards' | 'with_date' | 'with_users' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Observable<InlineResponse2008>;
    /**
     * Update a block reason.
     * Update a block reason
     * @param reason_id A block reason id.
     * @param InlineObject3
     */
    updateBlockReason(reason_id: number, InlineObject3?: InlineObject3, options?: Configuration): Observable<InlineResponse2009>;
}
export declare class ObservableBoardAssigneesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardAssigneesApiRequestFactory, responseProcessor?: BoardAssigneesApiResponseProcessor);
    /**
     * Get a list of the assignees for a board and their roles.
     * Get a list of board assignees
     * @param board_id A board id.
     */
    getBoardAssignees(board_id: number, options?: Configuration): Observable<InlineResponse20050>;
    /**
     * Check if a user is assigned to a board and with what role.
     * Get the role of a board assignee
     * @param board_id A board id.
     * @param user_id A user id.
     */
    getBoardUserRole(board_id: number, user_id: number, options?: Configuration): Observable<InlineResponse20026>;
    /**
     * Assign a user to a board or change his or her role.
     * Assign a user to a board
     * @param board_id A board id.
     * @param user_id A user id.
     * @param InlineObject22
     */
    setBoardUserRole(board_id: number, user_id: number, InlineObject22?: InlineObject22, options?: Configuration): Observable<void>;
    /**
     * Unassign a user from a board.
     * Unassign a user from a board
     * @param board_id A board id.
     * @param user_id A user id.
     */
    unsetBoardUserRole(board_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardBlockReasonsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardBlockReasonsApiRequestFactory, responseProcessor?: BoardBlockReasonsApiResponseProcessor);
    /**
     * Make a block reason available on a board.
     * Make a block reason available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    addBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a block reason is available on a board.
     * Check if a block reason is available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    checkBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the block reasons available on a board.
     * Get a list of block reasons available on a board
     * @param board_id A board id.
     */
    getBoardBlockReasons(board_id: number, options?: Configuration): Observable<InlineResponse20016>;
    /**
     * Make a block reason unavailable on a board.
     * Make a block reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    removeBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardCardTemplatesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardCardTemplatesApiRequestFactory, responseProcessor?: BoardCardTemplatesApiResponseProcessor);
    /**
     * Make a card template available on a board.
     * Make a card template available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    addBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a card template is available on a board.
     * Check if a card template is available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    checkBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the card templates available on a board.
     * Get a list of card templates available on a board
     * @param board_id A board id.
     */
    getBoardCardTemplates(board_id: number, options?: Configuration): Observable<InlineResponse20017>;
    /**
     * Make a card template unavailable on a board.
     * Make a card template unavailable on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    removeBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardCardTypesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardCardTypesApiRequestFactory, responseProcessor?: BoardCardTypesApiResponseProcessor);
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    addBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Observable<InlineResponse20019>;
    /**
     * Check if a card type is available on a board.
     * Check if a card type is available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    checkBoardCardType(board_id: number, type_id: number, options?: Configuration): Observable<InlineResponse20019>;
    /**
     * Get the effective settings of a card type for a board if it is available on it.
     * Get the effective settings of a card type for a board if it is available on it
     * @param board_id A board id.
     * @param type_id A type id.
     */
    getBoardCardTypeEffectiveSettings(board_id: number, type_id: number, options?: Configuration): Observable<InlineResponse20019>;
    /**
     * Get a list of the card types available on a board.
     * Get a list of card types available on a board
     * @param board_id A board id.
     */
    getBoardCardTypes(board_id: number, options?: Configuration): Observable<InlineResponse20018>;
    /**
     * Make a card type unavailable on a board.
     * Make a card type unavailable on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    removeBoardCardType(board_id: number, type_id: number, options?: Configuration): Observable<void>;
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    updateBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Observable<InlineResponse20019>;
}
export declare class ObservableBoardCustomFieldAllowedValuesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldAllowedValuesApiRequestFactory, responseProcessor?: BoardCustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Add or update an allowed value for a custom field for a board.
     * Add or update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject10
     */
    addOrUpdateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject10?: InlineObject10, options?: Configuration): Observable<InlineResponse20028>;
    /**
     * Get the details of a single allowed value for a custom field for a board.
     * Get the details of a single allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Observable<InlineResponse20028>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown for a board.
     * Get a list of the allowed values of a custom field of type dropdown for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldAllowedValues(board_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20027>;
    /**
     * Remove an allowed value for a custom field for a board.
     * Remove an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Observable<void>;
    /**
     * Update an allowed value for a custom field for a board.
     * Update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject11
     */
    updateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject11?: InlineObject11, options?: Configuration): Observable<InlineResponse20028>;
}
export declare class ObservableBoardCustomFieldDefaultContributorsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldDefaultContributorsApiRequestFactory, responseProcessor?: BoardCustomFieldDefaultContributorsApiResponseProcessor);
    /**
     * Make a contributor one of the default for a custom field for a board.
     * Make a contributor one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a contributor is one of the default for a custom field for a board.
     * Check if a contributor is one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the default contributors for a custom field for a board.
     * Get a list of the default contributors for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldDefaultContributors(board_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20029>;
    /**
     * Remove a contributor from the default for a board.
     * Remove a contributor from the default for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardCustomFieldsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldsApiRequestFactory, responseProcessor?: BoardCustomFieldsApiResponseProcessor);
    /**
     * Make a custom field unavailable on a board.
     * Make a custom field unavailable on a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    removeBoardCustomField(board_id: number, field_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardDiscardReasonsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardDiscardReasonsApiRequestFactory, responseProcessor?: BoardDiscardReasonsApiResponseProcessor);
    /**
     * Make a discard reason available on a board.
     * Make a discard reason available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    addBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a discard reason is available on a board.
     * Check if a discard reason is available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    checkBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the discard reasons available on a board.
     * Get a list of discard reasons available on a board
     * @param board_id A board id.
     */
    getBoardDiscardReasons(board_id: number, options?: Configuration): Observable<InlineResponse20030>;
    /**
     * Make a discard reason unavailable on a board.
     * Make a discard reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    removeBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardSettingsApiRequestFactory, responseProcessor?: BoardSettingsApiResponseProcessor);
    /**
     * Get the values of the board settings.
     * Get the values of the board settings
     * @param board_id A board id.
     */
    getBoardSettings(board_id: number, options?: Configuration): Observable<InlineResponse20043>;
    /**
     * Set the values of the board settings.
     * Set the values of the board settings
     * @param board_id A board id.
     * @param BoardSettings
     */
    setBoardSettings(board_id: number, BoardSettings?: BoardSettings, options?: Configuration): Observable<InlineResponse20043>;
}
export declare class ObservableBoardStickersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardStickersApiRequestFactory, responseProcessor?: BoardStickersApiResponseProcessor);
    /**
     * Make a sticker available on a board.
     * Make a sticker available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject19
     */
    addBoardSticker(board_id: number, sticker_id: number, InlineObject19?: InlineObject19, options?: Configuration): Observable<InlineResponse20045>;
    /**
     * Check if a sticker is available on a board.
     * Check if a sticker is available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    checkBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Observable<InlineResponse20045>;
    /**
     * Get a list of the stickers available on a board.
     * Get a list of stickers available on a board
     * @param board_id A board id.
     */
    getBoardStickers(board_id: number, options?: Configuration): Observable<InlineResponse20044>;
    /**
     * Make a sticker unavailable on a board.
     * Make a sticker unavailable on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    removeBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Observable<void>;
    /**
     * Update the properties of a sticker for a board.
     * Update the properties of a sticker for a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject20
     */
    updateBoardSticker(board_id: number, sticker_id: number, InlineObject20?: InlineObject20, options?: Configuration): Observable<InlineResponse20045>;
}
export declare class ObservableBoardStructureApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardStructureApiRequestFactory, responseProcessor?: BoardStructureApiResponseProcessor);
    /**
     * Get all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.
     * Get the current board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructure(board_id: number, options?: Configuration): Observable<InlineResponse20025>;
    /**
     * Get only the revision number of the current board structure.
     * Get the current revision of the board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructureRevision(board_id: number, options?: Configuration): Observable<InlineResponse20026>;
}
export declare class ObservableBoardStructureRevisionsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardStructureRevisionsApiRequestFactory, responseProcessor?: BoardStructureRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the board structure.
     * Get a specific revision of the board structure
     * @param board_id A board id.
     * @param revision A revision number.
     */
    getBoardStructureRevision(board_id: number, revision: number, options?: Configuration): Observable<InlineResponse20025>;
    /**
     * Get a list of the revisions of the board structure and the date and time they were replaced.
     * Get a list of revisions of the board structure
     * @param board_id A board id.
     */
    getBoardStructureRevisions(board_id: number, options?: Configuration): Observable<InlineResponse20046>;
}
export declare class ObservableBoardTagsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardTagsApiRequestFactory, responseProcessor?: BoardTagsApiResponseProcessor);
    /**
     * Make a tag available on a board.
     * Make a tag available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    addBoardTag(board_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a tag is available on a board.
     * Check if a tag is available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    checkBoardTag(board_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the tags available on a board.
     * Get a list of tags available on a board
     * @param board_id A board id.
     */
    getBoardTags(board_id: number, options?: Configuration): Observable<InlineResponse20047>;
    /**
     * Make a tag unavailable on a board.
     * Make a tag unavailable on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    removeBoardTag(board_id: number, tag_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardTeamsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardTeamsApiRequestFactory, responseProcessor?: BoardTeamsApiResponseProcessor);
    /**
     * Give a team access to a board.
     * Give a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     * @param InlineObject21
     */
    addBoardTeam(board_id: number, team_id: number, InlineObject21?: InlineObject21, options?: Configuration): Observable<void>;
    /**
     * Get the role of a team for the current board.
     * Get the role of a team for the current board.
     * @param board_id A board id.
     * @param team_id A team id.
     */
    getBoardTeamRole(board_id: number, team_id: number, options?: Configuration): Observable<InlineResponse20049>;
    /**
     * Get a list of the teams having access to a board.
     * Get a list of teams having access to a board
     * @param board_id A board id.
     */
    getBoardTeams(board_id: number, options?: Configuration): Observable<InlineResponse20048>;
    /**
     * Deny a team access to a board.
     * Deny a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     */
    removeBoardTeam(board_id: number, team_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardVisibleStandardFieldsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardVisibleStandardFieldsApiRequestFactory, responseProcessor?: BoardVisibleStandardFieldsApiResponseProcessor);
    /**
     * Make a standard field visible on a board.
     * Make a standard field visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    addBoardStandardField(board_id: number, field_name: string, options?: Configuration): Observable<void>;
    /**
     * Check if a standard field is visible on a board.
     * Check if a standard field is visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    checkBoardStandardField(board_id: number, field_name: string, options?: Configuration): Observable<void>;
    /**
     * Get a list of the standard fields visible on a board.
     * Get a list of standard fields visible on a board
     * @param board_id A board id.
     */
    getBoardVisibleStandardFields(board_id: number, options?: Configuration): Observable<InlineResponse20051>;
    /**
     * Make a standard field unvisible on a board.
     * Make a standard field unvisible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    removeBoardStandardField(board_id: number, field_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BoardsApiRequestFactory, responseProcessor?: BoardsApiResponseProcessor);
    /**
     * Create a new board.
     * Create a board
     * @param InlineObject5
     */
    createBoard(InlineObject5?: InlineObject5, options?: Configuration): Observable<InlineResponse20014>;
    /**
     * Delete a board.
     * Delete a board
     * @param board_id A board id.
     */
    deleteBoard(board_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single board.
     * Get the details of a single board
     * @param board_id A board id.
     */
    getBoard(board_id: number, options?: Configuration): Observable<InlineResponse20015>;
    /**
     * Get a list of boards matching some optional criteria.
     * Get a list of boards
     * @param board_ids A list of the board ids that you want to get.
     * @param workspace_ids A list of the workspace ids holding the boards that you want to get.
     * @param is_archived When set to 0 you will only get non-archived boards. When set to 1 you will only get archived boards.
     * @param if_assigned When set to 1 you will only get boards to which you are assigned.
     * @param fields A list of fields that you want in the response. The allowed fields are: board_id, workspace_id, is_archived, name and description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: workflows, settings and structure.
     */
    getBoards(board_ids?: Array<number>, workspace_ids?: Array<number>, is_archived?: 0 | 1, if_assigned?: 0 | 1, fields?: Array<'board_id' | 'workspace_id' | 'is_archived' | 'name' | 'description'>, expand?: Array<'workflows' | 'settings' | 'structure'>, options?: Configuration): Observable<InlineResponse20013>;
    /**
     * Update a board.
     * Update a board
     * @param board_id A board id.
     * @param InlineObject6
     */
    updateBoard(board_id: number, InlineObject6?: InlineObject6, options?: Configuration): Observable<InlineResponse20015>;
}
export declare class ObservableBusinessRuleExecutionHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BusinessRuleExecutionHistoryApiRequestFactory, responseProcessor?: BusinessRuleExecutionHistoryApiResponseProcessor);
    /**
     * Get a list of business rule executions matching some optional criteria.
     * Get a list of business rule executions
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistory(business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse20055>;
}
export declare class ObservableCardAttachmentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardAttachmentsApiRequestFactory, responseProcessor?: CardAttachmentsApiResponseProcessor);
    /**
     * Add a card's attachment.
     * Add a card's attachment
     * @param card_id A card id.
     * @param CardAttachmentCreateRequest
     */
    addCardAttachment(card_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Delete an attachment for a card.
     * Delete an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an attachment for a card.
     * Get the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Get a card's attachments.
     * Get a card's attachments
     * @param card_id A card id.
     */
    getCardAttachments(card_id: number, options?: Configuration): Observable<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card.
     * Update the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardAttachment(card_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Observable<void | InlineResponse20062>;
}
export declare class ObservableCardBlockReasonApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardBlockReasonApiRequestFactory, responseProcessor?: CardBlockReasonApiResponseProcessor);
    /**
     * Check if a card is blocked and for what reason.
     * Get a card's block reason
     * @param card_id A card id.
     */
    getCardBlockReason(card_id: number, options?: Configuration): Observable<InlineResponse20092>;
    /**
     * Block a card or change its block reason.
     * Block a card
     * @param card_id A card id.
     * @param InlineObject38
     */
    setCardBlockReason(card_id: number, InlineObject38?: InlineObject38, options?: Configuration): Observable<void>;
    /**
     * Unblock a card.
     * Unblock a card
     * @param card_id A card id.
     */
    unblockCard(card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardCoOwnersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCoOwnersApiRequestFactory, responseProcessor?: CardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card.
     * Add a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardCoOwner(card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a co-owner is one for the card.
     * Check if a co-owner is one for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardCoOwner(card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a card's co-owners.
     * Get a card's co-owners
     * @param card_id A card id.
     */
    getCardCoOwners(card_id: number, options?: Configuration): Observable<InlineResponse20095>;
    /**
     * Remove a user as a co-owner for a card.
     * Remove a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardCoOwner(card_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardCommentAttachmentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCommentAttachmentsApiRequestFactory, responseProcessor?: CardCommentAttachmentsApiResponseProcessor);
    /**
     * Add a card comment's attachment.
     * Add a card comment's attachment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentAttachmentCreateRequest
     */
    addCarCommentAttachment(card_id: number, comment_id: number, CommentAttachmentCreateRequest?: CommentAttachmentCreateRequest, options?: Configuration): Observable<InlineResponse200197>;
    /**
     * Delete an attachment for a card comment.
     * Delete an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    deleteCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an attachment for a card comment.
     * Get the details of an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    getCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Observable<void | InlineResponse20098>;
    /**
     * Get a card comment's attachments.
     * Get a card comment's attachments
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardCommentAttachments(card_id: number, comment_id: number, options?: Configuration): Observable<InlineResponse200196>;
}
export declare class ObservableCardCommentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCommentsApiRequestFactory, responseProcessor?: CardCommentsApiResponseProcessor);
    /**
     * Add a comment to a card.
     * Add a comment to a card
     * @param card_id A card id.
     * @param CommentCreateRequest
     */
    addCardComment(card_id: number, CommentCreateRequest?: CommentCreateRequest, options?: Configuration): Observable<InlineResponse20097>;
    /**
     * Delete a comment for a card.
     * Delete a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    deleteCardComment(card_id: number, comment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a comment for a card.
     * Get the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardComment(card_id: number, comment_id: number, options?: Configuration): Observable<InlineResponse20097>;
    /**
     * Get a card's comments.
     * Get a card's comments
     * @param card_id A card id.
     */
    getCardComments(card_id: number, options?: Configuration): Observable<InlineResponse20096>;
    /**
     * Update the details of a comment for a card.
     * Update the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentUpdateRequest
     */
    updateCardComment(card_id: number, comment_id: number, CommentUpdateRequest?: CommentUpdateRequest, options?: Configuration): Observable<void | InlineResponse20097>;
}
export declare class ObservableCardCustomFieldContributorsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card.
     * Add a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a user is a contributor for a custom field for a card.
     * Check if a user is a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the default contributors for a custom field for a card.
     * Get a list of the default contributors for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldContributors(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card.
     * Remove a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardCustomFieldFilesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldFilesApiRequestFactory, responseProcessor?: CardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card.
     * Add a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldFileCreateRequest
     */
    addCardCustomFieldFile(card_id: number, field_id: number, CardCustomFieldFileCreateRequest?: CardCustomFieldFileCreateRequest, options?: Configuration): Observable<void | InlineResponse200100>;
    /**
     * Delete a file for a custom field for a card.
     * Delete a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single file for a custom field for a card.
     * Get the details of a single file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Observable<InlineResponse200101>;
    /**
     * Get a list of the files for a custom field for a card.
     * Get a list of the files for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldFiles(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20099>;
    /**
     * Update a file for a custom field for a card.
     * Update a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param InlineObject40
     */
    updateCardCustomFieldFile(card_id: number, field_id: number, id: number, InlineObject40?: InlineObject40, options?: Configuration): Observable<void | InlineResponse200101>;
}
export declare class ObservableCardCustomFieldSelectedCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedCardsApiRequestFactory, responseProcessor?: CardCustomFieldSelectedCardsApiResponseProcessor);
    /**
     * Add or update a selected card for a custom field for a card.
     * Add or update a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     * @param InlineObject41
     */
    addOrUpdateCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, InlineObject41?: InlineObject41, options?: Configuration): Observable<void | InlineResponse200103>;
    /**
     * Get the details of a selected card for a custom field for a card.
     * Get the details of a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    getCardCustomFieldSelectedCard(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Observable<InlineResponse200103>;
    /**
     * Get a list of the selected cards for a custom field of type card picker for a card.
     * Get a list of the selected cards for a custom field of type card picker for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedCards(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse200102>;
    /**
     * Remove a selected card for a custom field for a card.
     * Remove a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    removeCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardCustomFieldSelectedValuesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card.
     * Add or update a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param CardCustomFieldSelectedValueAddOrUpdateRequest
     */
    addOrUpdateCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, CardCustomFieldSelectedValueAddOrUpdateRequest?: CardCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Observable<InlineResponse20071 | void>;
    /**
     * Get the details of a selected value for a custom field for a card.
     * Get the details of a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardCustomFieldSelectedValue(card_id: number, field_id: number, value_id: number, options?: Configuration): Observable<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card.
     * Get a list of the selected values for a custom field of type dropdown for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedValues(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse200104>;
    /**
     * Remove a selected value for a custom field for a card.
     * Remove a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardCustomFieldVotesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldVotesApiRequestFactory, responseProcessor?: CardCustomFieldVotesApiResponseProcessor);
    /**
     * Delete your vote for a custom field for a card.
     * Delete your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    deleteMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the votes for a custom field for a card.
     * Get a list of the votes for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldVotes(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse200105>;
    /**
     * Get your vote for a custom field for a card.
     * Get your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse200106>;
    /**
     * Set your vote for a custom field for a card.
     * Set your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject42
     */
    setMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject42?: InlineObject42, options?: Configuration): Observable<void>;
    /**
     * Update your vote for a custom field for a card.
     * Update your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject43
     */
    updateMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject43?: InlineObject43, options?: Configuration): Observable<InlineResponse200107>;
}
export declare class ObservableCardCustomFieldsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldsApiRequestFactory, responseProcessor?: CardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card.
     * Add a custom field to a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldAddOrUpdateRequest
     */
    addCardCustomField(card_id: number, field_id: number, CardCustomFieldAddOrUpdateRequest?: CardCustomFieldAddOrUpdateRequest, options?: Configuration): Observable<void>;
    /**
     * Remove a custom field from a card.
     * Remove a custom field from a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardCustomField(card_id: number, field_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardOutcomeCheckpointsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCheckpointsApiRequestFactory, responseProcessor?: CardOutcomeCheckpointsApiResponseProcessor);
    /**
     * Add a card outcome's checkpoint.
     * Add a card outcome's checkpoint
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeCheckpointCreateRequest
     */
    addCardOutcomeCheckpoint(card_id: number, outcome_id: number, CardOutcomeCheckpointCreateRequest?: CardOutcomeCheckpointCreateRequest, options?: Configuration): Observable<InlineResponse200113>;
    /**
     * Delete a checkpoint for a card outcome.
     * Delete a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    deleteCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a checkpoint for a card outcome.
     * Get the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    getCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Observable<void | InlineResponse200113>;
    /**
     * Get a card outcome's checkpoints.
     * Get a card outcome's checkpoints
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCheckpoints(card_id: number, outcome_id: number, options?: Configuration): Observable<InlineResponse200112>;
    /**
     * Update the details of a checkpoint for a card outcome.
     * Update the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     * @param CardOutcomeCheckpointUpdateRequest
     */
    updateCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, CardOutcomeCheckpointUpdateRequest?: CardOutcomeCheckpointUpdateRequest, options?: Configuration): Observable<InlineResponse200113>;
}
export declare class ObservableCardOutcomeCurrentValueApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCurrentValueApiRequestFactory, responseProcessor?: CardOutcomeCurrentValueApiResponseProcessor);
    /**
     * Get the details of a current value for a card outcome.
     * Get the details of a current value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCurrentValue(card_id: number, outcome_id: number, options?: Configuration): Observable<InlineResponse200114>;
}
export declare class ObservableCardOutcomeValuesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeValuesApiRequestFactory, responseProcessor?: CardOutcomeValuesApiResponseProcessor);
    /**
     * Add a card outcome's value.
     * Add a card outcome's value
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeValueCreateRequest
     */
    addCardOutcomeValue(card_id: number, outcome_id: number, CardOutcomeValueCreateRequest?: CardOutcomeValueCreateRequest, options?: Configuration): Observable<InlineResponse200114>;
    /**
     * Delete a value for a card outcome.
     * Delete a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    deleteCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a value for a card outcome.
     * Get the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    getCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Observable<void | InlineResponse200115>;
    /**
     * Get a card outcome's values.
     * Get a card outcome's values
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeValues(card_id: number, outcome_id: number, options?: Configuration): Observable<InlineResponse200114>;
    /**
     * Update the details of a value for a card outcome.
     * Update the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     * @param CardOutcomeValueUpdateRequest
     */
    updateCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, CardOutcomeValueUpdateRequest?: CardOutcomeValueUpdateRequest, options?: Configuration): Observable<InlineResponse200115>;
}
export declare class ObservableCardOutcomesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardOutcomesApiRequestFactory, responseProcessor?: CardOutcomesApiResponseProcessor);
    /**
     * Add an outcome to a card.
     * Add an outcome to a card
     * @param card_id A card id.
     * @param CardOutcomeCreateRequest
     */
    addCardOutcome(card_id: number, CardOutcomeCreateRequest?: CardOutcomeCreateRequest, options?: Configuration): Observable<InlineResponse200110>;
    /**
     * Delete an outcome for a card.
     * Delete an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    deleteCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an outcome for a card.
     * Get the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Observable<InlineResponse200111>;
    /**
     * Get a card's outcomes.
     * Get a card's outcomes
     * @param card_id A card id.
     */
    getCardOutcomes(card_id: number, options?: Configuration): Observable<InlineResponse200109>;
    /**
     * Update the details of an outcome for a card.
     * Update the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeUpdateRequest
     */
    updateCardOutcome(card_id: number, outcome_id: number, CardOutcomeUpdateRequest?: CardOutcomeUpdateRequest, options?: Configuration): Observable<void | InlineResponse200111>;
}
export declare class ObservableCardRevisionsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardRevisionsApiRequestFactory, responseProcessor?: CardRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the card.
     * Get a specific revision of the card
     * @param card_id A card id.
     * @param revision A revision number.
     */
    getCardRevision(card_id: number, revision: number, options?: Configuration): Observable<InlineResponse200121>;
    /**
     * Get a list of the revisions of the card and the date and time they were replaced.
     * Get a list of revisions of the card
     * @param card_id A card id.
     */
    getCardRevisions(card_id: number, options?: Configuration): Observable<InlineResponse200120>;
}
export declare class ObservableCardStickersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardStickersApiRequestFactory, responseProcessor?: CardStickersApiResponseProcessor);
    /**
     * Add a sticker to a card.
     * Add a sticker to a card
     * @param card_id A card id.
     * @param InlineObject47
     */
    addCardSticker(card_id: number, InlineObject47?: InlineObject47, options?: Configuration): Observable<void | InlineResponse200123>;
    /**
     * Get a list of the stickers added to a card. The stickers are listed in the order in which they were added.
     * Get a list of card stickers
     * @param card_id A card id.
     */
    getCardStickers(card_id: number, options?: Configuration): Observable<InlineResponse200122>;
    /**
     * Remove a sticker from a card.
     * Remove a sticker from a card
     * @param card_id A card id.
     * @param id A relationship id.
     */
    removeCardSticker(card_id: number, id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardSubtaskAttachmentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add a card subtask's attachment.
     * Add a card subtask's attachment
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardAttachmentCreateRequest
     */
    addCarSubtaskAttachment(card_id: number, subtask_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Delete an attachment for a card subtask.
     * Delete an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an attachment for a card subtask.
     * Get the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Observable<void | InlineResponse20062>;
    /**
     * Get a card subtask's attachments.
     * Get a card subtask's attachments
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtaskAttachments(card_id: number, subtask_id: number, options?: Configuration): Observable<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card subtask.
     * Update the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Observable<InlineResponse20062>;
}
export declare class ObservableCardSubtasksApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardSubtasksApiRequestFactory, responseProcessor?: CardSubtasksApiResponseProcessor);
    /**
     * Add a subtask to a card.
     * Add a subtask to a card
     * @param card_id A card id.
     * @param SubtaskCreateRequest
     */
    addCardSubtask(card_id: number, SubtaskCreateRequest?: SubtaskCreateRequest, options?: Configuration): Observable<InlineResponse200125>;
    /**
     * Delete a subtask for a card.
     * Delete a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a subtask for a card.
     * Get the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Observable<InlineResponse200125>;
    /**
     * Get a card's subtasks.
     * Get a card's subtasks
     * @param card_id A card id.
     */
    getCardSubtasks(card_id: number, options?: Configuration): Observable<InlineResponse200124>;
    /**
     * Update the details of a subtask for a card.
     * Update the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param SubtaskUpdateRequest
     */
    updateCardSubtask(card_id: number, subtask_id: number, SubtaskUpdateRequest?: SubtaskUpdateRequest, options?: Configuration): Observable<void | InlineResponse200125>;
}
export declare class ObservableCardTagsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTagsApiRequestFactory, responseProcessor?: CardTagsApiResponseProcessor);
    /**
     * Add a tag to a card.
     * Add a tag to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTag(card_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a tag is added to a card.
     * Check if a tag is added to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTag(card_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the tags added to a card. The tags are listed in the order in which they were added.
     * Get a list of card tags
     * @param card_id A card id.
     */
    getCardTags(card_id: number, options?: Configuration): Observable<InlineResponse200127>;
    /**
     * Remove a tag from a card.
     * Remove a tag from a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTag(card_id: number, tag_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardAttachmentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a card for the card template.
     * Add an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCardAttachment(template_id: number, card_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Delete an attachment of a card for the card template.
     * Delete an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an attachment of a card for the card template.
     * Get the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Get a list of attachments of a card for the card template.
     * Get a list of attachments of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardAttachments(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20061>;
    /**
     * Update the details of an attachment of a card for the card template.
     * Update the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Observable<InlineResponse20062>;
}
export declare class ObservableCardTemplateCardChildCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardChildCardsApiRequestFactory, responseProcessor?: CardTemplateCardChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card for the card template.
     * Make a card a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject26
     */
    addCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, InlineObject26?: InlineObject26, options?: Configuration): Observable<InlineResponse20065>;
    /**
     * Check if a card is a child of a given card for the card template and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of child cards of a card for the card template.
     * Get a list of child cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardChildCards(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20063>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    removeCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardCoOwnersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCoOwnersApiRequestFactory, responseProcessor?: CardTemplateCardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card for the card template.
     * Add a user as a co-owner for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a co-owner is one for the card for the card template.
     * Check if a co-owner is one for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of co-owners of a card for the card template.
     * Get a list of co-owners of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardCoOwners(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20066>;
    /**
     * Remove a user as a co-owner for the card for the card template.
     * Remove a user as a co-owner for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardCustomFieldContributorsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card for the card template.
     * Add a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a user is a contributor for a custom field for a card for the card template.
     * Check if a user is a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the default contributors for a custom field for a card for the card template.
     * Get a list of the default contributors for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldContributors(template_id: number, card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card  for the card template.
     * Remove a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardCustomFieldFilesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldFilesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card for the card template.
     * Add a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldFileCreateRequest
     */
    addCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldFileCreateRequest?: CardTemplateCustomFieldFileCreateRequest, options?: Configuration): Observable<InlineResponse20068>;
    /**
     * Delete a file for a custom field for a card for the card template.
     * Delete a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single file for a custom field for a card for the card template.
     * Get the details of a single file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Observable<InlineResponse20068>;
    /**
     * Get a list of the files for a custom field for a card for the card template.
     * Get a list of the files for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldFiles(template_id: number, card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20067>;
    /**
     * Update a file for a custom field for a card for the card template.
     * Update a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param CardTemplateCustomFieldFileUpdateRequest
     */
    updateCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, CardTemplateCustomFieldFileUpdateRequest?: CardTemplateCustomFieldFileUpdateRequest, options?: Configuration): Observable<InlineResponse20068>;
}
export declare class ObservableCardTemplateCardCustomFieldSelectedValuesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldSelectedValueAddOrUpdateRequest
     */
    addCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldSelectedValueAddOrUpdateRequest?: CardTemplateCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Observable<InlineResponse20070>;
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add or update a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject27
     */
    addOrUpdateCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, InlineObject27?: InlineObject27, options?: Configuration): Observable<InlineResponse20071>;
    /**
     * Get the details of a selected value for a custom field for a card for the card template.
     * Get the details of a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardTemplateCardCustomFieldSelectedValue(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Observable<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template.
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, options?: Configuration): Observable<InlineResponse20069>;
    /**
     * Remove a selected value for a custom field for a card for the card template.
     * Remove a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardCustomFieldsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card for the card template.
     * Add a custom field to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldAddOrUpdateRequest
     */
    addCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldAddOrUpdateRequest?: CardTemplateCustomFieldAddOrUpdateRequest, options?: Configuration): Observable<void>;
    /**
     * Remove a custom field from a card for the card template.
     * Remove a custom field from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardParentCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardParentCardsApiRequestFactory, responseProcessor?: CardTemplateCardParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card for the card template.
     * Make a card a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject28
     */
    addCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, InlineObject28?: InlineObject28, options?: Configuration): Observable<InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card for the card template and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of parent cards of a card for the card template.
     * Get a list of parent cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardParentCards(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20072>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    removeCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardPredecessorCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardPredecessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardPredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card for the card template.
     * Make a card a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject29
     */
    addCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, InlineObject29?: InlineObject29, options?: Configuration): Observable<InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card for the card template and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of predecessor cards of a card for the card template.
     * Get a list of predecessor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardPredecessorCards(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20074>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removeCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardRelativeCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardRelativeCardsApiRequestFactory, responseProcessor?: CardTemplateCardRelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card for the card template.
     * Make a card a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject30
     */
    addCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, InlineObject30?: InlineObject30, options?: Configuration): Observable<InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card for the card template and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of relative cards of a card for the card template.
     * Get a list of relative cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardRelativeCards(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20076>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardStickersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardStickersApiRequestFactory, responseProcessor?: CardTemplateCardStickersApiResponseProcessor);
    /**
     * Add a sticker of a card for the card template.
     * Add a sticker of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param InlineObject31
     */
    addCardTemplateCardSticker(template_id: number, card_id: number, InlineObject31?: InlineObject31, options?: Configuration): Observable<InlineResponse20079>;
    /**
     * Get a list of stickers of a card for the card template. The stickers are listed in the order in which they were added.
     * Get a list of stickers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardStickers(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20078>;
    /**
     * Remove a sticker from a card for the card template.
     * Remove a sticker from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param sticker_id A sticker id.
     */
    removeCardTemplateCardSticker(template_id: number, card_id: number, sticker_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardSubtaskAttachmentsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a subtask of a card for the card template.
     * Add an attachment of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCarSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Delete an attachment of a subtask for a card for the card template.
     * Delete an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of an attachment of a subtask for a card for the card template.
     * Get the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Observable<InlineResponse20062>;
    /**
     * Get a list of attachments of a subtask of a card for the card template.
     * Get a list of attachments of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtaskAttachments(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Observable<InlineResponse20061>;
    /**
     * Update the details of an attachment of a subtask for a card for the card template.
     * Update the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Observable<InlineResponse20062>;
}
export declare class ObservableCardTemplateCardSubtasksApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtasksApiRequestFactory, responseProcessor?: CardTemplateCardSubtasksApiResponseProcessor);
    /**
     * Add a subtask of a card for the card template.
     * Add a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateSubtaskCreateRequest
     */
    addCardTemplateCardSubtask(template_id: number, card_id: number, CardTemplateSubtaskCreateRequest?: CardTemplateSubtaskCreateRequest, options?: Configuration): Observable<InlineResponse20081>;
    /**
     * Delete a subtask for a card for the card template.
     * Delete a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a subtask of a card for the card template.
     * Get the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Observable<InlineResponse20081>;
    /**
     * Get a list of subtasks of a card for the card template.
     * Get a list of subtasks of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSubtasks(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20080>;
    /**
     * Update the details of a subtask of a card for the card template.
     * Update the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateSubtaskUpdateRequest
     */
    updateCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, CardTemplateSubtaskUpdateRequest?: CardTemplateSubtaskUpdateRequest, options?: Configuration): Observable<InlineResponse20081>;
}
export declare class ObservableCardTemplateCardSuccessorCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSuccessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardSuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card for the card template.
     * Make a card a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject32
     */
    addCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, InlineObject32?: InlineObject32, options?: Configuration): Observable<InlineResponse20083>;
    /**
     * Check if a card is a successor of a given card for the card template and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of successor cards of a card for the card template.
     * Get a list of successor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSuccessorCards(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20082>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardTagsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardTagsApiRequestFactory, responseProcessor?: CardTemplateCardTagsApiResponseProcessor);
    /**
     * Add a tag to a card for the card template.
     * Add a tag to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a tag is added to a card for the card template.
     * Check if a tag is added to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of tags of a card for the card template. The tags are listed in the order in which they were added.
     * Get a list of tags of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardTags(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20084>;
    /**
     * Remove a tag from a card for the card template.
     * Remove a tag from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardWatchersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardWatchersApiRequestFactory, responseProcessor?: CardTemplateCardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for a card for the card for the card template.
     * Make a user a watcher for a card for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check the user with a user id is a watcher for the card for the card template
     * Check the user with a user id is a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of watchers of a card for the card template.
     * Get a list of watchers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardWatchers(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20085>;
    /**
     * Make a user not a watcher for the card for the card template.
     * Make a user not a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardTemplateCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardsApiRequestFactory, responseProcessor?: CardTemplateCardsApiResponseProcessor);
    /**
     * Add a card to the card template.
     * Add a card to the card template
     * @param template_id A template id.
     * @param CardTemplateCardInExistingTemplateCreateRequest
     */
    addCardTemplateCard(template_id: number, CardTemplateCardInExistingTemplateCreateRequest?: CardTemplateCardInExistingTemplateCreateRequest, options?: Configuration): Observable<InlineResponse20060>;
    /**
     * Delete a card for the card template
     * Delete a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    deleteCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single card for the card template.
     * Get the details of a single card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Observable<InlineResponse20060>;
    /**
     * Get a list of cards for the card template.
     * Get a list of cards for the card template
     * @param template_id A template id.
     */
    getCardTemplateCards(template_id: number, options?: Configuration): Observable<InlineResponse20059>;
    /**
     * Update a card of the card template.
     * Update a card of the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateCardUpdateRequest
     */
    updateCardTemplateCard(template_id: number, card_id: number, CardTemplateCardUpdateRequest?: CardTemplateCardUpdateRequest, options?: Configuration): Observable<InlineResponse20060>;
}
export declare class ObservableCardTemplateHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplateHistoryApiRequestFactory, responseProcessor?: CardTemplateHistoryApiResponseProcessor);
    /**
     * Get a list of card templates creation, deletion, update events matching some optional criteria.
     * Get a list of card templates creation, deletion, update events
     * @param template_ids A list of the template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card template.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistory(template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse20058>;
}
export declare class ObservableCardTemplatesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTemplatesApiRequestFactory, responseProcessor?: CardTemplatesApiResponseProcessor);
    /**
     * Create a new card template.
     * Create a new card template
     * @param CardTemplateCreateRequest
     */
    createCardTemplate(CardTemplateCreateRequest?: CardTemplateCreateRequest, options?: Configuration): Observable<InlineResponse20057>;
    /**
     * Delete a card template.
     * Delete a card template
     * @param template_id A template id.
     */
    deleteCardTemplate(template_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single card template.
     * Get the details of a single card template
     * @param template_id A template id.
     */
    getCardTemplate(template_id: number, options?: Configuration): Observable<InlineResponse20057>;
    /**
     * Get a list of card templates matching some optional criteria.
     * Get a list of card templates
     * @param template_ids A list of the card template ids that you want to get.
     * @param name Find a card template by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card templates. When set to 0 you will only get disabled card templates.
     * @param fields A list of fields that you want in the response. The allowed fields are: template_id, name, description, primary_template_card_id, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count and template_cards.
     */
    getCardTemplates(template_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'template_id' | 'name' | 'description' | 'primary_template_card_id' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'template_cards'>, options?: Configuration): Observable<InlineResponse20056>;
    /**
     * Update a card template.
     * Update a card template
     * @param template_id A template id.
     * @param CardTemplateUpdateRequest
     */
    updateCardTemplate(template_id: number, CardTemplateUpdateRequest?: CardTemplateUpdateRequest, options?: Configuration): Observable<InlineResponse20057>;
}
export declare class ObservableCardTypeBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTypeBoardsApiRequestFactory, responseProcessor?: CardTypeBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the card type is available.
     * Get a list of boards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeBoards(type_id: number, options?: Configuration): Observable<InlineResponse20011>;
}
export declare class ObservableCardTypeCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTypeCardsApiRequestFactory, responseProcessor?: CardTypeCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the card type is available.
     * Get a list of cards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeCards(type_id: number, options?: Configuration): Observable<InlineResponse20012>;
}
export declare class ObservableCardTypeHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTypeHistoryApiRequestFactory, responseProcessor?: CardTypeHistoryApiResponseProcessor);
    /**
     * Get a list of card types creation, deletion, update events matching some optional criteria.
     * Get a list of card types creation, deletion, update events
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistory(type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse20088>;
}
export declare class ObservableCardTypesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardTypesApiRequestFactory, responseProcessor?: CardTypesApiResponseProcessor);
    /**
     * Create a new card type.
     * Create a card type
     * @param InlineObject33
     */
    createCardType(InlineObject33?: InlineObject33, options?: Configuration): Observable<InlineResponse20087>;
    /**
     * Delete a card type.
     * Delete a card type
     * @param type_id A type id.
     * @param replace_with_type_id The id of a card type with which to replace the one to be deleted on the cards using it.
     */
    deleteCardType(type_id: number, replace_with_type_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single card type.
     * Get the details of a single card type
     * @param type_id A type id.
     */
    getCardType(type_id: number, options?: Configuration): Observable<InlineResponse20087>;
    /**
     * Get a list of card types matching some optional criteria.
     * Get a list of card types
     * @param type_ids A list of the card type ids that you want to get.
     * @param name Find a card type by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card types. When set to 0 you will only get disabled card types.
     * @param fields A list of fields that you want in the response. The allowed fields are: type_id, icon_type, icon_id, name, description, color, card_color_sync, all_properties_are_locked, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards, board_count, card_ids, card_count and business_rules.
     */
    getCardTypes(type_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'type_id' | 'icon_type' | 'icon_id' | 'name' | 'description' | 'color' | 'card_color_sync' | 'all_properties_are_locked' | 'availability' | 'is_enabled'>, expand?: Array<'boards' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Observable<InlineResponse20086>;
    /**
     * Update a card type.
     * Update a card type
     * @param type_id A type id.
     * @param InlineObject34
     */
    updateCardType(type_id: number, InlineObject34?: InlineObject34, options?: Configuration): Observable<InlineResponse20087>;
}
export declare class ObservableCardWatchedApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardWatchedApiRequestFactory, responseProcessor?: CardWatchedApiResponseProcessor);
    /**
     * Make a current user a watcher for the card.
     * Make a current user a watcher for the card
     * @param card_id A card id.
     */
    addCurrentUserForCardWatcher(card_id: number, options?: Configuration): Observable<void>;
    /**
     * Check current user is a watcher for the card
     * Check current user is a watcher for the card
     * @param card_id A card id.
     */
    checkCurrentUserIsCardWatcher(card_id: number, options?: Configuration): Observable<void>;
    /**
     * Make a current user not a watcher for the card.
     * Make a current user not a watcher for the card
     * @param card_id A card id.
     */
    removeCurrentUserCardWatcher(card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardWatchersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardWatchersApiRequestFactory, responseProcessor?: CardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for the card.
     * Make a user a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardWatcher(card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check the user with a user id is a watcher for the card
     * Check the user with a user id is a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardWatcher(card_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a card's watchers.
     * Get a card's watchers
     * @param card_id A card id.
     */
    getCardWatchers(card_id: number, options?: Configuration): Observable<InlineResponse200128>;
    /**
     * Make a user not a watcher for the card.
     * Make a user not a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardWatcher(card_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardsApiRequestFactory, responseProcessor?: CardsApiResponseProcessor);
    /**
     * Delete a card.
     * Delete a card
     * @param card_id A card id.
     * @param exceeding_reason Exceeding reason.
     */
    deleteCard(card_id: number, exceeding_reason?: string, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single card.
     * Get the details of a single card
     * @param card_id A card id.
     */
    getCard(card_id: number, options?: Configuration): Observable<InlineResponse20091>;
    /**
     * Get a list of cards matching some optional criteria.
     * Get a list of cards
     * @param card_ids A list of the card ids that you want to get.
     * @param board_ids A list of the board ids for which you want to get the results.
     * @param workflow_ids A list of the workflows ids for which you want to get the results.
     * @param state The state value of cards that you want to get. By default it&#39;s the active state.
     * @param created_from The first date and time of created cards for which you want results.
     * @param created_from_date The first date of created cards for which you want results.
     * @param created_to The last date and time of created cards for which you want results.
     * @param created_to_date The last date of created cards for which you want results.
     * @param last_modified_from The first date and time of last modified cards for which you want results.
     * @param last_modified_from_date The first date of last modified cards for which you want results.
     * @param last_modified_to The last date and time of last modified cards for which you want results.
     * @param last_modified_to_date The last date of last modified cards for which you want results.
     * @param in_current_position_since_from The first date and time of in current position since cards for which you want results.
     * @param in_current_position_since_from_date The first date of in current position since cards for which you want results.
     * @param in_current_position_since_to The last date and time of in current position since cards for which you want results.
     * @param in_current_position_since_to_date The last date of in current position since cards for which you want results.
     * @param is_blocked When set to 1 you will only get blocked cards. When set to 0 you will only get non blocked cards.
     * @param custom_ids A list of the custom ids for which you want to get the results.
     * @param owner_user_ids A list of the user ids of assignees for which you want to get the results.
     * @param type_ids A list of the type ids for which you want to get the results.
     * @param sizes A list of the sizes for which you want to get the results.
     * @param priorities A list of the priorities for which you want to get the results.
     * @param colors A list of the colors for which you want to get the results.
     * @param deadline_from The first date and time of deadline cards for which you want results.
     * @param deadline_from_date The first date of deadline cards for which you want results.
     * @param deadline_to The last date and time of deadline cards for which you want results.
     * @param deadline_to_date The last date of deadline cards for which you want results.
     * @param column_ids A list of the column ids for which you want to get the results.
     * @param lane_ids A list of the lane ids for which you want to get the results.
     * @param sections A list of the sections for which you want to get the results.
     * @param last_column_ids A list of the last column ids for which you want to get the results.
     * @param last_lane_ids A list of the last lane ids for which you want to get the results.
     * @param version_ids A list of the version ids for which you want to get the results.
     * @param archived_from The first date and time of archived cards for which you want results.
     * @param archived_from_date The first date of archived cards for which you want results.
     * @param archived_to The last date and time of archived cards for which you want results.
     * @param archived_to_date The last date of archived cards for which you want results.
     * @param reason_ids A list of the reasons ids for which you want to get the results.
     * @param discarded_from The first date and time of discarded cards for which you want results.
     * @param discarded_from_date The first date of discarded cards for which you want results.
     * @param discarded_to The last date and time of discarded cards for which you want results.
     * @param discarded_to_date The last date of discarded cards for which you want results.
     * @param include_logged_time_for_subtasks Controls whether this include logged times for subtasks.
     * @param include_logged_time_for_child_cards Controls whether this include logged times for child cards.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     * @param fields A list of fields that you want in the response. The allowed fields are: card_id, title, description, custom_id, owner_user_id, type_id, size, priority, color, deadline, reporter, created_at, revision, last_modified, in_current_position_since, board_id, workflow_id, column_id, lane_id, section, position, last_column_id, last_lane_id, version_id, archived_at, reason_id, discard_comment, discarded_at, is_blocked, block_reason, current_block_time, current_logged_time, current_cycle_time, child_card_stats, finished_subtask_count, unfinished_subtask_count and comment_count.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.
     */
    getCards(card_ids?: Array<number>, board_ids?: Array<number>, workflow_ids?: Array<number>, state?: 'active' | 'archived' | 'discarded', created_from?: Date, created_from_date?: Date, created_to?: Date, created_to_date?: Date, last_modified_from?: Date, last_modified_from_date?: Date, last_modified_to?: Date, last_modified_to_date?: Date, in_current_position_since_from?: Date, in_current_position_since_from_date?: Date, in_current_position_since_to?: Date, in_current_position_since_to_date?: Date, is_blocked?: 0 | 1, custom_ids?: Array<string>, owner_user_ids?: Array<number>, type_ids?: Array<number>, sizes?: Array<number>, priorities?: Array<number>, colors?: Array<string>, deadline_from?: Date, deadline_from_date?: Date, deadline_to?: Date, deadline_to_date?: Date, column_ids?: Array<number>, lane_ids?: Array<number>, sections?: Array<number>, last_column_ids?: Array<number>, last_lane_ids?: Array<number>, version_ids?: Array<number>, archived_from?: Date, archived_from_date?: Date, archived_to?: Date, archived_to_date?: Date, reason_ids?: Array<number>, discarded_from?: Date, discarded_from_date?: Date, discarded_to?: Date, discarded_to_date?: Date, include_logged_time_for_subtasks?: 0 | 1, include_logged_time_for_child_cards?: 0 | 1, page?: number, per_page?: number, fields?: Array<'card_id' | 'title' | 'description' | 'custom_id' | 'owner_user_id' | 'type_id' | 'size' | 'priority' | 'color' | 'deadline' | 'reporter' | 'created_at' | 'revision' | 'last_modified' | 'in_current_position_since' | 'board_id' | 'workflow_id' | 'column_id' | 'lane_id' | 'section' | 'position' | 'last_column_id' | 'last_lane_id' | 'version_id' | 'archived_at' | 'reason_id' | 'discard_comment' | 'discarded_at' | 'is_blocked' | 'block_reason' | 'current_block_time' | 'current_logged_time' | 'current_cycle_time' | 'child_card_stats' | 'finished_subtask_count' | 'unfinished_subtask_count' | 'comment_count'>, expand?: Array<'custom_fields' | 'stickers' | 'tag_ids' | 'co_owner_ids' | 'watcher_ids' | 'attachments' | 'checked_column_checklist_items' | 'initiative_details' | 'annotations' | 'subtasks' | 'linked_cards' | 'transitions' | 'block_times' | 'logged_times' | 'logged_times_for_child_cards' | 'lead_time_per_column' | 'outcomes' | 'outcome_current_values'>, options?: Configuration): Observable<InlineResponse20089>;
}
export declare class ObservableCardsCreateManyApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardsCreateManyApiRequestFactory, responseProcessor?: CardsCreateManyApiResponseProcessor);
    /**
     * Create many cards.
     * Create many cards
     * @param InlineObject35
     */
    createManyCards(InlineObject35?: InlineObject35, options?: Configuration): Observable<InlineResponse20090>;
}
export declare class ObservableCardsDeleteManyApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardsDeleteManyApiRequestFactory, responseProcessor?: CardsDeleteManyApiResponseProcessor);
    /**
     * Delete many cards.
     * Delete many cards
     * @param InlineObject36
     */
    deleteManyCards(InlineObject36?: InlineObject36, options?: Configuration): Observable<void>;
}
export declare class ObservableCardsUpdateManyApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CardsUpdateManyApiRequestFactory, responseProcessor?: CardsUpdateManyApiResponseProcessor);
    /**
     * Update many cards.
     * Update many cards
     * @param InlineObject37
     */
    updateManyCards(InlineObject37?: InlineObject37, options?: Configuration): Observable<InlineResponse20090>;
}
export declare class ObservableCellLimitsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CellLimitsApiRequestFactory, responseProcessor?: CellLimitsApiResponseProcessor);
    /**
     * Get a list of the cell limits for a specified board.
     * Get a list of cell limits
     * @param board_id A board id.
     */
    getCellLimits(board_id: number, options?: Configuration): Observable<InlineResponse20020>;
    /**
     * Set a cell limit.
     * Set a cell limit
     * @param board_id A board id.
     * @param InlineObject7
     */
    setCellLimit(board_id: number, InlineObject7?: InlineObject7, options?: Configuration): Observable<InlineResponse20021>;
}
export declare class ObservableCheckSPFRecordApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CheckSPFRecordApiRequestFactory, responseProcessor?: CheckSPFRecordApiResponseProcessor);
    /**
     * Check if a domain has a valid SPF record including mail.kanbanize.com.
     * Check if the SPF record of a domain includes mail.kanbanize.com
     * @param InlineObject49
     */
    checkSPFRecord(InlineObject49?: InlineObject49, options?: Configuration): Observable<InlineResponse200129>;
}
export declare class ObservableChildCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ChildCardsApiRequestFactory, responseProcessor?: ChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card.
     * Make a card a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject39
     */
    addChildCard(card_id: number, child_card_id: number, InlineObject39?: InlineObject39, options?: Configuration): Observable<void | InlineResponse20065>;
    /**
     * Check if a card is a child of a given card and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkChildCard(card_id: number, child_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get the full list of child cards of a given card and the child cards of those cards too.
     * Get a list of child cards including their child cards too
     * @param card_id A card id.
     */
    getChildCardGraph(card_id: number, options?: Configuration): Observable<InlineResponse20093>;
    /**
     * Get a list of the child cards of a given card.
     * Get a list of child cards
     * @param card_id A card id.
     */
    getChildCards(card_id: number, options?: Configuration): Observable<InlineResponse20094>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeChildCard(card_id: number, child_card_id: number, exceeding_reason?: string, options?: Configuration): Observable<void>;
}
export declare class ObservableColumnsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ColumnsApiRequestFactory, responseProcessor?: ColumnsApiResponseProcessor);
    /**
     * Create a new column.
     * Create a column
     * @param board_id A board id.
     * @param InlineObject8
     */
    createColumn(board_id: number, InlineObject8?: InlineObject8, options?: Configuration): Observable<InlineResponse20023>;
    /**
     * Delete a column.
     * Delete a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param move_cards_to_column_id The id of a column to which to move the cards from the deleted column, if there are any.
     * @param move_metrics_to_column_id The id of a column to which to move the cycle time data associated with the deleted column, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteColumn(board_id: number, column_id: number, move_cards_to_column_id?: number, move_metrics_to_column_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single column.
     * Get the details of a single column
     * @param board_id A board id.
     * @param column_id A column id.
     */
    getColumn(board_id: number, column_id: number, options?: Configuration): Observable<InlineResponse20024>;
    /**
     * Get a list of the columns in a specified board.
     * Get a list of columns
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: column_id, workflow, section, parent_column_id, position, name, description, color, limit, cards_per_row and flow_type.
     */
    getColumns(board_id: number, fields?: Array<'column_id' | 'workflow_id' | 'section' | 'parent_column_id' | 'position' | 'name' | 'description' | 'color' | 'limit' | 'cards_per_row' | 'flow_type'>, options?: Configuration): Observable<InlineResponse20022>;
    /**
     * Update a column.
     * Update a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param InlineObject9
     */
    updateColumn(board_id: number, column_id: number, InlineObject9?: InlineObject9, options?: Configuration): Observable<InlineResponse20024>;
}
export declare class ObservableCompanyAddonTrialsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonTrialsApiRequestFactory, responseProcessor?: CompanyAddonTrialsApiResponseProcessor);
    /**
     * Get a possible addon trial status
     * Get a possible addon trial status
     * @param feature_id A feature id.
     */
    getAddonTrial(feature_id: number, options?: Configuration): Observable<InlineResponse2002>;
    /**
     * Get a list of all possible addon trial statuses
     * Get a list of all possible addon trial statuses
     */
    getAddonsTrials(options?: Configuration): Observable<InlineResponse2001>;
    /**
     * Start an addon trial
     * Start an addon trial
     * @param feature_id A feature id.
     */
    putAddonTrial(feature_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCompanyAddonsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonsApiRequestFactory, responseProcessor?: CompanyAddonsApiResponseProcessor);
    /**
     * Get a list of all possible addon
     * Get a list of all possible addons
     */
    getAddons(options?: Configuration): Observable<InlineResponse200>;
}
export declare class ObservableCompanyPlanTrialsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanyPlanTrialsApiRequestFactory, responseProcessor?: CompanyPlanTrialsApiResponseProcessor);
    /**
     * Get a possible plan trial status
     * Get a possible plan trial status
     * @param plan_id A plan id.
     */
    getPlanTrial(plan_id: number, options?: Configuration): Observable<InlineResponse200162>;
    /**
     * Get a list of all possible plan trial statuses
     * Get a list of all possible plan trial statuses
     */
    getPlansTrials(options?: Configuration): Observable<InlineResponse200161>;
    /**
     * Start a plan trial
     * Start a plan trial
     * @param plan_id A plan id.
     */
    putPlanTrial(plan_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableCompanyPlansApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanyPlansApiRequestFactory, responseProcessor?: CompanyPlansApiResponseProcessor);
    /**
     * Get a list of all possible plan statuses
     * Get a list of all possible plan statuses
     */
    getPlans(options?: Configuration): Observable<InlineResponse200160>;
}
export declare class ObservableCompanySettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanySettingsApiRequestFactory, responseProcessor?: CompanySettingsApiResponseProcessor);
    /**
     * Get the details of a company setting and its value.
     * Get the details of a company setting and its value
     * @param setting_name A setting name.
     */
    getCompanySetting(setting_name: string, options?: Configuration): Observable<InlineResponse20040>;
    /**
     * Get a list of all company settings and their values.
     * Get a list of all company settings and their values
     */
    getCompanySettings(options?: Configuration): Observable<InlineResponse20039>;
    /**
     * Remove the value of a company setting.
     * Remove the value of a company setting
     * @param setting_name A setting name.
     */
    removeCompanySetting(setting_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableCustomFieldAllowedValuesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CustomFieldAllowedValuesApiRequestFactory, responseProcessor?: CustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Create a new allowed value.
     * Create an allowed value
     * @param field_id A custom field id.
     * @param InlineObject50
     */
    createCustomFieldAllowedValue(field_id: number, InlineObject50?: InlineObject50, options?: Configuration): Observable<InlineResponse200132>;
    /**
     * Delete an allowed value.
     * Delete an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param replace_with_value_id The id of a value with which to replace the one to be deleted on the cards using it.
     */
    deleteCustomFieldAllowedValue(field_id: number, value_id: number, replace_with_value_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single allowed value.
     * Get the details of a single allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCustomFieldAllowedValue(field_id: number, value_id: number, options?: Configuration): Observable<InlineResponse200132>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown.
     * Get a list of the allowed values of a custom field of type dropdown
     * @param field_id A custom field id.
     */
    getCustomFieldAllowedValues(field_id: number, options?: Configuration): Observable<InlineResponse200131>;
    /**
     * Update an allowed value.
     * Update an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject51
     */
    updateCustomFieldAllowedValue(field_id: number, value_id: number, InlineObject51?: InlineObject51, options?: Configuration): Observable<InlineResponse200132>;
}
export declare class ObservableCustomFieldHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CustomFieldHistoryApiRequestFactory, responseProcessor?: CustomFieldHistoryApiResponseProcessor);
    /**
     * Get a list of custom field management history events.
     * Get a list of custom field management history events.
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistory(field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200130>;
}
export declare class ObservableCustomFieldsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CustomFieldsApiRequestFactory, responseProcessor?: CustomFieldsApiResponseProcessor);
    /**
     * Delete a custom field.
     * Delete a custom field
     * @param field_id A custom field id.
     */
    deleteCustomField(field_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableDashboardPageTeamsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DashboardPageTeamsApiRequestFactory, responseProcessor?: DashboardPageTeamsApiResponseProcessor);
    /**
     * Check if a team is added to a dashboard page.
     * Check if a team is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    checkDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the teams having access to a dashboard page.
     * Get a list of teams having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageTeams(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200135>;
    /**
     * Deny a team access to a dashboard page.
     * Deny a team access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    removeDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableDashboardPageUsersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DashboardPageUsersApiRequestFactory, responseProcessor?: DashboardPageUsersApiResponseProcessor);
    /**
     * Check if a user is added to a dashboard page.
     * Check if a user is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    checkDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Observable<InlineResponse200137>;
    /**
     * Get a list of the users having access to a dashboard page.
     * Get a list of users having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageUsers(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200136>;
    /**
     * Deny a user access to a dashboard page.
     * Deny a user access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    removeDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableDashboardPageWorkspacesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DashboardPageWorkspacesApiRequestFactory, responseProcessor?: DashboardPageWorkspacesApiResponseProcessor);
    /**
     * Make a workspace available on a dashboard page.
     * Make a workspace available on a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    addDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a workspaces is added to a dashboard page.
     * Check if a workspace is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the workspaces added to a dashboard page.
     * Get a list of workspaces added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200138>;
    /**
     * Remove a workspace from a dashboard page.
     * Remove a workspace from a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    removeDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableDashboardPagesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DashboardPagesApiRequestFactory, responseProcessor?: DashboardPagesApiResponseProcessor);
    /**
     * Create a new dashboard page.
     * Create a dashboard page
     * @param InlineObject52
     */
    createDashBoardPage(InlineObject52?: InlineObject52, options?: Configuration): Observable<InlineResponse200134>;
    /**
     * Delete a dashboard page.
     * Delete a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    deleteDashboardPage(dashboard_page_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single dashboard page.
     * Get the details of a single dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPage(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200134>;
    /**
     * Get a list of dashboard pages matching some optional criteria.
     * Get a list of dashboard pages
     * @param dashboard_page_ids A list of the dashboard page ids that you want to get.
     * @param fields A list of fields that you want in the response. The allowed fields are: dashboard_page_id and name.
     */
    getDashboardPages(dashboard_page_ids?: Array<number>, fields?: Array<'dashboard_page_id' | 'name'>, options?: Configuration): Observable<InlineResponse200133>;
    /**
     * Update a dashboard page.
     * Update a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject53
     */
    updateDashboardPage(dashboard_page_id: number, InlineObject53?: InlineObject53, options?: Configuration): Observable<InlineResponse200134>;
}
export declare class ObservableDiscardReasonBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonBoardsApiRequestFactory, responseProcessor?: DiscardReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the discard reason is available.
     * Get a list of boards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonBoards(reason_id: number, options?: Configuration): Observable<InlineResponse20011>;
}
export declare class ObservableDiscardReasonCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonCardsApiRequestFactory, responseProcessor?: DiscardReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the discard reason is available.
     * Get a list of cards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonCards(reason_id: number, options?: Configuration): Observable<InlineResponse20012>;
}
export declare class ObservableDiscardReasonHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonHistoryApiRequestFactory, responseProcessor?: DiscardReasonHistoryApiResponseProcessor);
    /**
     * Get a list of discard reasons creation, deletion, update events matching some optional criteria.
     * Get a list of discard reasons creation, deletion, update events
     * @param reason_ids A list of the discard reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the discard reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200141>;
}
export declare class ObservableDiscardReasonsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonsApiRequestFactory, responseProcessor?: DiscardReasonsApiResponseProcessor);
    /**
     * Create a new discard reason.
     * Create a discard reason
     * @param InlineObject54
     */
    createDiscardReason(InlineObject54?: InlineObject54, options?: Configuration): Observable<InlineResponse200140>;
    /**
     * Delete a discard reason.
     * Delete a discard reason
     * @param reason_id A discard reason id.
     * @param replace_with_reason_id The id of a discard reason with which to discard the cards which are currently discarded with the discard reason which is about to be deleted.
     */
    deleteDiscardReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single discard reason.
     * Get the details of a single discard reason
     * @param reason_id A discard reason id.
     */
    getDiscardReason(reason_id: number, options?: Configuration): Observable<InlineResponse200140>;
    /**
     * Get a list of discard reasons matching some optional criteria.
     * Get a list of discard reasons
     * @param reason_ids A list of the discard reason ids that you want to get.
     * @param label Find a discard reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled discard reasons. When set to 0 you will only get disabled discard reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, label, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids and card_count.
     */
    getDiscardReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'label' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count'>, options?: Configuration): Observable<InlineResponse200139>;
    /**
     * Update a discard reason.
     * Update a discard reason
     * @param reason_id A discard reason id.
     * @param InlineObject55
     */
    updateDiscardReason(reason_id: number, InlineObject55?: InlineObject55, options?: Configuration): Observable<InlineResponse200140>;
}
export declare class ObservableEmailIntegrationErrorsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationErrorsApiRequestFactory, responseProcessor?: EmailIntegrationErrorsApiResponseProcessor);
    /**
     * Get a list of errors which occurred while emails were being processed
     * Get a list of errors from the email integration.
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrors(sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200142>;
}
export declare class ObservableEmailIntegrationHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationHistoryApiRequestFactory, responseProcessor?: EmailIntegrationHistoryApiResponseProcessor);
    /**
     * Get a list of the emails received by the email integration and their status.
     * Get a list of the emails received by the email integration and their status.
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistory(sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200143>;
}
export declare class ObservableExportsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ExportsApiRequestFactory, responseProcessor?: ExportsApiResponseProcessor);
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v2 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistoryExports(format?: string, user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of block reasons management history events.
     * Export a list of block reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of business rule executions matching some optional criteria.
     * Export a list of business rule executions
     * @param format The allowed values are excel and json
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistoryExport(format?: string, business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of card templates management history events.
     * Export a list of card templates management history events.
     * @param format The allowed values are excel and json
     * @param template_ids A list of the card template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistoryExports(format?: string, template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board' | 'template_structure_updated'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of card types management history events.
     * Export a list of card types management history events.
     * @param format The allowed values are excel and json
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistoryExports(format?: string, type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of custom field management history events.
     * Export a list of custom field management history events.
     * @param format The allowed values are excel and json
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistoryExports(format?: string, field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of discard reasons management history events.
     * Export a list of discard reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of error logs from the email integration.
     * Export a list of error logs from the email integration.
     * @param format The allowed values are excel and json
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrorsExport(format?: string, sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of the emails received by the email integration and their status.
     * Export a list of the emails received by the email integration and their status.
     * @param format The allowed values are excel and json
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistoryExport(format?: string, sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of logged times management history events.
     * Export a list of logged times management history events.
     * @param format The allowed values are excel and json
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimesHistoryExports(format?: string, logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v1 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistoryExport(format?: string, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of stickers management history events.
     * Export a list of stickers management history events.
     * @param format The allowed values are excel and json
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistoryExports(format?: string, sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of tags management history events.
     * Export a list of tags management history events.
     * @param format The allowed values are excel and json
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistoryExports(format?: string, tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of teams management history events.
     * Export a list of teams management history events.
     * @param format The allowed values are excel and json
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistoryExports(format?: string, team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of user management history events.
     * Export a list of user management history events.
     * @param format The allowed values are excel and json
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistoryExport(format?: string, affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of users last activity.
     * Export a list of users last activity.
     * @param format The allowed values are excel and json
     * @param user_ids A list of user ids that performed an action.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     */
    getUsersLastActivityExport(format?: string, user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, options?: Configuration): Observable<JsonExport>;
    /**
     * Export a list of webhooks creation, deletion, update events matching some optional criteria.
     * Export a list of webhooks creation, deletion, update events
     * @param format The allowed values are excel and json
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistoryExport(format?: string, webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<JsonExport>;
}
export declare class ObservableGlobalUserPrivilegesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: GlobalUserPrivilegesApiRequestFactory, responseProcessor?: GlobalUserPrivilegesApiResponseProcessor);
    /**
     * Check if a user has a global privilege.
     * Check if a user has a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    getGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Observable<void>;
    /**
     * Get a list of all possible global privileges and whether the user has them.
     * Get a list of all possible global privileges and whether the user has them
     * @param user_id A user id.
     */
    getGlobalUserPrivileges(user_id: number, options?: Configuration): Observable<InlineResponse200183>;
    /**
     * Remove a global privilege from the user.
     * Remove a global privilege from the user
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    removeGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Observable<void>;
    /**
     * Give the user a global privilege.
     * Give the user a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    setGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableLaneSectionLimitsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LaneSectionLimitsApiRequestFactory, responseProcessor?: LaneSectionLimitsApiResponseProcessor);
    /**
     * Get a list of the lane section limits for a specified board.
     * Get a list of lane section limits
     * @param board_id A board id.
     */
    getLaneSectionLimits(board_id: number, options?: Configuration): Observable<InlineResponse20031>;
    /**
     * Set a lane section limit.
     * Set a lane section limit
     * @param board_id A board id.
     * @param InlineObject12
     */
    setLaneSectionLimit(board_id: number, InlineObject12?: InlineObject12, options?: Configuration): Observable<InlineResponse20032>;
}
export declare class ObservableLanesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LanesApiRequestFactory, responseProcessor?: LanesApiResponseProcessor);
    /**
     * Create a new lane.
     * Create a lane
     * @param board_id A board id.
     * @param InlineObject13
     */
    createLane(board_id: number, InlineObject13?: InlineObject13, options?: Configuration): Observable<InlineResponse20034>;
    /**
     * Delete a lane.
     * Delete a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param move_cards_to_lane_id The id of a lane to which to move the cards from the deleted lane, if there are any.
     * @param move_metrics_to_lane_id The id of a lane to which to move the cycle time data associated with the deleted lane, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteLane(board_id: number, lane_id: number, move_cards_to_lane_id?: number, move_metrics_to_lane_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single lane.
     * Get the details of a single lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     */
    getLane(board_id: number, lane_id: number, options?: Configuration): Observable<InlineResponse20035>;
    /**
     * Get a list of the lanes in a specified board.
     * Get a list of lanes
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: lane_id, workflow, parent_lane_id, position, name, description and color.
     */
    getLanes(board_id: number, fields?: Array<'lane_id' | 'workflow_id' | 'parent_lane_id' | 'position' | 'name' | 'description' | 'color'>, options?: Configuration): Observable<InlineResponse20033>;
    /**
     * Update a lane.
     * Update a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param InlineObject14
     */
    updateLane(board_id: number, lane_id: number, InlineObject14?: InlineObject14, options?: Configuration): Observable<InlineResponse20035>;
}
export declare class ObservableLinkedCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LinkedCardsApiRequestFactory, responseProcessor?: LinkedCardsApiResponseProcessor);
    /**
     * Get a list of the cards that are linked to a given card ordered by position.
     * Get a list of linked cards
     * @param card_id A card id.
     */
    getLinkedCards(card_id: number, options?: Configuration): Observable<InlineResponse200108>;
}
export declare class ObservableLoggedTimeApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeApiRequestFactory, responseProcessor?: LoggedTimeApiResponseProcessor);
    /**
     * Add a logged time to a card
     * Add a logged time to a card
     * @param InlineObject56
     */
    addCardLoggedTime(InlineObject56?: InlineObject56, options?: Configuration): Observable<InlineResponse200145>;
    /**
     * Get the details of a single logged time.
     * Get the details of a single logged time
     * @param logged_time_id A logged time id.
     */
    getLoggedTime(logged_time_id: number, options?: Configuration): Observable<InlineResponse200145>;
    /**
     * Get a list of the logged times added to card or cards. The logged times are listed in the order in which they were added.
     * Get a list of logged times
     * @param card_ids Filter logged time by cards ids or id.
     * @param user_ids Filter logged time by user ids or id.
     * @param include_logged_time_for_subtasks When set to 1 you will the get logged time for all tasks and subtasks.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param logged_from The first date and time for which you want results.
     * @param logged_to The last date and time for which you want results.
     * @param logged_from_date The first date for which you want results.
     * @param logged_to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     */
    getLoggedTimes(card_ids?: Array<number>, user_ids?: Array<number>, include_logged_time_for_subtasks?: number, from_date?: Date, to_date?: Date, logged_from?: Date, logged_to?: Date, logged_from_date?: Date, logged_to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200144>;
    /**
     * Remove a logged time from a card.
     * Remove a logged time from a card
     * @param logged_time_id A logged time id.
     */
    removeLoggedTime(logged_time_id: number, options?: Configuration): Observable<void>;
    /**
     * Update card logged time.
     * Update card logged time.
     * @param logged_time_id A logged time id.
     * @param InlineObject57
     */
    updateLoggedTime(logged_time_id: number, InlineObject57?: InlineObject57, options?: Configuration): Observable<void>;
}
export declare class ObservableLoggedTimeHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeHistoryApiRequestFactory, responseProcessor?: LoggedTimeHistoryApiResponseProcessor);
    /**
     * Get a list of logged times creation, deletion, update events matching some optional criteria.
     * Get a list of logged times creation, deletion, update events
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimeHistory(logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200146>;
}
export declare class ObservableManagedWorkspacesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ManagedWorkspacesApiRequestFactory, responseProcessor?: ManagedWorkspacesApiResponseProcessor);
    /**
     * Get a list of the workspaces in which the user is a workspace manager.
     * Get a list of managed workspaces
     * @param user_id A user id.
     */
    getManagedWorkspace(user_id: number, options?: Configuration): Observable<InlineResponse200186>;
}
export declare class ObservableMeApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MeApiRequestFactory, responseProcessor?: MeApiResponseProcessor);
    /**
     * Get the data about the active user.
     * Get the data about the active user
     */
    getActiveUserData(options?: Configuration): Observable<InlineResponse200147>;
}
export declare class ObservableMergedAreasApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MergedAreasApiRequestFactory, responseProcessor?: MergedAreasApiResponseProcessor);
    /**
     * Create a new merged area.
     * Create a merged area
     * @param board_id A board id.
     * @param InlineObject15
     */
    createMergedArea(board_id: number, InlineObject15?: InlineObject15, options?: Configuration): Observable<InlineResponse20037>;
    /**
     * Split the merged area into its individual cells.
     * Delete a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    deleteMergedArea(board_id: number, area_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single merged area.
     * Get the details of a single merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    getMergedArea(board_id: number, area_id: number, options?: Configuration): Observable<InlineResponse20038>;
    /**
     * Get a list of the merged areas in a specified board.
     * Get a list of merged areas
     * @param board_id A board id.
     */
    getMergedAreas(board_id: number, options?: Configuration): Observable<InlineResponse20036>;
    /**
     * Update a merged area.
     * Update a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     * @param InlineObject16
     */
    updateMergedArea(board_id: number, area_id: number, InlineObject16?: InlineObject16, options?: Configuration): Observable<InlineResponse20038>;
}
export declare class ObservableMyApiKeyGenerateApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyApiKeyGenerateApiRequestFactory, responseProcessor?: MyApiKeyGenerateApiResponseProcessor);
    /**
     * Generate an api key.
     * Generate an api key
     */
    generateApiKey(options?: Configuration): Observable<InlineResponse200148>;
}
export declare class ObservableMyAppSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyAppSettingsApiRequestFactory, responseProcessor?: MyAppSettingsApiResponseProcessor);
    /**
     * Get the details of an app setting and the value you have set for it.
     * Get the details of an app setting and the value you have set for it
     * @param setting_name A setting name.
     */
    getMyAppSetting(setting_name: string, options?: Configuration): Observable<InlineResponse20040>;
    /**
     * Get a list of all app settings and the values you have selected.
     * Get a list of all app settings and the values you have selected
     */
    getMyAppSettings(options?: Configuration): Observable<InlineResponse20039>;
    /**
     * Remove the value of an app setting.
     * Remove the value of an app setting
     * @param setting_name A setting name.
     */
    removeMyAppSetting(setting_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableMyBoardSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyBoardSettingsApiRequestFactory, responseProcessor?: MyBoardSettingsApiResponseProcessor);
    /**
     * Get the details of an board setting and the value you have set for it.
     * Get the details of an board setting and the value you have set for it
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    getMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Observable<InlineResponse20040>;
    /**
     * Get a list of all board settings and the values you have selected.
     * Get a list of all board settings and the values you have selected
     * @param board_id A board id.
     */
    getMyBoardSettings(board_id: number, options?: Configuration): Observable<InlineResponse20039>;
    /**
     * Remove the value of an board setting.
     * Remove the value of an board setting
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    removeMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableMyBoardsSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyBoardsSettingsApiRequestFactory, responseProcessor?: MyBoardsSettingsApiResponseProcessor);
    /**
     * Set the values of board settings for a list of boards.
     * Set the values of board settings for a list of boards
     * @param InlineObject58
     */
    setMySettingsBoards(InlineObject58?: InlineObject58, options?: Configuration): Observable<void>;
}
export declare class ObservableMyDashboardPageSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageSettingsApiRequestFactory, responseProcessor?: MyDashboardPageSettingsApiResponseProcessor);
    /**
     * Unset a single setting added to one of mine dashboard pages.
     * Unset a single setting added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param setting_name A setting name.
     */
    unsetMyDashboardPageSingleSetting(dashboard_page_id: number, setting_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableMyDashboardPageWidgetsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWidgetsApiRequestFactory, responseProcessor?: MyDashboardPageWidgetsApiResponseProcessor);
    /**
     * Check if a widget is added to one of mine dashboard pages.
     * Check if a widget is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     */
    checkMyDashboardPageWidget(dashboard_page_id: number, widget_id: number, options?: Configuration): Observable<InlineResponse200152>;
    /**
     * Get a list of widgets added to one of mine dashboard pages.
     * Get a list of widgets added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWidgets(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200151>;
    /**
     * Update position of a single widget on one of mine dashboard pages.
     * Update position of a single widget on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     * @param InlineObject60
     */
    updateMyDashboardPageWidgetPosition(dashboard_page_id: number, widget_id: number, InlineObject60?: InlineObject60, options?: Configuration): Observable<InlineResponse200150>;
}
export declare class ObservableMyDashboardPageWorkspacesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWorkspacesApiRequestFactory, responseProcessor?: MyDashboardPageWorkspacesApiResponseProcessor);
    /**
     * Check if a workspace is added to one of mine dashboard pages.
     * Check if a workspace is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkMyDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Observable<InlineResponse200154>;
    /**
     * Get a list of workspaces added to one of mine dashboard pages.
     * Get a list of workspaces added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200153>;
    /**
     * Update position of a single workspace on one of mine dashboard pages.
     * Update position of a single workspace on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     * @param InlineObject61
     */
    updateMyDashboardPageWorkspacePosition(dashboard_page_id: number, workspace_id: number, InlineObject61?: InlineObject61, options?: Configuration): Observable<InlineResponse200150>;
}
export declare class ObservableMyDashboardPagesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPagesApiRequestFactory, responseProcessor?: MyDashboardPagesApiResponseProcessor);
    /**
     * Get the details of one of mine dashboard pages.
     * Get the details of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPage(dashboard_page_id: number, options?: Configuration): Observable<InlineResponse200150>;
    /**
     * Get a list of my dashboard pages.
     * Get a list of my dashboard pages
     */
    getMyDashboardPages(options?: Configuration): Observable<InlineResponse200149>;
    /**
     * Update position of one of mine dashboard pages.
     * Update position of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject59
     */
    updateMyDashboardPagePosition(dashboard_page_id: number, InlineObject59?: InlineObject59, options?: Configuration): Observable<InlineResponse200150>;
}
export declare class ObservableMyFavoriteBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MyFavoriteBoardsApiRequestFactory, responseProcessor?: MyFavoriteBoardsApiResponseProcessor);
    /**
     * Add a board to the list of your favorite boards or change its position within the list.
     * Add a board to your favorite
     * @param board_id A board id.
     * @param InlineObject62
     */
    addFavoriteBoard(board_id: number, InlineObject62?: InlineObject62, options?: Configuration): Observable<InlineResponse200156>;
    /**
     * Check if a board is one of your favorite boards.
     * Check if a board is one of your favorite
     * @param board_id A board id.
     */
    checkFavoriteBoard(board_id: number, options?: Configuration): Observable<InlineResponse200155>;
    /**
     * Get a list of your favorite boards.
     * Get a list of your favorite boards
     */
    getFavoriteBoards(options?: Configuration): Observable<InlineResponse20011>;
    /**
     * Remove a board from the list of your favorite boards.
     * Remove a board from your favorite
     * @param board_id A board id.
     */
    removeFavoriteBoard(board_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableOldApiLimitsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OldApiLimitsApiRequestFactory, responseProcessor?: OldApiLimitsApiResponseProcessor);
    /**
     * Get a list of the old api request limits.
     * Get the hourly limits for the old api requests
     */
    getOldApiLimits(options?: Configuration): Observable<InlineResponse200157>;
}
export declare class ObservableOldApiRequestHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OldApiRequestHistoryApiRequestFactory, responseProcessor?: OldApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistory(user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200158>;
    /**
     * Get a list of old api requests aggregated by user matching some optional criteria.
     * Get a list of old api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option regarding the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getOldApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Observable<InlineResponse200159>;
}
export declare class ObservableParentCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ParentCardsApiRequestFactory, responseProcessor?: ParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card.
     * Make a card a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject44
     */
    addParentCard(card_id: number, parent_card_id: number, InlineObject44?: InlineObject44, options?: Configuration): Observable<void | InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkParentCard(card_id: number, parent_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get the full list of parent cards of a given card and the parent cards of those cards too.
     * Get a list of parent cards including their parent cards too
     * @param card_id A card id.
     */
    getParentCardGraph(card_id: number, options?: Configuration): Observable<InlineResponse20093>;
    /**
     * Get a list of the parent cards of a given card.
     * Get a list of parent cards
     * @param card_id A card id.
     */
    getParentCards(card_id: number, options?: Configuration): Observable<InlineResponse200116>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeParentCard(card_id: number, parent_card_id: number, exceeding_reason?: string, options?: Configuration): Observable<void>;
}
export declare class ObservablePredecessorCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PredecessorCardsApiRequestFactory, responseProcessor?: PredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card.
     * Make a card a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject45
     */
    addPredecessorCard(card_id: number, predecessor_card_id: number, InlineObject45?: InlineObject45, options?: Configuration): Observable<void | InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkPredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get the full list of predecessor cards of a given card and the predecessor cards of those cards too.
     * Get a list of predecessor cards including their predecessor cards too
     * @param card_id A card id.
     */
    getPredecessorCardGraph(card_id: number, options?: Configuration): Observable<InlineResponse200117>;
    /**
     * Get a list of the predecessor cards of a given card.
     * Get a list of predecessor cards
     * @param card_id A card id.
     */
    getPredecessorCards(card_id: number, options?: Configuration): Observable<InlineResponse200118>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removePredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableRelatedWorkflowsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RelatedWorkflowsApiRequestFactory, responseProcessor?: RelatedWorkflowsApiResponseProcessor);
    /**
     * Add a related workflow on a board.
     * Add a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject17
     */
    addBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject17?: InlineObject17, options?: Configuration): Observable<InlineResponse20042>;
    /**
     * Check if a board is related to another board and workflow.
     * Check if a board is related to another board and workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    checkBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Observable<InlineResponse20042>;
    /**
     * Get a list of boards and workflows related to a specified board.
     * Get a list of related workflows
     * @param board_id A board id.
     */
    getRelatedBoardsWorlflows(board_id: number, options?: Configuration): Observable<InlineResponse20041>;
    /**
     * Remove a related board workflow.
     * Remove a related board workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    removeBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Observable<void>;
    /**
     * Update a related workflow on a board.
     * Update a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject18
     */
    updateBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject18?: InlineObject18, options?: Configuration): Observable<InlineResponse20042>;
}
export declare class ObservableRelativeCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RelativeCardsApiRequestFactory, responseProcessor?: RelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card.
     * Make a card a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject46
     */
    addRelatedCard(card_id: number, related_card_id: number, InlineObject46?: InlineObject46, options?: Configuration): Observable<void | InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get a list of the cards related to a given card.
     * Get a list of related cards
     * @param card_id A card id.
     */
    getRelatedCards(card_id: number, options?: Configuration): Observable<InlineResponse200119>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableRolePermissionsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RolePermissionsApiRequestFactory, responseProcessor?: RolePermissionsApiResponseProcessor);
    /**
     * Check if a role has a permission.
     * Check if a role has a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    getRolePermission(role_id: number, permission_name: string, options?: Configuration): Observable<void>;
    /**
     * Get a list of all possible role permissions and whether the role has them.
     * Get a list of all possible role permissions and whether the role has them
     * @param role_id A role id.
     */
    getRolePermissions(role_id: number, options?: Configuration): Observable<InlineResponse200166>;
    /**
     * Remove a permission from the role.
     * Remove a permission from the role
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    removeRolePermission(role_id: number, permission_name: string, options?: Configuration): Observable<void>;
    /**
     * Give the role a permission.
     * Give the role a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    setRolePermission(role_id: number, permission_name: string, options?: Configuration): Observable<void>;
}
export declare class ObservableRolesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RolesApiRequestFactory, responseProcessor?: RolesApiResponseProcessor);
    /**
     * Create a new role.
     * Create a role
     * @param InlineObject63
     */
    createRole(InlineObject63?: InlineObject63, options?: Configuration): Observable<InlineResponse200164>;
    /**
     * Delete a role.
     * Delete a role
     * @param role_id A role id.
     * @param replace_with_role_id The id of a role which will be given to the users which currently have the role which is about to be deleted.
     */
    deleteRole(role_id: number, replace_with_role_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single role.
     * Get the details of a single role
     * @param role_id A role id.
     */
    getRole(role_id: number, options?: Configuration): Observable<InlineResponse200165>;
    /**
     * Get a list of roles matching some optional criteria.
     * Get a list of roles
     * @param role_ids A list of the role ids that you want to get.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is permissions.
     */
    getRoles(role_ids?: Array<number>, expand?: Array<string>, options?: Configuration): Observable<InlineResponse200163>;
    /**
     * Update a role.
     * Update a role
     * @param role_id A role id.
     * @param InlineObject64
     */
    updateRole(role_id: number, InlineObject64?: InlineObject64, options?: Configuration): Observable<InlineResponse200165>;
}
export declare class ObservableStickerBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StickerBoardsApiRequestFactory, responseProcessor?: StickerBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the sticker is available.
     * Get a list of boards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerBoards(sticker_id: number, options?: Configuration): Observable<InlineResponse20011>;
}
export declare class ObservableStickerCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StickerCardsApiRequestFactory, responseProcessor?: StickerCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the sticker is available.
     * Get a list of cards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerCards(sticker_id: number, options?: Configuration): Observable<InlineResponse20012>;
}
export declare class ObservableStickerHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StickerHistoryApiRequestFactory, responseProcessor?: StickerHistoryApiResponseProcessor);
    /**
     * Get a list of stickers creation, deletion, update events matching some optional criteria.
     * Get a list of stickers creation, deletion, update events
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistory(sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200169>;
}
export declare class ObservableStickersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StickersApiRequestFactory, responseProcessor?: StickersApiResponseProcessor);
    /**
     * Create a new sticker.
     * Create a sticker
     * @param InlineObject65
     */
    createSticker(InlineObject65?: InlineObject65, options?: Configuration): Observable<InlineResponse200168>;
    /**
     * Delete a sticker.
     * Delete a sticker
     * @param sticker_id A sticker id.
     * @param replace_with_sticker_id The id of a sticker with which to replace the one to be deleted on the cards using it.
     */
    deleteSticker(sticker_id: number, replace_with_sticker_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single sticker.
     * Get the details of a single sticker
     * @param sticker_id A sticker id.
     */
    getSticker(sticker_id: number, options?: Configuration): Observable<InlineResponse200168>;
    /**
     * Get a list of stickers matching some optional criteria.
     * Get a list of stickers
     * @param sticker_ids A list of the sticker ids that you want to get.
     * @param label Find a sticker by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled stickers. When set to 0 you will only get disabled stickers.
     * @param fields A list of fields that you want in the response. The allowed fields are: sticker_id, icon_type, icon_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getStickers(sticker_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'sticker_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Observable<InlineResponse200167>;
    /**
     * Update a sticker.
     * Update a sticker
     * @param sticker_id A sticker id.
     * @param InlineObject66
     */
    updateSticker(sticker_id: number, InlineObject66?: InlineObject66, options?: Configuration): Observable<InlineResponse200168>;
}
export declare class ObservableSuccessorCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SuccessorCardsApiRequestFactory, responseProcessor?: SuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card.
     * Make a card a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject48
     */
    addSuccessorCard(card_id: number, successor_card_id: number, InlineObject48?: InlineObject48, options?: Configuration): Observable<InlineResponse20083 | void>;
    /**
     * Check if a card is a successor of a given card and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Observable<InlineResponse20064>;
    /**
     * Get the full list of successor cards of a given card and the successor cards of those cards too.
     * Get a list of successor cards including their successor cards too
     * @param card_id A card id.
     */
    getSuccessorCardGraph(card_id: number, options?: Configuration): Observable<InlineResponse200117>;
    /**
     * Get a list of the successor cards of a given card.
     * Get a list of successor cards
     * @param card_id A card id.
     */
    getSuccessorCards(card_id: number, options?: Configuration): Observable<InlineResponse200126>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableTagBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TagBoardsApiRequestFactory, responseProcessor?: TagBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the tag is available.
     * Get a list of boards where the tag is available
     * @param tag_id A tag id.
     */
    getTagBoards(tag_id: number, options?: Configuration): Observable<InlineResponse20011>;
    /**
     * Make a tag available or unavailable on several boards.
     * Make a tag available or unavailable on several boards
     * @param tag_id A tag id.
     * @param InlineObject69
     */
    updateTagBoards(tag_id: number, InlineObject69?: InlineObject69, options?: Configuration): Observable<void>;
}
export declare class ObservableTagCardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TagCardsApiRequestFactory, responseProcessor?: TagCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the tag is available.
     * Get a list of cards where the tag is available
     * @param tag_id A tag id.
     */
    getTagCards(tag_id: number, options?: Configuration): Observable<InlineResponse20012>;
}
export declare class ObservableTagHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TagHistoryApiRequestFactory, responseProcessor?: TagHistoryApiResponseProcessor);
    /**
     * Get a list of tags creation, deletion, update events matching some optional criteria.
     * Get a list of tags creation, deletion, update events
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistory(tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200172>;
}
export declare class ObservableTagsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TagsApiRequestFactory, responseProcessor?: TagsApiResponseProcessor);
    /**
     * Create a new tag.
     * Create a tag
     * @param InlineObject67
     */
    createTag(InlineObject67?: InlineObject67, options?: Configuration): Observable<InlineResponse200171>;
    /**
     * Delete a tag.
     * Delete a tag
     * @param tag_id A tag id.
     * @param replace_with_tag_id The id of a tag with which to replace the one to be deleted on the cards using it.
     */
    deleteTag(tag_id: number, replace_with_tag_id?: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single tag.
     * Get the details of a single tag
     * @param tag_id A tag id.
     */
    getTag(tag_id: number, options?: Configuration): Observable<InlineResponse200171>;
    /**
     * Get a list of tags matching some optional criteria.
     * Get a list of tags
     * @param tag_ids A list of the tag ids that you want to get.
     * @param label Find a tag by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled tags. When set to 0 you will only get disabled tags.
     * @param fields A list of fields that you want in the response. The allowed fields are: tag_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getTags(tag_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'tag_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Observable<InlineResponse200170>;
    /**
     * Update a tag.
     * Update a tag
     * @param tag_id A tag id.
     * @param InlineObject68
     */
    updateTag(tag_id: number, InlineObject68?: InlineObject68, options?: Configuration): Observable<InlineResponse200171>;
}
export declare class ObservableTeamBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TeamBoardsApiRequestFactory, responseProcessor?: TeamBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the team is available.
     * Get a list of boards where the team is available
     * @param team_id A team id.
     */
    getTeamBoards(team_id: number, options?: Configuration): Observable<InlineResponse20011>;
}
export declare class ObservableTeamHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TeamHistoryApiRequestFactory, responseProcessor?: TeamHistoryApiResponseProcessor);
    /**
     * Get a list of teams creation, deletion, update events matching some optional criteria.
     * Get a list of teams creation, deletion, update events
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistory(team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200175>;
}
export declare class ObservableTeamManagersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TeamManagersApiRequestFactory, responseProcessor?: TeamManagersApiResponseProcessor);
    /**
     * Set a user as a manager of the team.
     * Set a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamManager(team_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a user is added as a team manager to a team.
     * Check if a user is added as a team manager to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamManager(team_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of users who can manage the team.
     * Get a list of users who can manage the team
     * @param team_id A team id.
     */
    getTeamManagers(team_id: number, options?: Configuration): Observable<InlineResponse200176>;
    /**
     * Remove a user as a manager of the team.
     * Remove a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamManager(team_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableTeamUsersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TeamUsersApiRequestFactory, responseProcessor?: TeamUsersApiResponseProcessor);
    /**
     * Add a user to the team.
     * Add a user to the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamUser(team_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a user is added to a team.
     * Check if a user is added to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamUser(team_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of users added to the team.
     * Get a list of users added to the team
     * @param team_id A team id.
     */
    getTeamUsers(team_id: number, options?: Configuration): Observable<InlineResponse200177>;
    /**
     * Remove a user from the team.
     * Remove a user from the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamUser(team_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableTeamsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TeamsApiRequestFactory, responseProcessor?: TeamsApiResponseProcessor);
    /**
     * Create a new team.
     * Create a team
     * @param InlineObject70
     */
    createTeam(InlineObject70?: InlineObject70, options?: Configuration): Observable<InlineResponse200174>;
    /**
     * Delete a team.
     * Delete a team
     * @param team_id A team id.
     */
    deleteTeam(team_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single team.
     * Get the details of a single team
     * @param team_id A team id.
     */
    getTeam(team_id: number, options?: Configuration): Observable<InlineResponse200174>;
    /**
     * Get a list of teams matching some optional criteria.
     * Get a list of teams
     * @param team_ids A list of the team ids that you want to get.
     * @param name Find a team by its full name.
     * @param fields A list of fields that you want in the response. The allowed fields are: team_id, name, description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards and user_ids.
     */
    getTeams(team_ids?: Array<number>, name?: string, fields?: Array<'team_id' | 'name' | 'description'>, expand?: Array<'boards' | 'user_ids'>, options?: Configuration): Observable<InlineResponse200173>;
    /**
     * Update a team.
     * Update a team
     * @param team_id A team id.
     * @param InlineObject71
     */
    updateTeam(team_id: number, InlineObject71?: InlineObject71, options?: Configuration): Observable<InlineResponse200174>;
}
export declare class ObservableUserActivityApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UserActivityApiRequestFactory, responseProcessor?: UserActivityApiResponseProcessor);
    /**
     * Get the last activity of a user.
     * Get the last activity of a user
     * @param user_id A user id.
     */
    getUserLastActivity(user_id: number, options?: Configuration): Observable<InlineResponse200185>;
}
export declare class ObservableUserBoardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UserBoardsApiRequestFactory, responseProcessor?: UserBoardsApiResponseProcessor);
    /**
     * Get a list of the boards to which the user is assigned and with what role.
     * Get a list of boards the user is assigned to
     * @param user_id A user id.
     */
    getUserBoardRoles(user_id: number, options?: Configuration): Observable<InlineResponse200182>;
}
export declare class ObservableUserHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UserHistoryApiRequestFactory, responseProcessor?: UserHistoryApiResponseProcessor);
    /**
     * Get a list of user management history events.
     * Get a list of user management history events.
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistory(affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200179>;
}
export declare class ObservableUserInvolvedBusinessRulesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UserInvolvedBusinessRulesApiRequestFactory, responseProcessor?: UserInvolvedBusinessRulesApiResponseProcessor);
    /**
     * Get a list of business rules where the user is involved.
     * Get a list of business rules where the user is involved
     * @param user_id A user id.
     */
    getUserInvolvedBusinessRules(user_id: number, options?: Configuration): Observable<InlineResponse200184>;
}
export declare class ObservableUserTeamsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UserTeamsApiRequestFactory, responseProcessor?: UserTeamsApiResponseProcessor);
    /**
     * Check if the users is a member of the team.
     * Check if the users is a member of the team
     * @param user_id A user id.
     * @param team_id A team id.
     */
    checkUserTeam(user_id: number, team_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of teams where the user is a member.
     * Get a list of teams where the user is a member
     * @param user_id A user id.
     */
    getUserTeams(user_id: number, options?: Configuration): Observable<InlineResponse200187>;
}
export declare class ObservableUsersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UsersApiRequestFactory, responseProcessor?: UsersApiResponseProcessor);
    /**
     * Delete a user.
     * Delete a user
     * @param user_id A user id.
     */
    deleteUser(user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single user.
     * Get the details of a single user
     * @param user_id A user id.
     */
    getUser(user_id: number, options?: Configuration): Observable<InlineResponse200181>;
    /**
     * Get a list of users matching some optional criteria.
     * Get a list of users
     * @param user_ids A list of the user ids that you want to get.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: user_id, email, username, realname, avatar, is_enabled, is_confirmed, is_tfa_enabled and registration_date.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: invitation_status, global_privileges, board_roles, managed_workspaces and last_activity.
     */
    getUsers(user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, fields?: Array<'user_id' | 'email' | 'username' | 'realname' | 'avatar' | 'is_enabled' | 'is_confirmed' | 'is_tfa_enabled' | 'registration_date' | 'timezone' | 'language'>, expand?: Array<'invitation_status' | 'global_privileges' | 'board_roles' | 'managed_workspaces' | 'last_activity'>, options?: Configuration): Observable<InlineResponse200178>;
    /**
     * Invite a new user.
     * Invite a user
     * @param InlineObject72
     */
    inviteUser(InlineObject72?: InlineObject72, options?: Configuration): Observable<InlineResponse200180>;
    /**
     * Send a new invitation email to the user.
     * Resend an invitation
     * @param user_id A user id.
     */
    resendInvitation(user_id: number, options?: Configuration): Observable<void>;
    /**
     * Update a user.
     * Update a user
     * @param user_id A user id.
     * @param InlineObject73
     */
    updateUser(user_id: number, InlineObject73?: InlineObject73, options?: Configuration): Observable<InlineResponse200181>;
}
export declare class ObservableWebhookHistoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WebhookHistoryApiRequestFactory, responseProcessor?: WebhookHistoryApiResponseProcessor);
    /**
     * Get a list of webhooks creation, deletion, update events matching some optional criteria.
     * Get a list of webhooks creation, deletion, update events
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistory(webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Observable<InlineResponse200190>;
}
export declare class ObservableWebhooksApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WebhooksApiRequestFactory, responseProcessor?: WebhooksApiResponseProcessor);
    /**
     * Create a new webhook.
     * Create a webhook
     * @param InlineObject74
     */
    createWebhook(InlineObject74?: InlineObject74, options?: Configuration): Observable<InlineResponse200189>;
    /**
     * Delete a webhook.
     * Delete a webhook
     * @param webhook_id A webhook id.
     */
    deleteWebhook(webhook_id: number, options?: Configuration): Observable<void>;
    /**
     * Get the details of a single webhook.
     * Get the details of a single webhook
     * @param webhook_id A webhook id.
     */
    getWebhook(webhook_id: number, options?: Configuration): Observable<InlineResponse200191>;
    /**
     * Get a list of the currently defined webhooks optionally filtered by board id.
     * Get all webhooks
     * @param board_ids A list of the board ids for which you want to get the webhooks.
     */
    getWebhooks(board_ids?: Array<number>, options?: Configuration): Observable<InlineResponse200188>;
    /**
     * Update a webhook.
     * Update a webhook
     * @param webhook_id A webhook id.
     * @param InlineObject75
     */
    updateWebhook(webhook_id: number, InlineObject75?: InlineObject75, options?: Configuration): Observable<InlineResponse200191>;
}
export declare class ObservableWorkflowsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WorkflowsApiRequestFactory, responseProcessor?: WorkflowsApiResponseProcessor);
    /**
     * Copy existing workflow.
     * Copy a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject25
     */
    copyWorkflow(board_id: number, workflow_id: number, InlineObject25?: InlineObject25, options?: Configuration): Observable<InlineResponse20054>;
    /**
     * Create a new workflow
     * Create workflow
     * @param board_id A board id.
     * @param InlineObject23
     */
    createWorkflow(board_id: number, InlineObject23?: InlineObject23, options?: Configuration): Observable<InlineResponse20052>;
    /**
     * Check if a workflow exists and get its details.
     * Get workflow details
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    getWorkflow(board_id: number, workflow_id: number, options?: Configuration): Observable<InlineResponse20053>;
    /**
     * Check if board workflows exists and get their details.
     * Get workflow details
     * @param board_id A board id.
     */
    getWorkflows(board_id: number, options?: Configuration): Observable<InlineResponse20052>;
    /**
     * Update workflow`s properties
     * Update workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject24
     */
    updateWorkflow(board_id: number, workflow_id: number, InlineObject24?: InlineObject24, options?: Configuration): Observable<InlineResponse20053>;
    /**
     * Delete a workflow.
     * Delete a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    workflowDelete(board_id: number, workflow_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableWorkspaceManagersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WorkspaceManagersApiRequestFactory, responseProcessor?: WorkspaceManagersApiResponseProcessor);
    /**
     * Make a user a workspace manager.
     * Make a user a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    addWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Check if a user is a workspace manager.
     * Check if a user is a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    checkWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Observable<void>;
    /**
     * Get a list of the workspace managers for a workspace.
     * Get a list of workspace managers
     * @param workspace_id A workspace id.
     */
    getWorkspaceManagers(workspace_id: number, options?: Configuration): Observable<InlineResponse200195>;
    /**
     * Make a user not a workspace manager.
     * Make a user not a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    removeWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Observable<void>;
}
export declare class ObservableWorkspacesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WorkspacesApiRequestFactory, responseProcessor?: WorkspacesApiResponseProcessor);
    /**
     * Create a new workspace.
     * Create a workspace
     * @param InlineObject76
     */
    createWorkspace(InlineObject76?: InlineObject76, options?: Configuration): Observable<InlineResponse200193>;
    /**
     * Get the details of a single workspace.
     * Get the details of a single workspace
     * @param workspace_id A workspace id.
     */
    getWorkspace(workspace_id: number, options?: Configuration): Observable<InlineResponse200194>;
    /**
     * Get a list of workspaces matching some optional criteria.
     * Get a list of workspaces
     * @param workspace_ids A list of the workspace ids that you want to get.
     * @param type When set to 1 you will only get team workspaces. When set to 2 you will only get management workspaces.
     * @param is_archived When set to 0 you will only get non-archived workspaces. When set to 1 you will only get archived workspaces.
     * @param if_workspace_manager When set to 1 you will only get workspaces for which you are a workspace manager.
     * @param if_assigned_to_boards When set to 1 you will only get workspaces in which you are assigned to at least one board.
     * @param board_filter_is_archived When set to 0 or 1 and the optional expand parameter includes boards, you will only get non archived / archived boards respectively.
     * @param board_filter_if_assigned When set to 1 and the optional expand parameter includes boards, you will only get boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: workspace_id, is_archived and name.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is boards optionally followed by a list of fields inside square brackets. For boards the allowed fields are board_id, is_archived and name.
     */
    getWorkspaces(workspace_ids?: Array<number>, type?: 1 | 2, is_archived?: 0 | 1, if_workspace_manager?: 0 | 1, if_assigned_to_boards?: 0 | 1, board_filter_is_archived?: 0 | 1, board_filter_if_assigned?: 0 | 1, fields?: Array<'workspace_id' | 'type' | 'is_archived' | 'name'>, expand?: Array<string>, options?: Configuration): Observable<InlineResponse200192>;
    /**
     * Update a workspace.
     * Update a workspace
     * @param workspace_id A workspace id.
     * @param InlineObject77
     */
    updateWorkspace(workspace_id: number, InlineObject77?: InlineObject77, options?: Configuration): Observable<InlineResponse200194>;
}
export declare class PromiseApiLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApiLimitsApiRequestFactory, responseProcessor?: ApiLimitsApiResponseProcessor);
    /**
     * Get a list of the api request limits.
     * Get the hourly and minutely limits for the api requests
     */
    getApiLimits(options?: Configuration): Promise<InlineResponse2003>;
}
export declare class PromiseApiRequestHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApiRequestHistoryApiRequestFactory, responseProcessor?: ApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistory(user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse2004>;
    /**
     * Get a list of api requests aggregated by user matching some optional criteria.
     * Get a list of api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option for choosing the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Promise<InlineResponse2005>;
}
export declare class PromiseArchivedCardVersionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ArchivedCardVersionsApiRequestFactory, responseProcessor?: ArchivedCardVersionsApiResponseProcessor);
    /**
     * Create a new archived card version.
     * Create a archived card version
     * @param InlineObject
     */
    createArchiveCardVersion(InlineObject?: InlineObject, options?: Configuration): Promise<InlineResponse2007>;
    /**
     * Delete a archived card version.
     * Delete a archived card version
     * @param version_id A archived card version id.
     */
    deleteArchiveCardVersion(version_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single archived card version.
     * Get the details of a single archived card version
     * @param version_id A archived card version id.
     */
    getArchiveCardVersion(version_id: number, options?: Configuration): Promise<InlineResponse2007>;
    /**
     * Get a list of archived card versions.
     * Get a list of archived card versions
     */
    getArchivedCardVersions(options?: Configuration): Promise<InlineResponse2006>;
    /**
     * Update a archived card version.
     * Update a archived card version
     * @param version_id A archived card version id.
     * @param InlineObject1
     */
    updateArchiveCardVersion(version_id: number, InlineObject1?: InlineObject1, options?: Configuration): Promise<InlineResponse2007>;
}
export declare class PromiseBlockReasonBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonBoardsApiRequestFactory, responseProcessor?: BlockReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the block reason is available.
     * Get a list of boards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonBoards(reason_id: number, options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Make a block reason available or unavailable on several boards.
     * Make a block reason available or unavailable on several boards
     * @param reason_id A block reason id.
     * @param InlineObject4
     */
    updateBlockReasonBoards(reason_id: number, InlineObject4?: InlineObject4, options?: Configuration): Promise<void>;
}
export declare class PromiseBlockReasonCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonCardsApiRequestFactory, responseProcessor?: BlockReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the block reason is available.
     * Get a list of cards where the block reason is available
     * @param reason_id A block reason id.
     */
    getBlockReasonCards(reason_id: number, options?: Configuration): Promise<InlineResponse20012>;
}
export declare class PromiseBlockReasonHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonHistoryApiRequestFactory, responseProcessor?: BlockReasonHistoryApiResponseProcessor);
    /**
     * Get a list of block reasons creation, deletion, update events matching some optional criteria.
     * Get a list of block reasons creation, deletion, update events
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse20010>;
}
export declare class PromiseBlockReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BlockReasonsApiRequestFactory, responseProcessor?: BlockReasonsApiResponseProcessor);
    /**
     * Create a new block reason.
     * Create a block reason
     * @param InlineObject2
     */
    createBlockReason(InlineObject2?: InlineObject2, options?: Configuration): Promise<InlineResponse2009>;
    /**
     * Delete a block reason.
     * Delete a block reason
     * @param reason_id A block reason id.
     * @param replace_with_reason_id The id of a block reason with which to block the cards which are currently blocked with the block reason which is about to be deleted.
     */
    deleteBlockReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single block reason.
     * Get the details of a single block reason
     * @param reason_id A block reason id.
     */
    getBlockReason(reason_id: number, options?: Configuration): Promise<InlineResponse2009>;
    /**
     * Get a list of block reasons matching some optional criteria.
     * Get a list of block reasons
     * @param reason_ids A list of the block reason ids that you want to get.
     * @param label Find a block reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled block reasons. When set to 0 you will only get disabled block reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, icon_type, icon_id, label, color, with_cards, with_date, with_users, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getBlockReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'with_cards' | 'with_date' | 'with_users' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<InlineResponse2008>;
    /**
     * Update a block reason.
     * Update a block reason
     * @param reason_id A block reason id.
     * @param InlineObject3
     */
    updateBlockReason(reason_id: number, InlineObject3?: InlineObject3, options?: Configuration): Promise<InlineResponse2009>;
}
export declare class PromiseBoardAssigneesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardAssigneesApiRequestFactory, responseProcessor?: BoardAssigneesApiResponseProcessor);
    /**
     * Get a list of the assignees for a board and their roles.
     * Get a list of board assignees
     * @param board_id A board id.
     */
    getBoardAssignees(board_id: number, options?: Configuration): Promise<InlineResponse20050>;
    /**
     * Check if a user is assigned to a board and with what role.
     * Get the role of a board assignee
     * @param board_id A board id.
     * @param user_id A user id.
     */
    getBoardUserRole(board_id: number, user_id: number, options?: Configuration): Promise<InlineResponse20026>;
    /**
     * Assign a user to a board or change his or her role.
     * Assign a user to a board
     * @param board_id A board id.
     * @param user_id A user id.
     * @param InlineObject22
     */
    setBoardUserRole(board_id: number, user_id: number, InlineObject22?: InlineObject22, options?: Configuration): Promise<void>;
    /**
     * Unassign a user from a board.
     * Unassign a user from a board
     * @param board_id A board id.
     * @param user_id A user id.
     */
    unsetBoardUserRole(board_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardBlockReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardBlockReasonsApiRequestFactory, responseProcessor?: BoardBlockReasonsApiResponseProcessor);
    /**
     * Make a block reason available on a board.
     * Make a block reason available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    addBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a block reason is available on a board.
     * Check if a block reason is available on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    checkBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the block reasons available on a board.
     * Get a list of block reasons available on a board
     * @param board_id A board id.
     */
    getBoardBlockReasons(board_id: number, options?: Configuration): Promise<InlineResponse20016>;
    /**
     * Make a block reason unavailable on a board.
     * Make a block reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A block reason id.
     */
    removeBoardBlockReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardCardTemplatesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCardTemplatesApiRequestFactory, responseProcessor?: BoardCardTemplatesApiResponseProcessor);
    /**
     * Make a card template available on a board.
     * Make a card template available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    addBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a card template is available on a board.
     * Check if a card template is available on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    checkBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the card templates available on a board.
     * Get a list of card templates available on a board
     * @param board_id A board id.
     */
    getBoardCardTemplates(board_id: number, options?: Configuration): Promise<InlineResponse20017>;
    /**
     * Make a card template unavailable on a board.
     * Make a card template unavailable on a board
     * @param board_id A board id.
     * @param template_id A template id.
     */
    removeBoardCardTemplate(board_id: number, template_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardCardTypesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCardTypesApiRequestFactory, responseProcessor?: BoardCardTypesApiResponseProcessor);
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    addBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Check if a card type is available on a board.
     * Check if a card type is available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    checkBoardCardType(board_id: number, type_id: number, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Get the effective settings of a card type for a board if it is available on it.
     * Get the effective settings of a card type for a board if it is available on it
     * @param board_id A board id.
     * @param type_id A type id.
     */
    getBoardCardTypeEffectiveSettings(board_id: number, type_id: number, options?: Configuration): Promise<InlineResponse20019>;
    /**
     * Get a list of the card types available on a board.
     * Get a list of card types available on a board
     * @param board_id A board id.
     */
    getBoardCardTypes(board_id: number, options?: Configuration): Promise<InlineResponse20018>;
    /**
     * Make a card type unavailable on a board.
     * Make a card type unavailable on a board
     * @param board_id A board id.
     * @param type_id A type id.
     */
    removeBoardCardType(board_id: number, type_id: number, options?: Configuration): Promise<void>;
    /**
     * Make a card type available on a board.
     * Make a card type available on a board
     * @param board_id A board id.
     * @param type_id A type id.
     * @param BoardCardTypeCreateOrUpdateRequest
     */
    updateBoardCardType(board_id: number, type_id: number, BoardCardTypeCreateOrUpdateRequest?: BoardCardTypeCreateOrUpdateRequest, options?: Configuration): Promise<InlineResponse20019>;
}
export declare class PromiseBoardCustomFieldAllowedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldAllowedValuesApiRequestFactory, responseProcessor?: BoardCustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Add or update an allowed value for a custom field for a board.
     * Add or update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject10
     */
    addOrUpdateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject10?: InlineObject10, options?: Configuration): Promise<InlineResponse20028>;
    /**
     * Get the details of a single allowed value for a custom field for a board.
     * Get the details of a single allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Promise<InlineResponse20028>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown for a board.
     * Get a list of the allowed values of a custom field of type dropdown for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldAllowedValues(board_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20027>;
    /**
     * Remove an allowed value for a custom field for a board.
     * Remove an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, options?: Configuration): Promise<void>;
    /**
     * Update an allowed value for a custom field for a board.
     * Update an allowed value for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject11
     */
    updateBoardCustomFieldAllowedValue(board_id: number, field_id: number, value_id: number, InlineObject11?: InlineObject11, options?: Configuration): Promise<InlineResponse20028>;
}
export declare class PromiseBoardCustomFieldDefaultContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldDefaultContributorsApiRequestFactory, responseProcessor?: BoardCustomFieldDefaultContributorsApiResponseProcessor);
    /**
     * Make a contributor one of the default for a custom field for a board.
     * Make a contributor one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a contributor is one of the default for a custom field for a board.
     * Check if a contributor is one of the default for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a board.
     * Get a list of the default contributors for a custom field for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    getBoardCustomFieldDefaultContributors(board_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a contributor from the default for a board.
     * Remove a contributor from the default for a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeBoardCustomFieldDefaultContributor(board_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardCustomFieldsApiRequestFactory, responseProcessor?: BoardCustomFieldsApiResponseProcessor);
    /**
     * Make a custom field unavailable on a board.
     * Make a custom field unavailable on a board
     * @param board_id A board id.
     * @param field_id A custom field id.
     */
    removeBoardCustomField(board_id: number, field_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardDiscardReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardDiscardReasonsApiRequestFactory, responseProcessor?: BoardDiscardReasonsApiResponseProcessor);
    /**
     * Make a discard reason available on a board.
     * Make a discard reason available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    addBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a discard reason is available on a board.
     * Check if a discard reason is available on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    checkBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the discard reasons available on a board.
     * Get a list of discard reasons available on a board
     * @param board_id A board id.
     */
    getBoardDiscardReasons(board_id: number, options?: Configuration): Promise<InlineResponse20030>;
    /**
     * Make a discard reason unavailable on a board.
     * Make a discard reason unavailable on a board
     * @param board_id A board id.
     * @param reason_id A discard reason id.
     */
    removeBoardDiscardReason(board_id: number, reason_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardSettingsApiRequestFactory, responseProcessor?: BoardSettingsApiResponseProcessor);
    /**
     * Get the values of the board settings.
     * Get the values of the board settings
     * @param board_id A board id.
     */
    getBoardSettings(board_id: number, options?: Configuration): Promise<InlineResponse20043>;
    /**
     * Set the values of the board settings.
     * Set the values of the board settings
     * @param board_id A board id.
     * @param BoardSettings
     */
    setBoardSettings(board_id: number, BoardSettings?: BoardSettings, options?: Configuration): Promise<InlineResponse20043>;
}
export declare class PromiseBoardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStickersApiRequestFactory, responseProcessor?: BoardStickersApiResponseProcessor);
    /**
     * Make a sticker available on a board.
     * Make a sticker available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject19
     */
    addBoardSticker(board_id: number, sticker_id: number, InlineObject19?: InlineObject19, options?: Configuration): Promise<InlineResponse20045>;
    /**
     * Check if a sticker is available on a board.
     * Check if a sticker is available on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    checkBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Promise<InlineResponse20045>;
    /**
     * Get a list of the stickers available on a board.
     * Get a list of stickers available on a board
     * @param board_id A board id.
     */
    getBoardStickers(board_id: number, options?: Configuration): Promise<InlineResponse20044>;
    /**
     * Make a sticker unavailable on a board.
     * Make a sticker unavailable on a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     */
    removeBoardSticker(board_id: number, sticker_id: number, options?: Configuration): Promise<void>;
    /**
     * Update the properties of a sticker for a board.
     * Update the properties of a sticker for a board
     * @param board_id A board id.
     * @param sticker_id A sticker id.
     * @param InlineObject20
     */
    updateBoardSticker(board_id: number, sticker_id: number, InlineObject20?: InlineObject20, options?: Configuration): Promise<InlineResponse20045>;
}
export declare class PromiseBoardStructureApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStructureApiRequestFactory, responseProcessor?: BoardStructureApiResponseProcessor);
    /**
     * Get all the information necessary to draw a board: the board details, its settings, workflows, lanes, columns, merged areas and cell limits.
     * Get the current board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructure(board_id: number, options?: Configuration): Promise<InlineResponse20025>;
    /**
     * Get only the revision number of the current board structure.
     * Get the current revision of the board structure
     * @param board_id A board id.
     */
    getCurrentBoardStructureRevision(board_id: number, options?: Configuration): Promise<InlineResponse20026>;
}
export declare class PromiseBoardStructureRevisionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardStructureRevisionsApiRequestFactory, responseProcessor?: BoardStructureRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the board structure.
     * Get a specific revision of the board structure
     * @param board_id A board id.
     * @param revision A revision number.
     */
    getBoardStructureRevision(board_id: number, revision: number, options?: Configuration): Promise<InlineResponse20025>;
    /**
     * Get a list of the revisions of the board structure and the date and time they were replaced.
     * Get a list of revisions of the board structure
     * @param board_id A board id.
     */
    getBoardStructureRevisions(board_id: number, options?: Configuration): Promise<InlineResponse20046>;
}
export declare class PromiseBoardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardTagsApiRequestFactory, responseProcessor?: BoardTagsApiResponseProcessor);
    /**
     * Make a tag available on a board.
     * Make a tag available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    addBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is available on a board.
     * Check if a tag is available on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    checkBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the tags available on a board.
     * Get a list of tags available on a board
     * @param board_id A board id.
     */
    getBoardTags(board_id: number, options?: Configuration): Promise<InlineResponse20047>;
    /**
     * Make a tag unavailable on a board.
     * Make a tag unavailable on a board
     * @param board_id A board id.
     * @param tag_id A tag id.
     */
    removeBoardTag(board_id: number, tag_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardTeamsApiRequestFactory, responseProcessor?: BoardTeamsApiResponseProcessor);
    /**
     * Give a team access to a board.
     * Give a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     * @param InlineObject21
     */
    addBoardTeam(board_id: number, team_id: number, InlineObject21?: InlineObject21, options?: Configuration): Promise<void>;
    /**
     * Get the role of a team for the current board.
     * Get the role of a team for the current board.
     * @param board_id A board id.
     * @param team_id A team id.
     */
    getBoardTeamRole(board_id: number, team_id: number, options?: Configuration): Promise<InlineResponse20049>;
    /**
     * Get a list of the teams having access to a board.
     * Get a list of teams having access to a board
     * @param board_id A board id.
     */
    getBoardTeams(board_id: number, options?: Configuration): Promise<InlineResponse20048>;
    /**
     * Deny a team access to a board.
     * Deny a team access to a board
     * @param board_id A board id.
     * @param team_id A team id.
     */
    removeBoardTeam(board_id: number, team_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardVisibleStandardFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardVisibleStandardFieldsApiRequestFactory, responseProcessor?: BoardVisibleStandardFieldsApiResponseProcessor);
    /**
     * Make a standard field visible on a board.
     * Make a standard field visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    addBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<void>;
    /**
     * Check if a standard field is visible on a board.
     * Check if a standard field is visible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    checkBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<void>;
    /**
     * Get a list of the standard fields visible on a board.
     * Get a list of standard fields visible on a board
     * @param board_id A board id.
     */
    getBoardVisibleStandardFields(board_id: number, options?: Configuration): Promise<InlineResponse20051>;
    /**
     * Make a standard field unvisible on a board.
     * Make a standard field unvisible on a board
     * @param board_id A board id.
     * @param field_name A field name.
     */
    removeBoardStandardField(board_id: number, field_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BoardsApiRequestFactory, responseProcessor?: BoardsApiResponseProcessor);
    /**
     * Create a new board.
     * Create a board
     * @param InlineObject5
     */
    createBoard(InlineObject5?: InlineObject5, options?: Configuration): Promise<InlineResponse20014>;
    /**
     * Delete a board.
     * Delete a board
     * @param board_id A board id.
     */
    deleteBoard(board_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single board.
     * Get the details of a single board
     * @param board_id A board id.
     */
    getBoard(board_id: number, options?: Configuration): Promise<InlineResponse20015>;
    /**
     * Get a list of boards matching some optional criteria.
     * Get a list of boards
     * @param board_ids A list of the board ids that you want to get.
     * @param workspace_ids A list of the workspace ids holding the boards that you want to get.
     * @param is_archived When set to 0 you will only get non-archived boards. When set to 1 you will only get archived boards.
     * @param if_assigned When set to 1 you will only get boards to which you are assigned.
     * @param fields A list of fields that you want in the response. The allowed fields are: board_id, workspace_id, is_archived, name and description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: workflows, settings and structure.
     */
    getBoards(board_ids?: Array<number>, workspace_ids?: Array<number>, is_archived?: 0 | 1, if_assigned?: 0 | 1, fields?: Array<'board_id' | 'workspace_id' | 'is_archived' | 'name' | 'description'>, expand?: Array<'workflows' | 'settings' | 'structure'>, options?: Configuration): Promise<InlineResponse20013>;
    /**
     * Update a board.
     * Update a board
     * @param board_id A board id.
     * @param InlineObject6
     */
    updateBoard(board_id: number, InlineObject6?: InlineObject6, options?: Configuration): Promise<InlineResponse20015>;
}
export declare class PromiseBusinessRuleExecutionHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BusinessRuleExecutionHistoryApiRequestFactory, responseProcessor?: BusinessRuleExecutionHistoryApiResponseProcessor);
    /**
     * Get a list of business rule executions matching some optional criteria.
     * Get a list of business rule executions
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistory(business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse20055>;
}
export declare class PromiseCardAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardAttachmentsApiRequestFactory, responseProcessor?: CardAttachmentsApiResponseProcessor);
    /**
     * Add a card's attachment.
     * Add a card's attachment
     * @param card_id A card id.
     * @param CardAttachmentCreateRequest
     */
    addCardAttachment(card_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment for a card.
     * Delete an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card.
     * Get the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardAttachment(card_id: number, attachment_id: number, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a card's attachments.
     * Get a card's attachments
     * @param card_id A card id.
     */
    getCardAttachments(card_id: number, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card.
     * Update the details of an attachment for a card
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardAttachment(card_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Promise<void | InlineResponse20062>;
}
export declare class PromiseCardBlockReasonApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardBlockReasonApiRequestFactory, responseProcessor?: CardBlockReasonApiResponseProcessor);
    /**
     * Check if a card is blocked and for what reason.
     * Get a card's block reason
     * @param card_id A card id.
     */
    getCardBlockReason(card_id: number, options?: Configuration): Promise<InlineResponse20092>;
    /**
     * Block a card or change its block reason.
     * Block a card
     * @param card_id A card id.
     * @param InlineObject38
     */
    setCardBlockReason(card_id: number, InlineObject38?: InlineObject38, options?: Configuration): Promise<void>;
    /**
     * Unblock a card.
     * Unblock a card
     * @param card_id A card id.
     */
    unblockCard(card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardCoOwnersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCoOwnersApiRequestFactory, responseProcessor?: CardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card.
     * Add a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a co-owner is one for the card.
     * Check if a co-owner is one for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a card's co-owners.
     * Get a card's co-owners
     * @param card_id A card id.
     */
    getCardCoOwners(card_id: number, options?: Configuration): Promise<InlineResponse20095>;
    /**
     * Remove a user as a co-owner for a card.
     * Remove a user as a co-owner for a card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardCoOwner(card_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardCommentAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCommentAttachmentsApiRequestFactory, responseProcessor?: CardCommentAttachmentsApiResponseProcessor);
    /**
     * Add a card comment's attachment.
     * Add a card comment's attachment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentAttachmentCreateRequest
     */
    addCarCommentAttachment(card_id: number, comment_id: number, CommentAttachmentCreateRequest?: CommentAttachmentCreateRequest, options?: Configuration): Promise<InlineResponse200197>;
    /**
     * Delete an attachment for a card comment.
     * Delete an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    deleteCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card comment.
     * Get the details of an attachment for a card comment
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param attachment_id A attachment id.
     */
    getCardCommentAttachment(card_id: number, comment_id: number, attachment_id: number, options?: Configuration): Promise<void | InlineResponse20098>;
    /**
     * Get a card comment's attachments.
     * Get a card comment's attachments
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardCommentAttachments(card_id: number, comment_id: number, options?: Configuration): Promise<InlineResponse200196>;
}
export declare class PromiseCardCommentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCommentsApiRequestFactory, responseProcessor?: CardCommentsApiResponseProcessor);
    /**
     * Add a comment to a card.
     * Add a comment to a card
     * @param card_id A card id.
     * @param CommentCreateRequest
     */
    addCardComment(card_id: number, CommentCreateRequest?: CommentCreateRequest, options?: Configuration): Promise<InlineResponse20097>;
    /**
     * Delete a comment for a card.
     * Delete a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    deleteCardComment(card_id: number, comment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a comment for a card.
     * Get the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     */
    getCardComment(card_id: number, comment_id: number, options?: Configuration): Promise<InlineResponse20097>;
    /**
     * Get a card's comments.
     * Get a card's comments
     * @param card_id A card id.
     */
    getCardComments(card_id: number, options?: Configuration): Promise<InlineResponse20096>;
    /**
     * Update the details of a comment for a card.
     * Update the details of a comment for a card
     * @param card_id A card id.
     * @param comment_id A comment id.
     * @param CommentUpdateRequest
     */
    updateCardComment(card_id: number, comment_id: number, CommentUpdateRequest?: CommentUpdateRequest, options?: Configuration): Promise<void | InlineResponse20097>;
}
export declare class PromiseCardCustomFieldContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card.
     * Add a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a contributor for a custom field for a card.
     * Check if a user is a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a card.
     * Get a list of the default contributors for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldContributors(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card.
     * Remove a user as a contributor for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardCustomFieldContributor(card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardCustomFieldFilesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldFilesApiRequestFactory, responseProcessor?: CardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card.
     * Add a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldFileCreateRequest
     */
    addCardCustomFieldFile(card_id: number, field_id: number, CardCustomFieldFileCreateRequest?: CardCustomFieldFileCreateRequest, options?: Configuration): Promise<void | InlineResponse200100>;
    /**
     * Delete a file for a custom field for a card.
     * Delete a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single file for a custom field for a card.
     * Get the details of a single file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardCustomFieldFile(card_id: number, field_id: number, id: number, options?: Configuration): Promise<InlineResponse200101>;
    /**
     * Get a list of the files for a custom field for a card.
     * Get a list of the files for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldFiles(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20099>;
    /**
     * Update a file for a custom field for a card.
     * Update a file for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param InlineObject40
     */
    updateCardCustomFieldFile(card_id: number, field_id: number, id: number, InlineObject40?: InlineObject40, options?: Configuration): Promise<void | InlineResponse200101>;
}
export declare class PromiseCardCustomFieldSelectedCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedCardsApiRequestFactory, responseProcessor?: CardCustomFieldSelectedCardsApiResponseProcessor);
    /**
     * Add or update a selected card for a custom field for a card.
     * Add or update a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     * @param InlineObject41
     */
    addOrUpdateCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, InlineObject41?: InlineObject41, options?: Configuration): Promise<void | InlineResponse200103>;
    /**
     * Get the details of a selected card for a custom field for a card.
     * Get the details of a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    getCardCustomFieldSelectedCard(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Promise<InlineResponse200103>;
    /**
     * Get a list of the selected cards for a custom field of type card picker for a card.
     * Get a list of the selected cards for a custom field of type card picker for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedCards(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse200102>;
    /**
     * Remove a selected card for a custom field for a card.
     * Remove a selected card for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param selected_card_id A selected card id.
     */
    removeCardCustomFieldSelectedCards(card_id: number, field_id: number, selected_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardCustomFieldSelectedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card.
     * Add or update a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param CardCustomFieldSelectedValueAddOrUpdateRequest
     */
    addOrUpdateCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, CardCustomFieldSelectedValueAddOrUpdateRequest?: CardCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Promise<InlineResponse20071 | void>;
    /**
     * Get the details of a selected value for a custom field for a card.
     * Get the details of a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardCustomFieldSelectedValue(card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card.
     * Get a list of the selected values for a custom field of type dropdown for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldSelectedValues(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse200104>;
    /**
     * Remove a selected value for a custom field for a card.
     * Remove a selected value for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardCustomFieldSelectedValues(card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardCustomFieldVotesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldVotesApiRequestFactory, responseProcessor?: CardCustomFieldVotesApiResponseProcessor);
    /**
     * Delete your vote for a custom field for a card.
     * Delete your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    deleteMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the votes for a custom field for a card.
     * Get a list of the votes for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardCustomFieldVotes(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse200105>;
    /**
     * Get your vote for a custom field for a card.
     * Get your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getMyCardCustomFieldVote(card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse200106>;
    /**
     * Set your vote for a custom field for a card.
     * Set your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject42
     */
    setMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject42?: InlineObject42, options?: Configuration): Promise<void>;
    /**
     * Update your vote for a custom field for a card.
     * Update your vote for a custom field for a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param InlineObject43
     */
    updateMyCardCustomFieldVote(card_id: number, field_id: number, InlineObject43?: InlineObject43, options?: Configuration): Promise<InlineResponse200107>;
}
export declare class PromiseCardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardCustomFieldsApiRequestFactory, responseProcessor?: CardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card.
     * Add a custom field to a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardCustomFieldAddOrUpdateRequest
     */
    addCardCustomField(card_id: number, field_id: number, CardCustomFieldAddOrUpdateRequest?: CardCustomFieldAddOrUpdateRequest, options?: Configuration): Promise<void>;
    /**
     * Remove a custom field from a card.
     * Remove a custom field from a card
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardCustomField(card_id: number, field_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardOutcomeCheckpointsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCheckpointsApiRequestFactory, responseProcessor?: CardOutcomeCheckpointsApiResponseProcessor);
    /**
     * Add a card outcome's checkpoint.
     * Add a card outcome's checkpoint
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeCheckpointCreateRequest
     */
    addCardOutcomeCheckpoint(card_id: number, outcome_id: number, CardOutcomeCheckpointCreateRequest?: CardOutcomeCheckpointCreateRequest, options?: Configuration): Promise<InlineResponse200113>;
    /**
     * Delete a checkpoint for a card outcome.
     * Delete a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    deleteCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a checkpoint for a card outcome.
     * Get the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     */
    getCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, options?: Configuration): Promise<void | InlineResponse200113>;
    /**
     * Get a card outcome's checkpoints.
     * Get a card outcome's checkpoints
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCheckpoints(card_id: number, outcome_id: number, options?: Configuration): Promise<InlineResponse200112>;
    /**
     * Update the details of a checkpoint for a card outcome.
     * Update the details of a checkpoint for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param checkpoint_id A checkpoint id.
     * @param CardOutcomeCheckpointUpdateRequest
     */
    updateCardOutcomeCheckpoint(card_id: number, outcome_id: number, checkpoint_id: number, CardOutcomeCheckpointUpdateRequest?: CardOutcomeCheckpointUpdateRequest, options?: Configuration): Promise<InlineResponse200113>;
}
export declare class PromiseCardOutcomeCurrentValueApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeCurrentValueApiRequestFactory, responseProcessor?: CardOutcomeCurrentValueApiResponseProcessor);
    /**
     * Get the details of a current value for a card outcome.
     * Get the details of a current value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeCurrentValue(card_id: number, outcome_id: number, options?: Configuration): Promise<InlineResponse200114>;
}
export declare class PromiseCardOutcomeValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomeValuesApiRequestFactory, responseProcessor?: CardOutcomeValuesApiResponseProcessor);
    /**
     * Add a card outcome's value.
     * Add a card outcome's value
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeValueCreateRequest
     */
    addCardOutcomeValue(card_id: number, outcome_id: number, CardOutcomeValueCreateRequest?: CardOutcomeValueCreateRequest, options?: Configuration): Promise<InlineResponse200114>;
    /**
     * Delete a value for a card outcome.
     * Delete a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    deleteCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a value for a card outcome.
     * Get the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     */
    getCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, options?: Configuration): Promise<void | InlineResponse200115>;
    /**
     * Get a card outcome's values.
     * Get a card outcome's values
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcomeValues(card_id: number, outcome_id: number, options?: Configuration): Promise<InlineResponse200114>;
    /**
     * Update the details of a value for a card outcome.
     * Update the details of a value for a card outcome
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param value_id A value id.
     * @param CardOutcomeValueUpdateRequest
     */
    updateCardOutcomeValue(card_id: number, outcome_id: number, value_id: number, CardOutcomeValueUpdateRequest?: CardOutcomeValueUpdateRequest, options?: Configuration): Promise<InlineResponse200115>;
}
export declare class PromiseCardOutcomesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardOutcomesApiRequestFactory, responseProcessor?: CardOutcomesApiResponseProcessor);
    /**
     * Add an outcome to a card.
     * Add an outcome to a card
     * @param card_id A card id.
     * @param CardOutcomeCreateRequest
     */
    addCardOutcome(card_id: number, CardOutcomeCreateRequest?: CardOutcomeCreateRequest, options?: Configuration): Promise<InlineResponse200110>;
    /**
     * Delete an outcome for a card.
     * Delete an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    deleteCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an outcome for a card.
     * Get the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     */
    getCardOutcome(card_id: number, outcome_id: number, options?: Configuration): Promise<InlineResponse200111>;
    /**
     * Get a card's outcomes.
     * Get a card's outcomes
     * @param card_id A card id.
     */
    getCardOutcomes(card_id: number, options?: Configuration): Promise<InlineResponse200109>;
    /**
     * Update the details of an outcome for a card.
     * Update the details of an outcome for a card
     * @param card_id A card id.
     * @param outcome_id An outcome id.
     * @param CardOutcomeUpdateRequest
     */
    updateCardOutcome(card_id: number, outcome_id: number, CardOutcomeUpdateRequest?: CardOutcomeUpdateRequest, options?: Configuration): Promise<void | InlineResponse200111>;
}
export declare class PromiseCardRevisionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardRevisionsApiRequestFactory, responseProcessor?: CardRevisionsApiResponseProcessor);
    /**
     * Get a specific revision of the card.
     * Get a specific revision of the card
     * @param card_id A card id.
     * @param revision A revision number.
     */
    getCardRevision(card_id: number, revision: number, options?: Configuration): Promise<InlineResponse200121>;
    /**
     * Get a list of the revisions of the card and the date and time they were replaced.
     * Get a list of revisions of the card
     * @param card_id A card id.
     */
    getCardRevisions(card_id: number, options?: Configuration): Promise<InlineResponse200120>;
}
export declare class PromiseCardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardStickersApiRequestFactory, responseProcessor?: CardStickersApiResponseProcessor);
    /**
     * Add a sticker to a card.
     * Add a sticker to a card
     * @param card_id A card id.
     * @param InlineObject47
     */
    addCardSticker(card_id: number, InlineObject47?: InlineObject47, options?: Configuration): Promise<void | InlineResponse200123>;
    /**
     * Get a list of the stickers added to a card. The stickers are listed in the order in which they were added.
     * Get a list of card stickers
     * @param card_id A card id.
     */
    getCardStickers(card_id: number, options?: Configuration): Promise<InlineResponse200122>;
    /**
     * Remove a sticker from a card.
     * Remove a sticker from a card
     * @param card_id A card id.
     * @param id A relationship id.
     */
    removeCardSticker(card_id: number, id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardSubtaskAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add a card subtask's attachment.
     * Add a card subtask's attachment
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardAttachmentCreateRequest
     */
    addCarSubtaskAttachment(card_id: number, subtask_id: number, CardAttachmentCreateRequest?: CardAttachmentCreateRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment for a card subtask.
     * Delete an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment for a card subtask.
     * Get the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<void | InlineResponse20062>;
    /**
     * Get a card subtask's attachments.
     * Get a card subtask's attachments
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtaskAttachments(card_id: number, subtask_id: number, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment for a card subtask.
     * Update the details of an attachment for a card subtask
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardAttachmentUpdateRequest
     */
    updateCardSubtaskAttachment(card_id: number, subtask_id: number, attachment_id: number, CardAttachmentUpdateRequest?: CardAttachmentUpdateRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export declare class PromiseCardSubtasksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardSubtasksApiRequestFactory, responseProcessor?: CardSubtasksApiResponseProcessor);
    /**
     * Add a subtask to a card.
     * Add a subtask to a card
     * @param card_id A card id.
     * @param SubtaskCreateRequest
     */
    addCardSubtask(card_id: number, SubtaskCreateRequest?: SubtaskCreateRequest, options?: Configuration): Promise<InlineResponse200125>;
    /**
     * Delete a subtask for a card.
     * Delete a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a subtask for a card.
     * Get the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardSubtask(card_id: number, subtask_id: number, options?: Configuration): Promise<InlineResponse200125>;
    /**
     * Get a card's subtasks.
     * Get a card's subtasks
     * @param card_id A card id.
     */
    getCardSubtasks(card_id: number, options?: Configuration): Promise<InlineResponse200124>;
    /**
     * Update the details of a subtask for a card.
     * Update the details of a subtask for a card
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param SubtaskUpdateRequest
     */
    updateCardSubtask(card_id: number, subtask_id: number, SubtaskUpdateRequest?: SubtaskUpdateRequest, options?: Configuration): Promise<void | InlineResponse200125>;
}
export declare class PromiseCardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTagsApiRequestFactory, responseProcessor?: CardTagsApiResponseProcessor);
    /**
     * Add a tag to a card.
     * Add a tag to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is added to a card.
     * Check if a tag is added to a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the tags added to a card. The tags are listed in the order in which they were added.
     * Get a list of card tags
     * @param card_id A card id.
     */
    getCardTags(card_id: number, options?: Configuration): Promise<InlineResponse200127>;
    /**
     * Remove a tag from a card.
     * Remove a tag from a card
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTag(card_id: number, tag_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a card for the card template.
     * Add an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCardAttachment(template_id: number, card_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment of a card for the card template.
     * Delete an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment of a card for the card template.
     * Get the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a list of attachments of a card for the card template.
     * Get a list of attachments of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardAttachments(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment of a card for the card template.
     * Update the details of an attachment of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardAttachment(template_id: number, card_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export declare class PromiseCardTemplateCardChildCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardChildCardsApiRequestFactory, responseProcessor?: CardTemplateCardChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card for the card template.
     * Make a card a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject26
     */
    addCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, InlineObject26?: InlineObject26, options?: Configuration): Promise<InlineResponse20065>;
    /**
     * Check if a card is a child of a given card for the card template and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of child cards of a card for the card template.
     * Get a list of child cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardChildCards(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20063>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    removeCardTemplateCardChildCard(template_id: number, card_id: number, child_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardCoOwnersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCoOwnersApiRequestFactory, responseProcessor?: CardTemplateCardCoOwnersApiResponseProcessor);
    /**
     * Add a user as a co-owner for a card for the card template.
     * Add a user as a co-owner for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a co-owner is one for the card for the card template.
     * Check if a co-owner is one for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of co-owners of a card for the card template.
     * Get a list of co-owners of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardCoOwners(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20066>;
    /**
     * Remove a user as a co-owner for the card for the card template.
     * Remove a user as a co-owner for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCoOwner(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardCustomFieldContributorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldContributorsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldContributorsApiResponseProcessor);
    /**
     * Add a user as a contributor for a custom field for a card for the card template.
     * Add a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    addCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a contributor for a custom field for a card for the card template.
     * Check if a user is a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    checkCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the default contributors for a custom field for a card for the card template.
     * Get a list of the default contributors for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldContributors(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20029>;
    /**
     * Remove a user as a contributor for a custom field for a card  for the card template.
     * Remove a user as a contributor for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param user_id A user id.
     */
    removeCardTemplateCardCustomFieldContributor(template_id: number, card_id: number, field_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardCustomFieldFilesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldFilesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldFilesApiResponseProcessor);
    /**
     * Add a file for a custom field for a card for the card template.
     * Add a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldFileCreateRequest
     */
    addCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldFileCreateRequest?: CardTemplateCustomFieldFileCreateRequest, options?: Configuration): Promise<InlineResponse20068>;
    /**
     * Delete a file for a custom field for a card for the card template.
     * Delete a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    deleteCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single file for a custom field for a card for the card template.
     * Get the details of a single file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     */
    getCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, options?: Configuration): Promise<InlineResponse20068>;
    /**
     * Get a list of the files for a custom field for a card for the card template.
     * Get a list of the files for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldFiles(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20067>;
    /**
     * Update a file for a custom field for a card for the card template.
     * Update a file for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param id A file id.
     * @param CardTemplateCustomFieldFileUpdateRequest
     */
    updateCardTemplateCardCustomFieldFile(template_id: number, card_id: number, field_id: number, id: number, CardTemplateCustomFieldFileUpdateRequest?: CardTemplateCustomFieldFileUpdateRequest, options?: Configuration): Promise<InlineResponse20068>;
}
export declare class PromiseCardTemplateCardCustomFieldSelectedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldSelectedValuesApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldSelectedValuesApiResponseProcessor);
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldSelectedValueAddOrUpdateRequest
     */
    addCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldSelectedValueAddOrUpdateRequest?: CardTemplateCustomFieldSelectedValueAddOrUpdateRequest, options?: Configuration): Promise<InlineResponse20070>;
    /**
     * Add or update a selected value for a custom field for a card for the card template.
     * Add or update a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject27
     */
    addOrUpdateCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, InlineObject27?: InlineObject27, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get the details of a selected value for a custom field for a card for the card template.
     * Get the details of a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCardTemplateCardCustomFieldSelectedValue(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<InlineResponse20071>;
    /**
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template.
     * Get a list of the selected values for a custom field of type dropdown for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    getCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<InlineResponse20069>;
    /**
     * Remove a selected value for a custom field for a card for the card template.
     * Remove a selected value for a custom field for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    removeCardTemplateCardCustomFieldSelectedValues(template_id: number, card_id: number, field_id: number, value_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardCustomFieldsApiRequestFactory, responseProcessor?: CardTemplateCardCustomFieldsApiResponseProcessor);
    /**
     * Add a custom field to a card for the card template.
     * Add a custom field to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     * @param CardTemplateCustomFieldAddOrUpdateRequest
     */
    addCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, CardTemplateCustomFieldAddOrUpdateRequest?: CardTemplateCustomFieldAddOrUpdateRequest, options?: Configuration): Promise<void>;
    /**
     * Remove a custom field from a card for the card template.
     * Remove a custom field from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param field_id A custom field id.
     */
    removeCardTemplateCardCustomField(template_id: number, card_id: number, field_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardParentCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardParentCardsApiRequestFactory, responseProcessor?: CardTemplateCardParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card for the card template.
     * Make a card a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject28
     */
    addCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, InlineObject28?: InlineObject28, options?: Configuration): Promise<InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card for the card template and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of parent cards of a card for the card template.
     * Get a list of parent cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardParentCards(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20072>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    removeCardTemplateCardParentCard(template_id: number, card_id: number, parent_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardPredecessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardPredecessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardPredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card for the card template.
     * Make a card a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject29
     */
    addCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, InlineObject29?: InlineObject29, options?: Configuration): Promise<InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card for the card template and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of predecessor cards of a card for the card template.
     * Get a list of predecessor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardPredecessorCards(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20074>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removeCardTemplateCardPredecessorCard(template_id: number, card_id: number, predecessor_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardRelativeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardRelativeCardsApiRequestFactory, responseProcessor?: CardTemplateCardRelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card for the card template.
     * Make a card a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject30
     */
    addCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, InlineObject30?: InlineObject30, options?: Configuration): Promise<InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card for the card template and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of relative cards of a card for the card template.
     * Get a list of relative cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardRelativeCards(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20076>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeCardTemplateCardRelatedCard(template_id: number, card_id: number, related_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardStickersApiRequestFactory, responseProcessor?: CardTemplateCardStickersApiResponseProcessor);
    /**
     * Add a sticker of a card for the card template.
     * Add a sticker of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param InlineObject31
     */
    addCardTemplateCardSticker(template_id: number, card_id: number, InlineObject31?: InlineObject31, options?: Configuration): Promise<InlineResponse20079>;
    /**
     * Get a list of stickers of a card for the card template. The stickers are listed in the order in which they were added.
     * Get a list of stickers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardStickers(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20078>;
    /**
     * Remove a sticker from a card for the card template.
     * Remove a sticker from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param sticker_id A sticker id.
     */
    removeCardTemplateCardSticker(template_id: number, card_id: number, sticker_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardSubtaskAttachmentsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtaskAttachmentsApiRequestFactory, responseProcessor?: CardTemplateCardSubtaskAttachmentsApiResponseProcessor);
    /**
     * Add an attachment of a subtask of a card for the card template.
     * Add an attachment of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateAttachmentCreateRequest
     */
    addCardTemplateCarSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, CardTemplateAttachmentCreateRequest?: CardTemplateAttachmentCreateRequest, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Delete an attachment of a subtask for a card for the card template.
     * Delete an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    deleteCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of an attachment of a subtask for a card for the card template.
     * Get the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     */
    getCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, options?: Configuration): Promise<InlineResponse20062>;
    /**
     * Get a list of attachments of a subtask of a card for the card template.
     * Get a list of attachments of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtaskAttachments(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<InlineResponse20061>;
    /**
     * Update the details of an attachment of a subtask for a card for the card template.
     * Update the details of an attachment of a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param attachment_id A attachment id.
     * @param CardTemplateAttachmentUpdateRequest
     */
    updateCardTemplateCardSubtaskAttachment(template_id: number, card_id: number, subtask_id: number, attachment_id: number, CardTemplateAttachmentUpdateRequest?: CardTemplateAttachmentUpdateRequest, options?: Configuration): Promise<InlineResponse20062>;
}
export declare class PromiseCardTemplateCardSubtasksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSubtasksApiRequestFactory, responseProcessor?: CardTemplateCardSubtasksApiResponseProcessor);
    /**
     * Add a subtask of a card for the card template.
     * Add a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateSubtaskCreateRequest
     */
    addCardTemplateCardSubtask(template_id: number, card_id: number, CardTemplateSubtaskCreateRequest?: CardTemplateSubtaskCreateRequest, options?: Configuration): Promise<InlineResponse20081>;
    /**
     * Delete a subtask for a card for the card template.
     * Delete a subtask for a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    deleteCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a subtask of a card for the card template.
     * Get the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     */
    getCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, options?: Configuration): Promise<InlineResponse20081>;
    /**
     * Get a list of subtasks of a card for the card template.
     * Get a list of subtasks of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSubtasks(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20080>;
    /**
     * Update the details of a subtask of a card for the card template.
     * Update the details of a subtask of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param subtask_id A subtask id.
     * @param CardTemplateSubtaskUpdateRequest
     */
    updateCardTemplateCardSubtask(template_id: number, card_id: number, subtask_id: number, CardTemplateSubtaskUpdateRequest?: CardTemplateSubtaskUpdateRequest, options?: Configuration): Promise<InlineResponse20081>;
}
export declare class PromiseCardTemplateCardSuccessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardSuccessorCardsApiRequestFactory, responseProcessor?: CardTemplateCardSuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card for the card template.
     * Make a card a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject32
     */
    addCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, InlineObject32?: InlineObject32, options?: Configuration): Promise<InlineResponse20083>;
    /**
     * Check if a card is a successor of a given card for the card template and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of successor cards of a card for the card template.
     * Get a list of successor cards of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardSuccessorCards(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20082>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param template_id A template id.
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeCardTemplateCardSuccessorCard(template_id: number, card_id: number, successor_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardTagsApiRequestFactory, responseProcessor?: CardTemplateCardTagsApiResponseProcessor);
    /**
     * Add a tag to a card for the card template.
     * Add a tag to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    addCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a tag is added to a card for the card template.
     * Check if a tag is added to a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    checkCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of tags of a card for the card template. The tags are listed in the order in which they were added.
     * Get a list of tags of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardTags(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20084>;
    /**
     * Remove a tag from a card for the card template.
     * Remove a tag from a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param tag_id A tag id.
     */
    removeCardTemplateCardTag(template_id: number, card_id: number, tag_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardWatchersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardWatchersApiRequestFactory, responseProcessor?: CardTemplateCardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for a card for the card for the card template.
     * Make a user a watcher for a card for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check the user with a user id is a watcher for the card for the card template
     * Check the user with a user id is a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of watchers of a card for the card template.
     * Get a list of watchers of a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCardWatchers(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20085>;
    /**
     * Make a user not a watcher for the card for the card template.
     * Make a user not a watcher for the card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardTemplateCardWatcher(template_id: number, card_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardTemplateCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateCardsApiRequestFactory, responseProcessor?: CardTemplateCardsApiResponseProcessor);
    /**
     * Add a card to the card template.
     * Add a card to the card template
     * @param template_id A template id.
     * @param CardTemplateCardInExistingTemplateCreateRequest
     */
    addCardTemplateCard(template_id: number, CardTemplateCardInExistingTemplateCreateRequest?: CardTemplateCardInExistingTemplateCreateRequest, options?: Configuration): Promise<InlineResponse20060>;
    /**
     * Delete a card for the card template
     * Delete a card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    deleteCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card for the card template.
     * Get the details of a single card for the card template
     * @param template_id A template id.
     * @param card_id A card id.
     */
    getCardTemplateCard(template_id: number, card_id: number, options?: Configuration): Promise<InlineResponse20060>;
    /**
     * Get a list of cards for the card template.
     * Get a list of cards for the card template
     * @param template_id A template id.
     */
    getCardTemplateCards(template_id: number, options?: Configuration): Promise<InlineResponse20059>;
    /**
     * Update a card of the card template.
     * Update a card of the card template
     * @param template_id A template id.
     * @param card_id A card id.
     * @param CardTemplateCardUpdateRequest
     */
    updateCardTemplateCard(template_id: number, card_id: number, CardTemplateCardUpdateRequest?: CardTemplateCardUpdateRequest, options?: Configuration): Promise<InlineResponse20060>;
}
export declare class PromiseCardTemplateHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplateHistoryApiRequestFactory, responseProcessor?: CardTemplateHistoryApiResponseProcessor);
    /**
     * Get a list of card templates creation, deletion, update events matching some optional criteria.
     * Get a list of card templates creation, deletion, update events
     * @param template_ids A list of the template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card template.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistory(template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse20058>;
}
export declare class PromiseCardTemplatesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTemplatesApiRequestFactory, responseProcessor?: CardTemplatesApiResponseProcessor);
    /**
     * Create a new card template.
     * Create a new card template
     * @param CardTemplateCreateRequest
     */
    createCardTemplate(CardTemplateCreateRequest?: CardTemplateCreateRequest, options?: Configuration): Promise<InlineResponse20057>;
    /**
     * Delete a card template.
     * Delete a card template
     * @param template_id A template id.
     */
    deleteCardTemplate(template_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card template.
     * Get the details of a single card template
     * @param template_id A template id.
     */
    getCardTemplate(template_id: number, options?: Configuration): Promise<InlineResponse20057>;
    /**
     * Get a list of card templates matching some optional criteria.
     * Get a list of card templates
     * @param template_ids A list of the card template ids that you want to get.
     * @param name Find a card template by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card templates. When set to 0 you will only get disabled card templates.
     * @param fields A list of fields that you want in the response. The allowed fields are: template_id, name, description, primary_template_card_id, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count and template_cards.
     */
    getCardTemplates(template_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'template_id' | 'name' | 'description' | 'primary_template_card_id' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'template_cards'>, options?: Configuration): Promise<InlineResponse20056>;
    /**
     * Update a card template.
     * Update a card template
     * @param template_id A template id.
     * @param CardTemplateUpdateRequest
     */
    updateCardTemplate(template_id: number, CardTemplateUpdateRequest?: CardTemplateUpdateRequest, options?: Configuration): Promise<InlineResponse20057>;
}
export declare class PromiseCardTypeBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeBoardsApiRequestFactory, responseProcessor?: CardTypeBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the card type is available.
     * Get a list of boards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeBoards(type_id: number, options?: Configuration): Promise<InlineResponse20011>;
}
export declare class PromiseCardTypeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeCardsApiRequestFactory, responseProcessor?: CardTypeCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the card type is available.
     * Get a list of cards where the card type is available
     * @param type_id A type id.
     */
    getCardTypeCards(type_id: number, options?: Configuration): Promise<InlineResponse20012>;
}
export declare class PromiseCardTypeHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypeHistoryApiRequestFactory, responseProcessor?: CardTypeHistoryApiResponseProcessor);
    /**
     * Get a list of card types creation, deletion, update events matching some optional criteria.
     * Get a list of card types creation, deletion, update events
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistory(type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse20088>;
}
export declare class PromiseCardTypesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardTypesApiRequestFactory, responseProcessor?: CardTypesApiResponseProcessor);
    /**
     * Create a new card type.
     * Create a card type
     * @param InlineObject33
     */
    createCardType(InlineObject33?: InlineObject33, options?: Configuration): Promise<InlineResponse20087>;
    /**
     * Delete a card type.
     * Delete a card type
     * @param type_id A type id.
     * @param replace_with_type_id The id of a card type with which to replace the one to be deleted on the cards using it.
     */
    deleteCardType(type_id: number, replace_with_type_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card type.
     * Get the details of a single card type
     * @param type_id A type id.
     */
    getCardType(type_id: number, options?: Configuration): Promise<InlineResponse20087>;
    /**
     * Get a list of card types matching some optional criteria.
     * Get a list of card types
     * @param type_ids A list of the card type ids that you want to get.
     * @param name Find a card type by its full name.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled card types. When set to 0 you will only get disabled card types.
     * @param fields A list of fields that you want in the response. The allowed fields are: type_id, icon_type, icon_id, name, description, color, card_color_sync, all_properties_are_locked, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards, board_count, card_ids, card_count and business_rules.
     */
    getCardTypes(type_ids?: Array<number>, name?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'type_id' | 'icon_type' | 'icon_id' | 'name' | 'description' | 'color' | 'card_color_sync' | 'all_properties_are_locked' | 'availability' | 'is_enabled'>, expand?: Array<'boards' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<InlineResponse20086>;
    /**
     * Update a card type.
     * Update a card type
     * @param type_id A type id.
     * @param InlineObject34
     */
    updateCardType(type_id: number, InlineObject34?: InlineObject34, options?: Configuration): Promise<InlineResponse20087>;
}
export declare class PromiseCardWatchedApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardWatchedApiRequestFactory, responseProcessor?: CardWatchedApiResponseProcessor);
    /**
     * Make a current user a watcher for the card.
     * Make a current user a watcher for the card
     * @param card_id A card id.
     */
    addCurrentUserForCardWatcher(card_id: number, options?: Configuration): Promise<void>;
    /**
     * Check current user is a watcher for the card
     * Check current user is a watcher for the card
     * @param card_id A card id.
     */
    checkCurrentUserIsCardWatcher(card_id: number, options?: Configuration): Promise<void>;
    /**
     * Make a current user not a watcher for the card.
     * Make a current user not a watcher for the card
     * @param card_id A card id.
     */
    removeCurrentUserCardWatcher(card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardWatchersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardWatchersApiRequestFactory, responseProcessor?: CardWatchersApiResponseProcessor);
    /**
     * Make a user a watcher for the card.
     * Make a user a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    addCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check the user with a user id is a watcher for the card
     * Check the user with a user id is a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    checkUserIsCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a card's watchers.
     * Get a card's watchers
     * @param card_id A card id.
     */
    getCardWatchers(card_id: number, options?: Configuration): Promise<InlineResponse200128>;
    /**
     * Make a user not a watcher for the card.
     * Make a user not a watcher for the card
     * @param card_id A card id.
     * @param user_id A user id.
     */
    removeCardWatcher(card_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsApiRequestFactory, responseProcessor?: CardsApiResponseProcessor);
    /**
     * Delete a card.
     * Delete a card
     * @param card_id A card id.
     * @param exceeding_reason Exceeding reason.
     */
    deleteCard(card_id: number, exceeding_reason?: string, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single card.
     * Get the details of a single card
     * @param card_id A card id.
     */
    getCard(card_id: number, options?: Configuration): Promise<InlineResponse20091>;
    /**
     * Get a list of cards matching some optional criteria.
     * Get a list of cards
     * @param card_ids A list of the card ids that you want to get.
     * @param board_ids A list of the board ids for which you want to get the results.
     * @param workflow_ids A list of the workflows ids for which you want to get the results.
     * @param state The state value of cards that you want to get. By default it&#39;s the active state.
     * @param created_from The first date and time of created cards for which you want results.
     * @param created_from_date The first date of created cards for which you want results.
     * @param created_to The last date and time of created cards for which you want results.
     * @param created_to_date The last date of created cards for which you want results.
     * @param last_modified_from The first date and time of last modified cards for which you want results.
     * @param last_modified_from_date The first date of last modified cards for which you want results.
     * @param last_modified_to The last date and time of last modified cards for which you want results.
     * @param last_modified_to_date The last date of last modified cards for which you want results.
     * @param in_current_position_since_from The first date and time of in current position since cards for which you want results.
     * @param in_current_position_since_from_date The first date of in current position since cards for which you want results.
     * @param in_current_position_since_to The last date and time of in current position since cards for which you want results.
     * @param in_current_position_since_to_date The last date of in current position since cards for which you want results.
     * @param is_blocked When set to 1 you will only get blocked cards. When set to 0 you will only get non blocked cards.
     * @param custom_ids A list of the custom ids for which you want to get the results.
     * @param owner_user_ids A list of the user ids of assignees for which you want to get the results.
     * @param type_ids A list of the type ids for which you want to get the results.
     * @param sizes A list of the sizes for which you want to get the results.
     * @param priorities A list of the priorities for which you want to get the results.
     * @param colors A list of the colors for which you want to get the results.
     * @param deadline_from The first date and time of deadline cards for which you want results.
     * @param deadline_from_date The first date of deadline cards for which you want results.
     * @param deadline_to The last date and time of deadline cards for which you want results.
     * @param deadline_to_date The last date of deadline cards for which you want results.
     * @param column_ids A list of the column ids for which you want to get the results.
     * @param lane_ids A list of the lane ids for which you want to get the results.
     * @param sections A list of the sections for which you want to get the results.
     * @param last_column_ids A list of the last column ids for which you want to get the results.
     * @param last_lane_ids A list of the last lane ids for which you want to get the results.
     * @param version_ids A list of the version ids for which you want to get the results.
     * @param archived_from The first date and time of archived cards for which you want results.
     * @param archived_from_date The first date of archived cards for which you want results.
     * @param archived_to The last date and time of archived cards for which you want results.
     * @param archived_to_date The last date of archived cards for which you want results.
     * @param reason_ids A list of the reasons ids for which you want to get the results.
     * @param discarded_from The first date and time of discarded cards for which you want results.
     * @param discarded_from_date The first date of discarded cards for which you want results.
     * @param discarded_to The last date and time of discarded cards for which you want results.
     * @param discarded_to_date The last date of discarded cards for which you want results.
     * @param include_logged_time_for_subtasks Controls whether this include logged times for subtasks.
     * @param include_logged_time_for_child_cards Controls whether this include logged times for child cards.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     * @param fields A list of fields that you want in the response. The allowed fields are: card_id, title, description, custom_id, owner_user_id, type_id, size, priority, color, deadline, reporter, created_at, revision, last_modified, in_current_position_since, board_id, workflow_id, column_id, lane_id, section, position, last_column_id, last_lane_id, version_id, archived_at, reason_id, discard_comment, discarded_at, is_blocked, block_reason, current_block_time, current_logged_time, current_cycle_time, child_card_stats, finished_subtask_count, unfinished_subtask_count and comment_count.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.
     */
    getCards(card_ids?: Array<number>, board_ids?: Array<number>, workflow_ids?: Array<number>, state?: 'active' | 'archived' | 'discarded', created_from?: Date, created_from_date?: Date, created_to?: Date, created_to_date?: Date, last_modified_from?: Date, last_modified_from_date?: Date, last_modified_to?: Date, last_modified_to_date?: Date, in_current_position_since_from?: Date, in_current_position_since_from_date?: Date, in_current_position_since_to?: Date, in_current_position_since_to_date?: Date, is_blocked?: 0 | 1, custom_ids?: Array<string>, owner_user_ids?: Array<number>, type_ids?: Array<number>, sizes?: Array<number>, priorities?: Array<number>, colors?: Array<string>, deadline_from?: Date, deadline_from_date?: Date, deadline_to?: Date, deadline_to_date?: Date, column_ids?: Array<number>, lane_ids?: Array<number>, sections?: Array<number>, last_column_ids?: Array<number>, last_lane_ids?: Array<number>, version_ids?: Array<number>, archived_from?: Date, archived_from_date?: Date, archived_to?: Date, archived_to_date?: Date, reason_ids?: Array<number>, discarded_from?: Date, discarded_from_date?: Date, discarded_to?: Date, discarded_to_date?: Date, include_logged_time_for_subtasks?: 0 | 1, include_logged_time_for_child_cards?: 0 | 1, page?: number, per_page?: number, fields?: Array<'card_id' | 'title' | 'description' | 'custom_id' | 'owner_user_id' | 'type_id' | 'size' | 'priority' | 'color' | 'deadline' | 'reporter' | 'created_at' | 'revision' | 'last_modified' | 'in_current_position_since' | 'board_id' | 'workflow_id' | 'column_id' | 'lane_id' | 'section' | 'position' | 'last_column_id' | 'last_lane_id' | 'version_id' | 'archived_at' | 'reason_id' | 'discard_comment' | 'discarded_at' | 'is_blocked' | 'block_reason' | 'current_block_time' | 'current_logged_time' | 'current_cycle_time' | 'child_card_stats' | 'finished_subtask_count' | 'unfinished_subtask_count' | 'comment_count'>, expand?: Array<'custom_fields' | 'stickers' | 'tag_ids' | 'co_owner_ids' | 'watcher_ids' | 'attachments' | 'checked_column_checklist_items' | 'initiative_details' | 'annotations' | 'subtasks' | 'linked_cards' | 'transitions' | 'block_times' | 'logged_times' | 'logged_times_for_child_cards' | 'lead_time_per_column' | 'outcomes' | 'outcome_current_values'>, options?: Configuration): Promise<InlineResponse20089>;
}
export declare class PromiseCardsCreateManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsCreateManyApiRequestFactory, responseProcessor?: CardsCreateManyApiResponseProcessor);
    /**
     * Create many cards.
     * Create many cards
     * @param InlineObject35
     */
    createManyCards(InlineObject35?: InlineObject35, options?: Configuration): Promise<InlineResponse20090>;
}
export declare class PromiseCardsDeleteManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsDeleteManyApiRequestFactory, responseProcessor?: CardsDeleteManyApiResponseProcessor);
    /**
     * Delete many cards.
     * Delete many cards
     * @param InlineObject36
     */
    deleteManyCards(InlineObject36?: InlineObject36, options?: Configuration): Promise<void>;
}
export declare class PromiseCardsUpdateManyApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CardsUpdateManyApiRequestFactory, responseProcessor?: CardsUpdateManyApiResponseProcessor);
    /**
     * Update many cards.
     * Update many cards
     * @param InlineObject37
     */
    updateManyCards(InlineObject37?: InlineObject37, options?: Configuration): Promise<InlineResponse20090>;
}
export declare class PromiseCellLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CellLimitsApiRequestFactory, responseProcessor?: CellLimitsApiResponseProcessor);
    /**
     * Get a list of the cell limits for a specified board.
     * Get a list of cell limits
     * @param board_id A board id.
     */
    getCellLimits(board_id: number, options?: Configuration): Promise<InlineResponse20020>;
    /**
     * Set a cell limit.
     * Set a cell limit
     * @param board_id A board id.
     * @param InlineObject7
     */
    setCellLimit(board_id: number, InlineObject7?: InlineObject7, options?: Configuration): Promise<InlineResponse20021>;
}
export declare class PromiseCheckSPFRecordApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CheckSPFRecordApiRequestFactory, responseProcessor?: CheckSPFRecordApiResponseProcessor);
    /**
     * Check if a domain has a valid SPF record including mail.kanbanize.com.
     * Check if the SPF record of a domain includes mail.kanbanize.com
     * @param InlineObject49
     */
    checkSPFRecord(InlineObject49?: InlineObject49, options?: Configuration): Promise<InlineResponse200129>;
}
export declare class PromiseChildCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ChildCardsApiRequestFactory, responseProcessor?: ChildCardsApiResponseProcessor);
    /**
     * Make a card a child of a given card.
     * Make a card a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param InlineObject39
     */
    addChildCard(card_id: number, child_card_id: number, InlineObject39?: InlineObject39, options?: Configuration): Promise<void | InlineResponse20065>;
    /**
     * Check if a card is a child of a given card and get its position in the parent's list of linked cards.
     * Check if a card is a child of a given card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     */
    checkChildCard(card_id: number, child_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of child cards of a given card and the child cards of those cards too.
     * Get a list of child cards including their child cards too
     * @param card_id A card id.
     */
    getChildCardGraph(card_id: number, options?: Configuration): Promise<InlineResponse20093>;
    /**
     * Get a list of the child cards of a given card.
     * Get a list of child cards
     * @param card_id A card id.
     */
    getChildCards(card_id: number, options?: Configuration): Promise<InlineResponse20094>;
    /**
     * Remove the link between a parent card and a child card.
     * Remove the link between a parent card and a child card
     * @param card_id A card id.
     * @param child_card_id A child card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeChildCard(card_id: number, child_card_id: number, exceeding_reason?: string, options?: Configuration): Promise<void>;
}
export declare class PromiseColumnsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ColumnsApiRequestFactory, responseProcessor?: ColumnsApiResponseProcessor);
    /**
     * Create a new column.
     * Create a column
     * @param board_id A board id.
     * @param InlineObject8
     */
    createColumn(board_id: number, InlineObject8?: InlineObject8, options?: Configuration): Promise<InlineResponse20023>;
    /**
     * Delete a column.
     * Delete a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param move_cards_to_column_id The id of a column to which to move the cards from the deleted column, if there are any.
     * @param move_metrics_to_column_id The id of a column to which to move the cycle time data associated with the deleted column, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteColumn(board_id: number, column_id: number, move_cards_to_column_id?: number, move_metrics_to_column_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single column.
     * Get the details of a single column
     * @param board_id A board id.
     * @param column_id A column id.
     */
    getColumn(board_id: number, column_id: number, options?: Configuration): Promise<InlineResponse20024>;
    /**
     * Get a list of the columns in a specified board.
     * Get a list of columns
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: column_id, workflow, section, parent_column_id, position, name, description, color, limit, cards_per_row and flow_type.
     */
    getColumns(board_id: number, fields?: Array<'column_id' | 'workflow_id' | 'section' | 'parent_column_id' | 'position' | 'name' | 'description' | 'color' | 'limit' | 'cards_per_row' | 'flow_type'>, options?: Configuration): Promise<InlineResponse20022>;
    /**
     * Update a column.
     * Update a column
     * @param board_id A board id.
     * @param column_id A column id.
     * @param InlineObject9
     */
    updateColumn(board_id: number, column_id: number, InlineObject9?: InlineObject9, options?: Configuration): Promise<InlineResponse20024>;
}
export declare class PromiseCompanyAddonTrialsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonTrialsApiRequestFactory, responseProcessor?: CompanyAddonTrialsApiResponseProcessor);
    /**
     * Get a possible addon trial status
     * Get a possible addon trial status
     * @param feature_id A feature id.
     */
    getAddonTrial(feature_id: number, options?: Configuration): Promise<InlineResponse2002>;
    /**
     * Get a list of all possible addon trial statuses
     * Get a list of all possible addon trial statuses
     */
    getAddonsTrials(options?: Configuration): Promise<InlineResponse2001>;
    /**
     * Start an addon trial
     * Start an addon trial
     * @param feature_id A feature id.
     */
    putAddonTrial(feature_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCompanyAddonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyAddonsApiRequestFactory, responseProcessor?: CompanyAddonsApiResponseProcessor);
    /**
     * Get a list of all possible addon
     * Get a list of all possible addons
     */
    getAddons(options?: Configuration): Promise<InlineResponse200>;
}
export declare class PromiseCompanyPlanTrialsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyPlanTrialsApiRequestFactory, responseProcessor?: CompanyPlanTrialsApiResponseProcessor);
    /**
     * Get a possible plan trial status
     * Get a possible plan trial status
     * @param plan_id A plan id.
     */
    getPlanTrial(plan_id: number, options?: Configuration): Promise<InlineResponse200162>;
    /**
     * Get a list of all possible plan trial statuses
     * Get a list of all possible plan trial statuses
     */
    getPlansTrials(options?: Configuration): Promise<InlineResponse200161>;
    /**
     * Start a plan trial
     * Start a plan trial
     * @param plan_id A plan id.
     */
    putPlanTrial(plan_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseCompanyPlansApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanyPlansApiRequestFactory, responseProcessor?: CompanyPlansApiResponseProcessor);
    /**
     * Get a list of all possible plan statuses
     * Get a list of all possible plan statuses
     */
    getPlans(options?: Configuration): Promise<InlineResponse200160>;
}
export declare class PromiseCompanySettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CompanySettingsApiRequestFactory, responseProcessor?: CompanySettingsApiResponseProcessor);
    /**
     * Get the details of a company setting and its value.
     * Get the details of a company setting and its value
     * @param setting_name A setting name.
     */
    getCompanySetting(setting_name: string, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all company settings and their values.
     * Get a list of all company settings and their values
     */
    getCompanySettings(options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of a company setting.
     * Remove the value of a company setting
     * @param setting_name A setting name.
     */
    removeCompanySetting(setting_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseCustomFieldAllowedValuesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldAllowedValuesApiRequestFactory, responseProcessor?: CustomFieldAllowedValuesApiResponseProcessor);
    /**
     * Create a new allowed value.
     * Create an allowed value
     * @param field_id A custom field id.
     * @param InlineObject50
     */
    createCustomFieldAllowedValue(field_id: number, InlineObject50?: InlineObject50, options?: Configuration): Promise<InlineResponse200132>;
    /**
     * Delete an allowed value.
     * Delete an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param replace_with_value_id The id of a value with which to replace the one to be deleted on the cards using it.
     */
    deleteCustomFieldAllowedValue(field_id: number, value_id: number, replace_with_value_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single allowed value.
     * Get the details of a single allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     */
    getCustomFieldAllowedValue(field_id: number, value_id: number, options?: Configuration): Promise<InlineResponse200132>;
    /**
     * Get a list of the allowed values of a custom field of type dropdown.
     * Get a list of the allowed values of a custom field of type dropdown
     * @param field_id A custom field id.
     */
    getCustomFieldAllowedValues(field_id: number, options?: Configuration): Promise<InlineResponse200131>;
    /**
     * Update an allowed value.
     * Update an allowed value
     * @param field_id A custom field id.
     * @param value_id A value id.
     * @param InlineObject51
     */
    updateCustomFieldAllowedValue(field_id: number, value_id: number, InlineObject51?: InlineObject51, options?: Configuration): Promise<InlineResponse200132>;
}
export declare class PromiseCustomFieldHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldHistoryApiRequestFactory, responseProcessor?: CustomFieldHistoryApiResponseProcessor);
    /**
     * Get a list of custom field management history events.
     * Get a list of custom field management history events.
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistory(field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200130>;
}
export declare class PromiseCustomFieldsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: CustomFieldsApiRequestFactory, responseProcessor?: CustomFieldsApiResponseProcessor);
    /**
     * Delete a custom field.
     * Delete a custom field
     * @param field_id A custom field id.
     */
    deleteCustomField(field_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseDashboardPageTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageTeamsApiRequestFactory, responseProcessor?: DashboardPageTeamsApiResponseProcessor);
    /**
     * Check if a team is added to a dashboard page.
     * Check if a team is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    checkDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the teams having access to a dashboard page.
     * Get a list of teams having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageTeams(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200135>;
    /**
     * Deny a team access to a dashboard page.
     * Deny a team access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param team_id A team id.
     */
    removeDashboardPageTeam(dashboard_page_id: number, team_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseDashboardPageUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageUsersApiRequestFactory, responseProcessor?: DashboardPageUsersApiResponseProcessor);
    /**
     * Check if a user is added to a dashboard page.
     * Check if a user is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    checkDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Promise<InlineResponse200137>;
    /**
     * Get a list of the users having access to a dashboard page.
     * Get a list of users having access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageUsers(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200136>;
    /**
     * Deny a user access to a dashboard page.
     * Deny a user access to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param user_id A user id.
     */
    removeDashboardPageUser(dashboard_page_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseDashboardPageWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPageWorkspacesApiRequestFactory, responseProcessor?: DashboardPageWorkspacesApiResponseProcessor);
    /**
     * Make a workspace available on a dashboard page.
     * Make a workspace available on a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    addDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a workspaces is added to a dashboard page.
     * Check if a workspace is added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the workspaces added to a dashboard page.
     * Get a list of workspaces added to a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200138>;
    /**
     * Remove a workspace from a dashboard page.
     * Remove a workspace from a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    removeDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseDashboardPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DashboardPagesApiRequestFactory, responseProcessor?: DashboardPagesApiResponseProcessor);
    /**
     * Create a new dashboard page.
     * Create a dashboard page
     * @param InlineObject52
     */
    createDashBoardPage(InlineObject52?: InlineObject52, options?: Configuration): Promise<InlineResponse200134>;
    /**
     * Delete a dashboard page.
     * Delete a dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    deleteDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single dashboard page.
     * Get the details of a single dashboard page
     * @param dashboard_page_id A dashboard page id.
     */
    getDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200134>;
    /**
     * Get a list of dashboard pages matching some optional criteria.
     * Get a list of dashboard pages
     * @param dashboard_page_ids A list of the dashboard page ids that you want to get.
     * @param fields A list of fields that you want in the response. The allowed fields are: dashboard_page_id and name.
     */
    getDashboardPages(dashboard_page_ids?: Array<number>, fields?: Array<'dashboard_page_id' | 'name'>, options?: Configuration): Promise<InlineResponse200133>;
    /**
     * Update a dashboard page.
     * Update a dashboard page
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject53
     */
    updateDashboardPage(dashboard_page_id: number, InlineObject53?: InlineObject53, options?: Configuration): Promise<InlineResponse200134>;
}
export declare class PromiseDiscardReasonBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonBoardsApiRequestFactory, responseProcessor?: DiscardReasonBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the discard reason is available.
     * Get a list of boards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonBoards(reason_id: number, options?: Configuration): Promise<InlineResponse20011>;
}
export declare class PromiseDiscardReasonCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonCardsApiRequestFactory, responseProcessor?: DiscardReasonCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the discard reason is available.
     * Get a list of cards where the discard reason is available
     * @param reason_id A discard reason id.
     */
    getDiscardReasonCards(reason_id: number, options?: Configuration): Promise<InlineResponse20012>;
}
export declare class PromiseDiscardReasonHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonHistoryApiRequestFactory, responseProcessor?: DiscardReasonHistoryApiResponseProcessor);
    /**
     * Get a list of discard reasons creation, deletion, update events matching some optional criteria.
     * Get a list of discard reasons creation, deletion, update events
     * @param reason_ids A list of the discard reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the discard reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistory(reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200141>;
}
export declare class PromiseDiscardReasonsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DiscardReasonsApiRequestFactory, responseProcessor?: DiscardReasonsApiResponseProcessor);
    /**
     * Create a new discard reason.
     * Create a discard reason
     * @param InlineObject54
     */
    createDiscardReason(InlineObject54?: InlineObject54, options?: Configuration): Promise<InlineResponse200140>;
    /**
     * Delete a discard reason.
     * Delete a discard reason
     * @param reason_id A discard reason id.
     * @param replace_with_reason_id The id of a discard reason with which to discard the cards which are currently discarded with the discard reason which is about to be deleted.
     */
    deleteDiscardReason(reason_id: number, replace_with_reason_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single discard reason.
     * Get the details of a single discard reason
     * @param reason_id A discard reason id.
     */
    getDiscardReason(reason_id: number, options?: Configuration): Promise<InlineResponse200140>;
    /**
     * Get a list of discard reasons matching some optional criteria.
     * Get a list of discard reasons
     * @param reason_ids A list of the discard reason ids that you want to get.
     * @param label Find a discard reason by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled discard reasons. When set to 0 you will only get disabled discard reasons.
     * @param fields A list of fields that you want in the response. The allowed fields are: reason_id, label, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids and card_count.
     */
    getDiscardReasons(reason_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'reason_id' | 'label' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count'>, options?: Configuration): Promise<InlineResponse200139>;
    /**
     * Update a discard reason.
     * Update a discard reason
     * @param reason_id A discard reason id.
     * @param InlineObject55
     */
    updateDiscardReason(reason_id: number, InlineObject55?: InlineObject55, options?: Configuration): Promise<InlineResponse200140>;
}
export declare class PromiseEmailIntegrationErrorsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationErrorsApiRequestFactory, responseProcessor?: EmailIntegrationErrorsApiResponseProcessor);
    /**
     * Get a list of errors which occurred while emails were being processed
     * Get a list of errors from the email integration.
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrors(sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200142>;
}
export declare class PromiseEmailIntegrationHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EmailIntegrationHistoryApiRequestFactory, responseProcessor?: EmailIntegrationHistoryApiResponseProcessor);
    /**
     * Get a list of the emails received by the email integration and their status.
     * Get a list of the emails received by the email integration and their status.
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistory(sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200143>;
}
export declare class PromiseExportsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ExportsApiRequestFactory, responseProcessor?: ExportsApiResponseProcessor);
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v2 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param methods A list of the methods that you have used while executing the request.
     * @param status_codes A list of the status codes that you have received when executing the request.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getApiRequestHistoryExports(format?: string, user_ids?: Array<number>, methods?: Array<'get' | 'put' | 'post' | 'patch' | 'delete'>, status_codes?: Array<200 | 400 | 401 | 403 | 429 | 500 | 503>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of block reasons management history events.
     * Export a list of block reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBlockReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of business rule executions matching some optional criteria.
     * Export a list of business rule executions
     * @param format The allowed values are excel and json
     * @param business_rule_ids A list of the business_rule_ids that you want to get the executions for.
     * @param executed_on_card_ids A list of the card ids on which the business rules were executed on.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getBusinessRulesExecutionHistoryExport(format?: string, business_rule_ids?: Array<number>, executed_on_card_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of card templates management history events.
     * Export a list of card templates management history events.
     * @param format The allowed values are excel and json
     * @param template_ids A list of the card template ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTemplatesHistoryExports(format?: string, template_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'template_created' | 'template_updated' | 'template_disabled' | 'template_enabled' | 'template_deleted' | 'template_added_to_board' | 'template_updated_for_board' | 'template_removed_from_board' | 'template_structure_updated'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of card types management history events.
     * Export a list of card types management history events.
     * @param format The allowed values are excel and json
     * @param type_ids A list of the card type ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the card type.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCardTypesHistoryExports(format?: string, type_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'type_created' | 'type_updated' | 'type_disabled' | 'type_enabled' | 'type_deleted' | 'type_added_to_board' | 'type_updated_for_board' | 'type_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of custom field management history events.
     * Export a list of custom field management history events.
     * @param format The allowed values are excel and json
     * @param field_ids A list of ids of the custom fields that you want to get the history for.
     * @param event_types Type of action executed on the custom field.
     * @param user_ids A list of user ids that performed an action.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getCustomFieldHistoryExports(format?: string, field_ids?: Array<number>, event_types?: Array<'custom_field_created' | 'custom_field_updated' | 'custom_field_deleted' | 'custom_field_shared' | 'custom_field_unshared' | 'custom_field_added_to_board' | 'custom_field_removed_from_board' | 'custom_field_board_properties_updated'>, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of discard reasons management history events.
     * Export a list of discard reasons management history events.
     * @param format The allowed values are excel and json
     * @param reason_ids A list of the block reason ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the block reason.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getDiscardReasonsHistoryExports(format?: string, reason_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'reason_created' | 'reason_updated' | 'reason_disabled' | 'reason_enabled' | 'reason_deleted' | 'reason_added_to_board' | 'reason_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of error logs from the email integration.
     * Export a list of error logs from the email integration.
     * @param format The allowed values are excel and json
     * @param sender The email address of the sender.
     * @param receiver The email address of a recipent.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationErrorsExport(format?: string, sender?: string, receiver?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of the emails received by the email integration and their status.
     * Export a list of the emails received by the email integration and their status.
     * @param format The allowed values are excel and json
     * @param sender Sender of the email.
     * @param receiver Receiver of the email.
     * @param status Status of the email.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getEmailIntegrationHistoryExport(format?: string, sender?: string, receiver?: string, status?: string, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of logged times management history events.
     * Export a list of logged times management history events.
     * @param format The allowed values are excel and json
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimesHistoryExports(format?: string, logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of api requests matching some optional criteria.
     * Export a list of api v1 requests
     * @param format The allowed values are excel and json
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistoryExport(format?: string, user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of stickers management history events.
     * Export a list of stickers management history events.
     * @param format The allowed values are excel and json
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistoryExports(format?: string, sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of tags management history events.
     * Export a list of tags management history events.
     * @param format The allowed values are excel and json
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistoryExports(format?: string, tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of teams management history events.
     * Export a list of teams management history events.
     * @param format The allowed values are excel and json
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistoryExports(format?: string, team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of user management history events.
     * Export a list of user management history events.
     * @param format The allowed values are excel and json
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistoryExport(format?: string, affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of users last activity.
     * Export a list of users last activity.
     * @param format The allowed values are excel and json
     * @param user_ids A list of user ids that performed an action.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     */
    getUsersLastActivityExport(format?: string, user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, options?: Configuration): Promise<JsonExport>;
    /**
     * Export a list of webhooks creation, deletion, update events matching some optional criteria.
     * Export a list of webhooks creation, deletion, update events
     * @param format The allowed values are excel and json
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistoryExport(format?: string, webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<JsonExport>;
}
export declare class PromiseGlobalUserPrivilegesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: GlobalUserPrivilegesApiRequestFactory, responseProcessor?: GlobalUserPrivilegesApiResponseProcessor);
    /**
     * Check if a user has a global privilege.
     * Check if a user has a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    getGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<void>;
    /**
     * Get a list of all possible global privileges and whether the user has them.
     * Get a list of all possible global privileges and whether the user has them
     * @param user_id A user id.
     */
    getGlobalUserPrivileges(user_id: number, options?: Configuration): Promise<InlineResponse200183>;
    /**
     * Remove a global privilege from the user.
     * Remove a global privilege from the user
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    removeGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<void>;
    /**
     * Give the user a global privilege.
     * Give the user a global privilege
     * @param user_id A user id.
     * @param privilege_name A privilege name.
     */
    setGlobalUserPrivilege(user_id: number, privilege_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseLaneSectionLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LaneSectionLimitsApiRequestFactory, responseProcessor?: LaneSectionLimitsApiResponseProcessor);
    /**
     * Get a list of the lane section limits for a specified board.
     * Get a list of lane section limits
     * @param board_id A board id.
     */
    getLaneSectionLimits(board_id: number, options?: Configuration): Promise<InlineResponse20031>;
    /**
     * Set a lane section limit.
     * Set a lane section limit
     * @param board_id A board id.
     * @param InlineObject12
     */
    setLaneSectionLimit(board_id: number, InlineObject12?: InlineObject12, options?: Configuration): Promise<InlineResponse20032>;
}
export declare class PromiseLanesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LanesApiRequestFactory, responseProcessor?: LanesApiResponseProcessor);
    /**
     * Create a new lane.
     * Create a lane
     * @param board_id A board id.
     * @param InlineObject13
     */
    createLane(board_id: number, InlineObject13?: InlineObject13, options?: Configuration): Promise<InlineResponse20034>;
    /**
     * Delete a lane.
     * Delete a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param move_cards_to_lane_id The id of a lane to which to move the cards from the deleted lane, if there are any.
     * @param move_metrics_to_lane_id The id of a lane to which to move the cycle time data associated with the deleted lane, if there is any. If this parameter is not provided or is null the cycle time data will be discarded!
     */
    deleteLane(board_id: number, lane_id: number, move_cards_to_lane_id?: number, move_metrics_to_lane_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single lane.
     * Get the details of a single lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     */
    getLane(board_id: number, lane_id: number, options?: Configuration): Promise<InlineResponse20035>;
    /**
     * Get a list of the lanes in a specified board.
     * Get a list of lanes
     * @param board_id A board id.
     * @param fields A list of fields that you want in the response. The allowed fields are: lane_id, workflow, parent_lane_id, position, name, description and color.
     */
    getLanes(board_id: number, fields?: Array<'lane_id' | 'workflow_id' | 'parent_lane_id' | 'position' | 'name' | 'description' | 'color'>, options?: Configuration): Promise<InlineResponse20033>;
    /**
     * Update a lane.
     * Update a lane
     * @param board_id A board id.
     * @param lane_id A lane id.
     * @param InlineObject14
     */
    updateLane(board_id: number, lane_id: number, InlineObject14?: InlineObject14, options?: Configuration): Promise<InlineResponse20035>;
}
export declare class PromiseLinkedCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LinkedCardsApiRequestFactory, responseProcessor?: LinkedCardsApiResponseProcessor);
    /**
     * Get a list of the cards that are linked to a given card ordered by position.
     * Get a list of linked cards
     * @param card_id A card id.
     */
    getLinkedCards(card_id: number, options?: Configuration): Promise<InlineResponse200108>;
}
export declare class PromiseLoggedTimeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeApiRequestFactory, responseProcessor?: LoggedTimeApiResponseProcessor);
    /**
     * Add a logged time to a card
     * Add a logged time to a card
     * @param InlineObject56
     */
    addCardLoggedTime(InlineObject56?: InlineObject56, options?: Configuration): Promise<InlineResponse200145>;
    /**
     * Get the details of a single logged time.
     * Get the details of a single logged time
     * @param logged_time_id A logged time id.
     */
    getLoggedTime(logged_time_id: number, options?: Configuration): Promise<InlineResponse200145>;
    /**
     * Get a list of the logged times added to card or cards. The logged times are listed in the order in which they were added.
     * Get a list of logged times
     * @param card_ids Filter logged time by cards ids or id.
     * @param user_ids Filter logged time by user ids or id.
     * @param include_logged_time_for_subtasks When set to 1 you will the get logged time for all tasks and subtasks.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param logged_from The first date and time for which you want results.
     * @param logged_to The last date and time for which you want results.
     * @param logged_from_date The first date for which you want results.
     * @param logged_to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 200 and the maximum is 1000.
     */
    getLoggedTimes(card_ids?: Array<number>, user_ids?: Array<number>, include_logged_time_for_subtasks?: number, from_date?: Date, to_date?: Date, logged_from?: Date, logged_to?: Date, logged_from_date?: Date, logged_to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200144>;
    /**
     * Remove a logged time from a card.
     * Remove a logged time from a card
     * @param logged_time_id A logged time id.
     */
    removeLoggedTime(logged_time_id: number, options?: Configuration): Promise<void>;
    /**
     * Update card logged time.
     * Update card logged time.
     * @param logged_time_id A logged time id.
     * @param InlineObject57
     */
    updateLoggedTime(logged_time_id: number, InlineObject57?: InlineObject57, options?: Configuration): Promise<void>;
}
export declare class PromiseLoggedTimeHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: LoggedTimeHistoryApiRequestFactory, responseProcessor?: LoggedTimeHistoryApiResponseProcessor);
    /**
     * Get a list of logged times creation, deletion, update events matching some optional criteria.
     * Get a list of logged times creation, deletion, update events
     * @param logged_time_ids A list of the logged time ids that you want to get the history for.
     * @param card_ids A list of card ids that performed an action.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the logged time.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getLoggedTimeHistory(logged_time_ids?: Array<number>, card_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'logged_time_created' | 'logged_time_updated' | 'logged_time_deleted' | 'logged_time_transferred_to_card_after_subtask_deleted' | 'logged_time_updated_after_subtask_converted_to_card'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200146>;
}
export declare class PromiseManagedWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ManagedWorkspacesApiRequestFactory, responseProcessor?: ManagedWorkspacesApiResponseProcessor);
    /**
     * Get a list of the workspaces in which the user is a workspace manager.
     * Get a list of managed workspaces
     * @param user_id A user id.
     */
    getManagedWorkspace(user_id: number, options?: Configuration): Promise<InlineResponse200186>;
}
export declare class PromiseMeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MeApiRequestFactory, responseProcessor?: MeApiResponseProcessor);
    /**
     * Get the data about the active user.
     * Get the data about the active user
     */
    getActiveUserData(options?: Configuration): Promise<InlineResponse200147>;
}
export declare class PromiseMergedAreasApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MergedAreasApiRequestFactory, responseProcessor?: MergedAreasApiResponseProcessor);
    /**
     * Create a new merged area.
     * Create a merged area
     * @param board_id A board id.
     * @param InlineObject15
     */
    createMergedArea(board_id: number, InlineObject15?: InlineObject15, options?: Configuration): Promise<InlineResponse20037>;
    /**
     * Split the merged area into its individual cells.
     * Delete a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    deleteMergedArea(board_id: number, area_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single merged area.
     * Get the details of a single merged area
     * @param board_id A board id.
     * @param area_id A area id.
     */
    getMergedArea(board_id: number, area_id: number, options?: Configuration): Promise<InlineResponse20038>;
    /**
     * Get a list of the merged areas in a specified board.
     * Get a list of merged areas
     * @param board_id A board id.
     */
    getMergedAreas(board_id: number, options?: Configuration): Promise<InlineResponse20036>;
    /**
     * Update a merged area.
     * Update a merged area
     * @param board_id A board id.
     * @param area_id A area id.
     * @param InlineObject16
     */
    updateMergedArea(board_id: number, area_id: number, InlineObject16?: InlineObject16, options?: Configuration): Promise<InlineResponse20038>;
}
export declare class PromiseMyApiKeyGenerateApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyApiKeyGenerateApiRequestFactory, responseProcessor?: MyApiKeyGenerateApiResponseProcessor);
    /**
     * Generate an api key.
     * Generate an api key
     */
    generateApiKey(options?: Configuration): Promise<InlineResponse200148>;
}
export declare class PromiseMyAppSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyAppSettingsApiRequestFactory, responseProcessor?: MyAppSettingsApiResponseProcessor);
    /**
     * Get the details of an app setting and the value you have set for it.
     * Get the details of an app setting and the value you have set for it
     * @param setting_name A setting name.
     */
    getMyAppSetting(setting_name: string, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all app settings and the values you have selected.
     * Get a list of all app settings and the values you have selected
     */
    getMyAppSettings(options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of an app setting.
     * Remove the value of an app setting
     * @param setting_name A setting name.
     */
    removeMyAppSetting(setting_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseMyBoardSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyBoardSettingsApiRequestFactory, responseProcessor?: MyBoardSettingsApiResponseProcessor);
    /**
     * Get the details of an board setting and the value you have set for it.
     * Get the details of an board setting and the value you have set for it
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    getMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Promise<InlineResponse20040>;
    /**
     * Get a list of all board settings and the values you have selected.
     * Get a list of all board settings and the values you have selected
     * @param board_id A board id.
     */
    getMyBoardSettings(board_id: number, options?: Configuration): Promise<InlineResponse20039>;
    /**
     * Remove the value of an board setting.
     * Remove the value of an board setting
     * @param board_id A board id.
     * @param setting_name A setting name.
     */
    removeMyBoardSetting(board_id: number, setting_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseMyBoardsSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyBoardsSettingsApiRequestFactory, responseProcessor?: MyBoardsSettingsApiResponseProcessor);
    /**
     * Set the values of board settings for a list of boards.
     * Set the values of board settings for a list of boards
     * @param InlineObject58
     */
    setMySettingsBoards(InlineObject58?: InlineObject58, options?: Configuration): Promise<void>;
}
export declare class PromiseMyDashboardPageSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageSettingsApiRequestFactory, responseProcessor?: MyDashboardPageSettingsApiResponseProcessor);
    /**
     * Unset a single setting added to one of mine dashboard pages.
     * Unset a single setting added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param setting_name A setting name.
     */
    unsetMyDashboardPageSingleSetting(dashboard_page_id: number, setting_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseMyDashboardPageWidgetsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWidgetsApiRequestFactory, responseProcessor?: MyDashboardPageWidgetsApiResponseProcessor);
    /**
     * Check if a widget is added to one of mine dashboard pages.
     * Check if a widget is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     */
    checkMyDashboardPageWidget(dashboard_page_id: number, widget_id: number, options?: Configuration): Promise<InlineResponse200152>;
    /**
     * Get a list of widgets added to one of mine dashboard pages.
     * Get a list of widgets added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWidgets(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200151>;
    /**
     * Update position of a single widget on one of mine dashboard pages.
     * Update position of a single widget on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param widget_id A widget id.
     * @param InlineObject60
     */
    updateMyDashboardPageWidgetPosition(dashboard_page_id: number, widget_id: number, InlineObject60?: InlineObject60, options?: Configuration): Promise<InlineResponse200150>;
}
export declare class PromiseMyDashboardPageWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPageWorkspacesApiRequestFactory, responseProcessor?: MyDashboardPageWorkspacesApiResponseProcessor);
    /**
     * Check if a workspace is added to one of mine dashboard pages.
     * Check if a workspace is added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     */
    checkMyDashboardPageWorkspace(dashboard_page_id: number, workspace_id: number, options?: Configuration): Promise<InlineResponse200154>;
    /**
     * Get a list of workspaces added to one of mine dashboard pages.
     * Get a list of workspaces added to one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPageWorkspaces(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200153>;
    /**
     * Update position of a single workspace on one of mine dashboard pages.
     * Update position of a single workspace on one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param workspace_id A workspace id.
     * @param InlineObject61
     */
    updateMyDashboardPageWorkspacePosition(dashboard_page_id: number, workspace_id: number, InlineObject61?: InlineObject61, options?: Configuration): Promise<InlineResponse200150>;
}
export declare class PromiseMyDashboardPagesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyDashboardPagesApiRequestFactory, responseProcessor?: MyDashboardPagesApiResponseProcessor);
    /**
     * Get the details of one of mine dashboard pages.
     * Get the details of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     */
    getMyDashboardPage(dashboard_page_id: number, options?: Configuration): Promise<InlineResponse200150>;
    /**
     * Get a list of my dashboard pages.
     * Get a list of my dashboard pages
     */
    getMyDashboardPages(options?: Configuration): Promise<InlineResponse200149>;
    /**
     * Update position of one of mine dashboard pages.
     * Update position of one of mine dashboard pages
     * @param dashboard_page_id A dashboard page id.
     * @param InlineObject59
     */
    updateMyDashboardPagePosition(dashboard_page_id: number, InlineObject59?: InlineObject59, options?: Configuration): Promise<InlineResponse200150>;
}
export declare class PromiseMyFavoriteBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MyFavoriteBoardsApiRequestFactory, responseProcessor?: MyFavoriteBoardsApiResponseProcessor);
    /**
     * Add a board to the list of your favorite boards or change its position within the list.
     * Add a board to your favorite
     * @param board_id A board id.
     * @param InlineObject62
     */
    addFavoriteBoard(board_id: number, InlineObject62?: InlineObject62, options?: Configuration): Promise<InlineResponse200156>;
    /**
     * Check if a board is one of your favorite boards.
     * Check if a board is one of your favorite
     * @param board_id A board id.
     */
    checkFavoriteBoard(board_id: number, options?: Configuration): Promise<InlineResponse200155>;
    /**
     * Get a list of your favorite boards.
     * Get a list of your favorite boards
     */
    getFavoriteBoards(options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Remove a board from the list of your favorite boards.
     * Remove a board from your favorite
     * @param board_id A board id.
     */
    removeFavoriteBoard(board_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseOldApiLimitsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OldApiLimitsApiRequestFactory, responseProcessor?: OldApiLimitsApiResponseProcessor);
    /**
     * Get a list of the old api request limits.
     * Get the hourly limits for the old api requests
     */
    getOldApiLimits(options?: Configuration): Promise<InlineResponse200157>;
}
export declare class PromiseOldApiRequestHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OldApiRequestHistoryApiRequestFactory, responseProcessor?: OldApiRequestHistoryApiResponseProcessor);
    /**
     * Get a list of api requests matching some optional criteria.
     * Get a list of api requests
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getOldApiRequestHistory(user_ids?: Array<number>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200158>;
    /**
     * Get a list of old api requests aggregated by user matching some optional criteria.
     * Get a list of old api requests aggregated by user
     * @param user_ids A list of the user_ids that you have execututed the following requests.
     * @param aggregation_period An option regarding the aggregation period.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results. If you send from_date but not to_date, to_date will automatically be set to 7 days after from_date. If no filters are provided, the from_date will be set to 7 days before the current date.
     * @param to_date The last date for which you want results. If you send to_date but not from_date, from_date will automatically be set to 7 days before to_date.
     */
    getOldApiRequestHistoryAggregated(user_ids?: Array<number>, aggregation_period?: 'day' | 'hour', to?: Date, from_date?: Date, to_date?: Date, options?: Configuration): Promise<InlineResponse200159>;
}
export declare class PromiseParentCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ParentCardsApiRequestFactory, responseProcessor?: ParentCardsApiResponseProcessor);
    /**
     * Make a card a parent of a given card.
     * Make a card a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param InlineObject44
     */
    addParentCard(card_id: number, parent_card_id: number, InlineObject44?: InlineObject44, options?: Configuration): Promise<void | InlineResponse20073>;
    /**
     * Check if a card is a parent of a given card and get its position in the child's list of linked cards.
     * Check if a card is a parent of a given card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     */
    checkParentCard(card_id: number, parent_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of parent cards of a given card and the parent cards of those cards too.
     * Get a list of parent cards including their parent cards too
     * @param card_id A card id.
     */
    getParentCardGraph(card_id: number, options?: Configuration): Promise<InlineResponse20093>;
    /**
     * Get a list of the parent cards of a given card.
     * Get a list of parent cards
     * @param card_id A card id.
     */
    getParentCards(card_id: number, options?: Configuration): Promise<InlineResponse200116>;
    /**
     * Remove the link between a child card and a parent card.
     * Remove the link between a child card and a parent card
     * @param card_id A card id.
     * @param parent_card_id A parent card id.
     * @param exceeding_reason Exceeding reason.
     */
    removeParentCard(card_id: number, parent_card_id: number, exceeding_reason?: string, options?: Configuration): Promise<void>;
}
export declare class PromisePredecessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: PredecessorCardsApiRequestFactory, responseProcessor?: PredecessorCardsApiResponseProcessor);
    /**
     * Make a card a predecessor of a given card.
     * Make a card a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     * @param InlineObject45
     */
    addPredecessorCard(card_id: number, predecessor_card_id: number, InlineObject45?: InlineObject45, options?: Configuration): Promise<void | InlineResponse20075>;
    /**
     * Check if a card is a predecessor of a given card and get its position in the successor's list of linked cards.
     * Check if a card is a predecessor of a given card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    checkPredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of predecessor cards of a given card and the predecessor cards of those cards too.
     * Get a list of predecessor cards including their predecessor cards too
     * @param card_id A card id.
     */
    getPredecessorCardGraph(card_id: number, options?: Configuration): Promise<InlineResponse200117>;
    /**
     * Get a list of the predecessor cards of a given card.
     * Get a list of predecessor cards
     * @param card_id A card id.
     */
    getPredecessorCards(card_id: number, options?: Configuration): Promise<InlineResponse200118>;
    /**
     * Remove the link between a successor card and a predecessor card.
     * Remove the link between a successor card and a predecessor card
     * @param card_id A card id.
     * @param predecessor_card_id A predecessor card id.
     */
    removePredecessorCard(card_id: number, predecessor_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseRelatedWorkflowsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RelatedWorkflowsApiRequestFactory, responseProcessor?: RelatedWorkflowsApiResponseProcessor);
    /**
     * Add a related workflow on a board.
     * Add a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject17
     */
    addBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject17?: InlineObject17, options?: Configuration): Promise<InlineResponse20042>;
    /**
     * Check if a board is related to another board and workflow.
     * Check if a board is related to another board and workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    checkBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<InlineResponse20042>;
    /**
     * Get a list of boards and workflows related to a specified board.
     * Get a list of related workflows
     * @param board_id A board id.
     */
    getRelatedBoardsWorlflows(board_id: number, options?: Configuration): Promise<InlineResponse20041>;
    /**
     * Remove a related board workflow.
     * Remove a related board workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    removeBoardRelatedWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<void>;
    /**
     * Update a related workflow on a board.
     * Update a related workflow on a board
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject18
     */
    updateBoardRelatedWorkflow(board_id: number, workflow_id: number, InlineObject18?: InlineObject18, options?: Configuration): Promise<InlineResponse20042>;
}
export declare class PromiseRelativeCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RelativeCardsApiRequestFactory, responseProcessor?: RelativeCardsApiResponseProcessor);
    /**
     * Make a card a relative of a given card.
     * Make a card a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     * @param InlineObject46
     */
    addRelatedCard(card_id: number, related_card_id: number, InlineObject46?: InlineObject46, options?: Configuration): Promise<void | InlineResponse20077>;
    /**
     * Check if a card is a relative of a given card and get its position in that card's list of linked cards.
     * Check if a card is a relative of a given card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    checkRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get a list of the cards related to a given card.
     * Get a list of related cards
     * @param card_id A card id.
     */
    getRelatedCards(card_id: number, options?: Configuration): Promise<InlineResponse200119>;
    /**
     * Remove the link between a card and a related card.
     * Remove the link between a card and a related card
     * @param card_id A card id.
     * @param related_card_id A related card id.
     */
    removeRelatedCard(card_id: number, related_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseRolePermissionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RolePermissionsApiRequestFactory, responseProcessor?: RolePermissionsApiResponseProcessor);
    /**
     * Check if a role has a permission.
     * Check if a role has a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    getRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<void>;
    /**
     * Get a list of all possible role permissions and whether the role has them.
     * Get a list of all possible role permissions and whether the role has them
     * @param role_id A role id.
     */
    getRolePermissions(role_id: number, options?: Configuration): Promise<InlineResponse200166>;
    /**
     * Remove a permission from the role.
     * Remove a permission from the role
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    removeRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<void>;
    /**
     * Give the role a permission.
     * Give the role a permission
     * @param role_id A role id.
     * @param permission_name A permission name.
     */
    setRolePermission(role_id: number, permission_name: string, options?: Configuration): Promise<void>;
}
export declare class PromiseRolesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: RolesApiRequestFactory, responseProcessor?: RolesApiResponseProcessor);
    /**
     * Create a new role.
     * Create a role
     * @param InlineObject63
     */
    createRole(InlineObject63?: InlineObject63, options?: Configuration): Promise<InlineResponse200164>;
    /**
     * Delete a role.
     * Delete a role
     * @param role_id A role id.
     * @param replace_with_role_id The id of a role which will be given to the users which currently have the role which is about to be deleted.
     */
    deleteRole(role_id: number, replace_with_role_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single role.
     * Get the details of a single role
     * @param role_id A role id.
     */
    getRole(role_id: number, options?: Configuration): Promise<InlineResponse200165>;
    /**
     * Get a list of roles matching some optional criteria.
     * Get a list of roles
     * @param role_ids A list of the role ids that you want to get.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is permissions.
     */
    getRoles(role_ids?: Array<number>, expand?: Array<string>, options?: Configuration): Promise<InlineResponse200163>;
    /**
     * Update a role.
     * Update a role
     * @param role_id A role id.
     * @param InlineObject64
     */
    updateRole(role_id: number, InlineObject64?: InlineObject64, options?: Configuration): Promise<InlineResponse200165>;
}
export declare class PromiseStickerBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerBoardsApiRequestFactory, responseProcessor?: StickerBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the sticker is available.
     * Get a list of boards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerBoards(sticker_id: number, options?: Configuration): Promise<InlineResponse20011>;
}
export declare class PromiseStickerCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerCardsApiRequestFactory, responseProcessor?: StickerCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the sticker is available.
     * Get a list of cards where the sticker is available
     * @param sticker_id A sticker id.
     */
    getStickerCards(sticker_id: number, options?: Configuration): Promise<InlineResponse20012>;
}
export declare class PromiseStickerHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickerHistoryApiRequestFactory, responseProcessor?: StickerHistoryApiResponseProcessor);
    /**
     * Get a list of stickers creation, deletion, update events matching some optional criteria.
     * Get a list of stickers creation, deletion, update events
     * @param sticker_ids A list of the sticker ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the sticker.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getStickersHistory(sticker_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'sticker_created' | 'sticker_updated' | 'sticker_disabled' | 'sticker_enabled' | 'sticker_deleted' | 'sticker_added_to_board' | 'sticker_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200169>;
}
export declare class PromiseStickersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StickersApiRequestFactory, responseProcessor?: StickersApiResponseProcessor);
    /**
     * Create a new sticker.
     * Create a sticker
     * @param InlineObject65
     */
    createSticker(InlineObject65?: InlineObject65, options?: Configuration): Promise<InlineResponse200168>;
    /**
     * Delete a sticker.
     * Delete a sticker
     * @param sticker_id A sticker id.
     * @param replace_with_sticker_id The id of a sticker with which to replace the one to be deleted on the cards using it.
     */
    deleteSticker(sticker_id: number, replace_with_sticker_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single sticker.
     * Get the details of a single sticker
     * @param sticker_id A sticker id.
     */
    getSticker(sticker_id: number, options?: Configuration): Promise<InlineResponse200168>;
    /**
     * Get a list of stickers matching some optional criteria.
     * Get a list of stickers
     * @param sticker_ids A list of the sticker ids that you want to get.
     * @param label Find a sticker by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled stickers. When set to 0 you will only get disabled stickers.
     * @param fields A list of fields that you want in the response. The allowed fields are: sticker_id, icon_type, icon_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getStickers(sticker_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'sticker_id' | 'icon_type' | 'icon_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<InlineResponse200167>;
    /**
     * Update a sticker.
     * Update a sticker
     * @param sticker_id A sticker id.
     * @param InlineObject66
     */
    updateSticker(sticker_id: number, InlineObject66?: InlineObject66, options?: Configuration): Promise<InlineResponse200168>;
}
export declare class PromiseSuccessorCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: SuccessorCardsApiRequestFactory, responseProcessor?: SuccessorCardsApiResponseProcessor);
    /**
     * Make a card a successor of a given card.
     * Make a card a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     * @param InlineObject48
     */
    addSuccessorCard(card_id: number, successor_card_id: number, InlineObject48?: InlineObject48, options?: Configuration): Promise<InlineResponse20083 | void>;
    /**
     * Check if a card is a successor of a given card and get its position in the predecessor's list of linked cards.
     * Check if a card is a successor of a given card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    checkSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Promise<InlineResponse20064>;
    /**
     * Get the full list of successor cards of a given card and the successor cards of those cards too.
     * Get a list of successor cards including their successor cards too
     * @param card_id A card id.
     */
    getSuccessorCardGraph(card_id: number, options?: Configuration): Promise<InlineResponse200117>;
    /**
     * Get a list of the successor cards of a given card.
     * Get a list of successor cards
     * @param card_id A card id.
     */
    getSuccessorCards(card_id: number, options?: Configuration): Promise<InlineResponse200126>;
    /**
     * Remove the link between a predecessor card and a successor card.
     * Remove the link between a predecessor card and a successor card
     * @param card_id A card id.
     * @param successor_card_id A successor card id.
     */
    removeSuccessorCard(card_id: number, successor_card_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseTagBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagBoardsApiRequestFactory, responseProcessor?: TagBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the tag is available.
     * Get a list of boards where the tag is available
     * @param tag_id A tag id.
     */
    getTagBoards(tag_id: number, options?: Configuration): Promise<InlineResponse20011>;
    /**
     * Make a tag available or unavailable on several boards.
     * Make a tag available or unavailable on several boards
     * @param tag_id A tag id.
     * @param InlineObject69
     */
    updateTagBoards(tag_id: number, InlineObject69?: InlineObject69, options?: Configuration): Promise<void>;
}
export declare class PromiseTagCardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagCardsApiRequestFactory, responseProcessor?: TagCardsApiResponseProcessor);
    /**
     * Get a list of the cards on which the tag is available.
     * Get a list of cards where the tag is available
     * @param tag_id A tag id.
     */
    getTagCards(tag_id: number, options?: Configuration): Promise<InlineResponse20012>;
}
export declare class PromiseTagHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagHistoryApiRequestFactory, responseProcessor?: TagHistoryApiResponseProcessor);
    /**
     * Get a list of tags creation, deletion, update events matching some optional criteria.
     * Get a list of tags creation, deletion, update events
     * @param tag_ids A list of the tag ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the tag.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTagsHistory(tag_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'tag_created' | 'tag_updated' | 'tag_disabled' | 'tag_enabled' | 'tag_deleted' | 'tag_added_to_board' | 'tag_removed_from_board'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200172>;
}
export declare class PromiseTagsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TagsApiRequestFactory, responseProcessor?: TagsApiResponseProcessor);
    /**
     * Create a new tag.
     * Create a tag
     * @param InlineObject67
     */
    createTag(InlineObject67?: InlineObject67, options?: Configuration): Promise<InlineResponse200171>;
    /**
     * Delete a tag.
     * Delete a tag
     * @param tag_id A tag id.
     * @param replace_with_tag_id The id of a tag with which to replace the one to be deleted on the cards using it.
     */
    deleteTag(tag_id: number, replace_with_tag_id?: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single tag.
     * Get the details of a single tag
     * @param tag_id A tag id.
     */
    getTag(tag_id: number, options?: Configuration): Promise<InlineResponse200171>;
    /**
     * Get a list of tags matching some optional criteria.
     * Get a list of tags
     * @param tag_ids A list of the tag ids that you want to get.
     * @param label Find a tag by its full label.
     * @param availability A list of the availability values that you want to get.
     * @param is_enabled When set to 1 you will only get enabled tags. When set to 0 you will only get disabled tags.
     * @param fields A list of fields that you want in the response. The allowed fields are: tag_id, label, color, availability and is_enabled.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: board_ids, board_count, card_ids, card_count and business_rules.
     */
    getTags(tag_ids?: Array<number>, label?: string, availability?: Array<0 | 1 | 2>, is_enabled?: 0 | 1, fields?: Array<'tag_id' | 'label' | 'color' | 'availability' | 'is_enabled'>, expand?: Array<'board_ids' | 'board_count' | 'card_ids' | 'card_count' | 'business_rules'>, options?: Configuration): Promise<InlineResponse200170>;
    /**
     * Update a tag.
     * Update a tag
     * @param tag_id A tag id.
     * @param InlineObject68
     */
    updateTag(tag_id: number, InlineObject68?: InlineObject68, options?: Configuration): Promise<InlineResponse200171>;
}
export declare class PromiseTeamBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamBoardsApiRequestFactory, responseProcessor?: TeamBoardsApiResponseProcessor);
    /**
     * Get a list of the boards on which the team is available.
     * Get a list of boards where the team is available
     * @param team_id A team id.
     */
    getTeamBoards(team_id: number, options?: Configuration): Promise<InlineResponse20011>;
}
export declare class PromiseTeamHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamHistoryApiRequestFactory, responseProcessor?: TeamHistoryApiResponseProcessor);
    /**
     * Get a list of teams creation, deletion, update events matching some optional criteria.
     * Get a list of teams creation, deletion, update events
     * @param team_ids A list of the team ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the team.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getTeamsHistory(team_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'team_created' | 'team_updated' | 'team_deleted' | 'team_added_to_board' | 'team_change_role_for_board' | 'team_removed_from_board' | 'user_added_to_team' | 'user_removed_from_team' | 'user_added_to_team_managers' | 'user_removed_from_team_managers'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200175>;
}
export declare class PromiseTeamManagersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamManagersApiRequestFactory, responseProcessor?: TeamManagersApiResponseProcessor);
    /**
     * Set a user as a manager of the team.
     * Set a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a user is added as a team manager to a team.
     * Check if a user is added as a team manager to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of users who can manage the team.
     * Get a list of users who can manage the team
     * @param team_id A team id.
     */
    getTeamManagers(team_id: number, options?: Configuration): Promise<InlineResponse200176>;
    /**
     * Remove a user as a manager of the team.
     * Remove a user as a manager of the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamManager(team_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseTeamUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamUsersApiRequestFactory, responseProcessor?: TeamUsersApiResponseProcessor);
    /**
     * Add a user to the team.
     * Add a user to the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    addTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a user is added to a team.
     * Check if a user is added to a team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    checkTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of users added to the team.
     * Get a list of users added to the team
     * @param team_id A team id.
     */
    getTeamUsers(team_id: number, options?: Configuration): Promise<InlineResponse200177>;
    /**
     * Remove a user from the team.
     * Remove a user from the team
     * @param team_id A team id.
     * @param user_id A user id.
     */
    removeTeamUser(team_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: TeamsApiRequestFactory, responseProcessor?: TeamsApiResponseProcessor);
    /**
     * Create a new team.
     * Create a team
     * @param InlineObject70
     */
    createTeam(InlineObject70?: InlineObject70, options?: Configuration): Promise<InlineResponse200174>;
    /**
     * Delete a team.
     * Delete a team
     * @param team_id A team id.
     */
    deleteTeam(team_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single team.
     * Get the details of a single team
     * @param team_id A team id.
     */
    getTeam(team_id: number, options?: Configuration): Promise<InlineResponse200174>;
    /**
     * Get a list of teams matching some optional criteria.
     * Get a list of teams
     * @param team_ids A list of the team ids that you want to get.
     * @param name Find a team by its full name.
     * @param fields A list of fields that you want in the response. The allowed fields are: team_id, name, description.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: boards and user_ids.
     */
    getTeams(team_ids?: Array<number>, name?: string, fields?: Array<'team_id' | 'name' | 'description'>, expand?: Array<'boards' | 'user_ids'>, options?: Configuration): Promise<InlineResponse200173>;
    /**
     * Update a team.
     * Update a team
     * @param team_id A team id.
     * @param InlineObject71
     */
    updateTeam(team_id: number, InlineObject71?: InlineObject71, options?: Configuration): Promise<InlineResponse200174>;
}
export declare class PromiseUserActivityApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserActivityApiRequestFactory, responseProcessor?: UserActivityApiResponseProcessor);
    /**
     * Get the last activity of a user.
     * Get the last activity of a user
     * @param user_id A user id.
     */
    getUserLastActivity(user_id: number, options?: Configuration): Promise<InlineResponse200185>;
}
export declare class PromiseUserBoardsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserBoardsApiRequestFactory, responseProcessor?: UserBoardsApiResponseProcessor);
    /**
     * Get a list of the boards to which the user is assigned and with what role.
     * Get a list of boards the user is assigned to
     * @param user_id A user id.
     */
    getUserBoardRoles(user_id: number, options?: Configuration): Promise<InlineResponse200182>;
}
export declare class PromiseUserHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserHistoryApiRequestFactory, responseProcessor?: UserHistoryApiResponseProcessor);
    /**
     * Get a list of user management history events.
     * Get a list of user management history events.
     * @param affected_user_ids A list of the user ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getUsersHistory(affected_user_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'user_confirmed' | 'user_deleted' | 'email_changed' | 'username_changed' | 'realname_changed' | 'avatar_changed' | 'tfa_changed' | 'tfa_enabled' | 'tfa_disabled' | 'tfa_key_changed' | 'tfa_key_reset' | 'api_key_changed' | 'timezone_changed' | 'language_changed' | 'password_changed' | 'user_disabled' | 'user_enabled' | 'wip_limits_changed' | 'global_privilege_added' | 'global_privilege_removed' | 'made_wm' | 'made_non_wm' | 'assigned_to_board' | 'unassigned_from_board' | 'board_role_changed' | 'invitation_sent' | 'invitation_code_changed'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200179>;
}
export declare class PromiseUserInvolvedBusinessRulesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserInvolvedBusinessRulesApiRequestFactory, responseProcessor?: UserInvolvedBusinessRulesApiResponseProcessor);
    /**
     * Get a list of business rules where the user is involved.
     * Get a list of business rules where the user is involved
     * @param user_id A user id.
     */
    getUserInvolvedBusinessRules(user_id: number, options?: Configuration): Promise<InlineResponse200184>;
}
export declare class PromiseUserTeamsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UserTeamsApiRequestFactory, responseProcessor?: UserTeamsApiResponseProcessor);
    /**
     * Check if the users is a member of the team.
     * Check if the users is a member of the team
     * @param user_id A user id.
     * @param team_id A team id.
     */
    checkUserTeam(user_id: number, team_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of teams where the user is a member.
     * Get a list of teams where the user is a member
     * @param user_id A user id.
     */
    getUserTeams(user_id: number, options?: Configuration): Promise<InlineResponse200187>;
}
export declare class PromiseUsersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: UsersApiRequestFactory, responseProcessor?: UsersApiResponseProcessor);
    /**
     * Delete a user.
     * Delete a user
     * @param user_id A user id.
     */
    deleteUser(user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single user.
     * Get the details of a single user
     * @param user_id A user id.
     */
    getUser(user_id: number, options?: Configuration): Promise<InlineResponse200181>;
    /**
     * Get a list of users matching some optional criteria.
     * Get a list of users
     * @param user_ids A list of the user ids that you want to get.
     * @param is_enabled When set to 1 you will only get enabled users. When set to 0 you will only get disabled users.
     * @param is_confirmed When set to 1 you will only get users who have confirmed their invitation. When set to 0 you will only get users who have not confirmed their invitation.
     * @param if_assigned_where_i_am When set to 1 you will only get users which are assigned to the boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: user_id, email, username, realname, avatar, is_enabled, is_confirmed, is_tfa_enabled and registration_date.
     * @param expand A list of properties for which you want to get additional details. The allowed properties at the moment are: invitation_status, global_privileges, board_roles, managed_workspaces and last_activity.
     */
    getUsers(user_ids?: Array<number>, is_enabled?: 0 | 1, is_confirmed?: 0 | 1, if_assigned_where_i_am?: 0 | 1, fields?: Array<'user_id' | 'email' | 'username' | 'realname' | 'avatar' | 'is_enabled' | 'is_confirmed' | 'is_tfa_enabled' | 'registration_date' | 'timezone' | 'language'>, expand?: Array<'invitation_status' | 'global_privileges' | 'board_roles' | 'managed_workspaces' | 'last_activity'>, options?: Configuration): Promise<InlineResponse200178>;
    /**
     * Invite a new user.
     * Invite a user
     * @param InlineObject72
     */
    inviteUser(InlineObject72?: InlineObject72, options?: Configuration): Promise<InlineResponse200180>;
    /**
     * Send a new invitation email to the user.
     * Resend an invitation
     * @param user_id A user id.
     */
    resendInvitation(user_id: number, options?: Configuration): Promise<void>;
    /**
     * Update a user.
     * Update a user
     * @param user_id A user id.
     * @param InlineObject73
     */
    updateUser(user_id: number, InlineObject73?: InlineObject73, options?: Configuration): Promise<InlineResponse200181>;
}
export declare class PromiseWebhookHistoryApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WebhookHistoryApiRequestFactory, responseProcessor?: WebhookHistoryApiResponseProcessor);
    /**
     * Get a list of webhooks creation, deletion, update events matching some optional criteria.
     * Get a list of webhooks creation, deletion, update events
     * @param webhook_ids A list of the webhook ids that you want to get the history for.
     * @param user_ids A list of user ids that performed an action.
     * @param event_types Type of action executed on the webhook.
     * @param to The last date and time for which you want results.
     * @param from_date The first date for which you want results.
     * @param to_date The last date for which you want results.
     * @param page The results will always be split into pages. This parameter controls which page is returned. By default it&#39;s the first page.
     * @param per_page Controls how many results are returned per page. The default value is 100 and the maximum is 200.
     */
    getWebhooksHistory(webhook_ids?: Array<number>, user_ids?: Array<number>, event_types?: Array<'created' | 'updated' | 'deleted'>, to?: Date, from_date?: Date, to_date?: Date, page?: number, per_page?: number, options?: Configuration): Promise<InlineResponse200190>;
}
export declare class PromiseWebhooksApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WebhooksApiRequestFactory, responseProcessor?: WebhooksApiResponseProcessor);
    /**
     * Create a new webhook.
     * Create a webhook
     * @param InlineObject74
     */
    createWebhook(InlineObject74?: InlineObject74, options?: Configuration): Promise<InlineResponse200189>;
    /**
     * Delete a webhook.
     * Delete a webhook
     * @param webhook_id A webhook id.
     */
    deleteWebhook(webhook_id: number, options?: Configuration): Promise<void>;
    /**
     * Get the details of a single webhook.
     * Get the details of a single webhook
     * @param webhook_id A webhook id.
     */
    getWebhook(webhook_id: number, options?: Configuration): Promise<InlineResponse200191>;
    /**
     * Get a list of the currently defined webhooks optionally filtered by board id.
     * Get all webhooks
     * @param board_ids A list of the board ids for which you want to get the webhooks.
     */
    getWebhooks(board_ids?: Array<number>, options?: Configuration): Promise<InlineResponse200188>;
    /**
     * Update a webhook.
     * Update a webhook
     * @param webhook_id A webhook id.
     * @param InlineObject75
     */
    updateWebhook(webhook_id: number, InlineObject75?: InlineObject75, options?: Configuration): Promise<InlineResponse200191>;
}
export declare class PromiseWorkflowsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkflowsApiRequestFactory, responseProcessor?: WorkflowsApiResponseProcessor);
    /**
     * Copy existing workflow.
     * Copy a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject25
     */
    copyWorkflow(board_id: number, workflow_id: number, InlineObject25?: InlineObject25, options?: Configuration): Promise<InlineResponse20054>;
    /**
     * Create a new workflow
     * Create workflow
     * @param board_id A board id.
     * @param InlineObject23
     */
    createWorkflow(board_id: number, InlineObject23?: InlineObject23, options?: Configuration): Promise<InlineResponse20052>;
    /**
     * Check if a workflow exists and get its details.
     * Get workflow details
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    getWorkflow(board_id: number, workflow_id: number, options?: Configuration): Promise<InlineResponse20053>;
    /**
     * Check if board workflows exists and get their details.
     * Get workflow details
     * @param board_id A board id.
     */
    getWorkflows(board_id: number, options?: Configuration): Promise<InlineResponse20052>;
    /**
     * Update workflow`s properties
     * Update workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     * @param InlineObject24
     */
    updateWorkflow(board_id: number, workflow_id: number, InlineObject24?: InlineObject24, options?: Configuration): Promise<InlineResponse20053>;
    /**
     * Delete a workflow.
     * Delete a workflow
     * @param board_id A board id.
     * @param workflow_id A workflow id.
     */
    workflowDelete(board_id: number, workflow_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseWorkspaceManagersApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkspaceManagersApiRequestFactory, responseProcessor?: WorkspaceManagersApiResponseProcessor);
    /**
     * Make a user a workspace manager.
     * Make a user a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    addWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Check if a user is a workspace manager.
     * Check if a user is a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    checkWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<void>;
    /**
     * Get a list of the workspace managers for a workspace.
     * Get a list of workspace managers
     * @param workspace_id A workspace id.
     */
    getWorkspaceManagers(workspace_id: number, options?: Configuration): Promise<InlineResponse200195>;
    /**
     * Make a user not a workspace manager.
     * Make a user not a workspace manager
     * @param workspace_id A workspace id.
     * @param user_id A user id.
     */
    removeWorkspaceManager(workspace_id: number, user_id: number, options?: Configuration): Promise<void>;
}
export declare class PromiseWorkspacesApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: WorkspacesApiRequestFactory, responseProcessor?: WorkspacesApiResponseProcessor);
    /**
     * Create a new workspace.
     * Create a workspace
     * @param InlineObject76
     */
    createWorkspace(InlineObject76?: InlineObject76, options?: Configuration): Promise<InlineResponse200193>;
    /**
     * Get the details of a single workspace.
     * Get the details of a single workspace
     * @param workspace_id A workspace id.
     */
    getWorkspace(workspace_id: number, options?: Configuration): Promise<InlineResponse200194>;
    /**
     * Get a list of workspaces matching some optional criteria.
     * Get a list of workspaces
     * @param workspace_ids A list of the workspace ids that you want to get.
     * @param type When set to 1 you will only get team workspaces. When set to 2 you will only get management workspaces.
     * @param is_archived When set to 0 you will only get non-archived workspaces. When set to 1 you will only get archived workspaces.
     * @param if_workspace_manager When set to 1 you will only get workspaces for which you are a workspace manager.
     * @param if_assigned_to_boards When set to 1 you will only get workspaces in which you are assigned to at least one board.
     * @param board_filter_is_archived When set to 0 or 1 and the optional expand parameter includes boards, you will only get non archived / archived boards respectively.
     * @param board_filter_if_assigned When set to 1 and the optional expand parameter includes boards, you will only get boards you are assigned to.
     * @param fields A list of fields that you want in the response. The allowed fields are: workspace_id, is_archived and name.
     * @param expand A list of properties for which you want to get additional details. The only allowed property at the moment is boards optionally followed by a list of fields inside square brackets. For boards the allowed fields are board_id, is_archived and name.
     */
    getWorkspaces(workspace_ids?: Array<number>, type?: 1 | 2, is_archived?: 0 | 1, if_workspace_manager?: 0 | 1, if_assigned_to_boards?: 0 | 1, board_filter_is_archived?: 0 | 1, board_filter_if_assigned?: 0 | 1, fields?: Array<'workspace_id' | 'type' | 'is_archived' | 'name'>, expand?: Array<string>, options?: Configuration): Promise<InlineResponse200192>;
    /**
     * Update a workspace.
     * Update a workspace
     * @param workspace_id A workspace id.
     * @param InlineObject77
     */
    updateWorkspace(workspace_id: number, InlineObject77?: InlineObject77, options?: Configuration): Promise<InlineResponse200194>;
}
//# sourceMappingURL=api.d.ts.map